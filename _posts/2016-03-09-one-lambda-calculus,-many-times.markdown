---
title      : One λ-calculus, many times...
date       : 2016-03-09 12:00:00
categories : [agda]
tags       : [agda]
published  : false
---

Previously, I mentioned that one of the most common Agda blogposts
you'll find out there is implementing the λ-calculus.

<div style="display:none;">
<pre class="Agda"><a name="308" class="Keyword">module</a><a name="314"> </a><a name="315" href="#1" class="Module">2016-03-09-one-lambda-calculus,-many-times</a><a name="357"> </a><a name="358" class="Keyword">where</a></pre>
</div>


<pre class="Agda"><a name="397" class="Keyword">module</a><a name="403"> </a><a name="404" href="#404" class="Module">SetAntecedent</a><a name="417"> </a><a name="418" class="Symbol">(</a><a name="419" href="#419" class="Bound">Atom</a><a name="423"> </a><a name="424" class="Symbol">:</a><a name="425"> </a><a name="426" class="PrimitiveType">Set</a><a name="429" class="Symbol">)</a><a name="430"> </a><a name="431" class="Keyword">where</a></pre>

<pre class="Agda">  <a name="464" class="Keyword">data</a><a name="468"> </a><a name="469" href="#315" class="Module">Type</a><a name="473"> </a><a name="474" class="Symbol">:</a><a name="475"> </a><a name="476" class="PrimitiveType">Set</a><a name="479"> </a><a name="480" class="Keyword">where</a><a name="485">
    </a><a name="490" href="#490" class="InductiveConstructor">El</a><a name="492">  </a><a name="494" class="Symbol">:</a><a name="495"> </a><a name="496" href="#419" class="Bound">Atom</a><a name="500"> </a><a name="501" class="Symbol">→</a><a name="502"> </a><a name="503" href="#469" class="Datatype">Type</a><a name="507">
    </a><a name="512" href="#512" class="InductiveConstructor Operator">_⇒_</a><a name="515"> </a><a name="516" class="Symbol">:</a><a name="517"> </a><a name="518" href="#469" class="Datatype">Type</a><a name="522"> </a><a name="523" class="Symbol">→</a><a name="524"> </a><a name="525" href="#469" class="Datatype">Type</a><a name="529"> </a><a name="530" class="Symbol">→</a><a name="531"> </a><a name="532" href="#469" class="Datatype">Type</a></pre>


<pre class="Agda">  <a name="565" class="Keyword">open</a><a name="569"> </a><a name="570" class="Keyword">import</a><a name="576"> </a><a name="577" href="https://agda.github.io/agda-stdlib/Data.Nat.html#1" class="Module" target="_blank">Data.Nat</a><a name="585">             </a><a name="598" class="Keyword">using</a><a name="603"> </a><a name="604" class="Symbol">(</a><a name="605">ℕ</a><a name="606" class="Symbol">;</a><a name="607"> suc</a><a name="611" class="Symbol">;</a><a name="612"> zero</a><a name="617" class="Symbol">)</a><a name="618">
  </a><a name="621" class="Keyword">open</a><a name="625"> </a><a name="626" class="Keyword">import</a><a name="632"> </a><a name="633" href="https://agda.github.io/agda-stdlib/Data.Fin.html#1" class="Module" target="_blank">Data.Fin</a><a name="641">             </a><a name="654" class="Keyword">using</a><a name="659"> </a><a name="660" class="Symbol">(</a><a name="661">Fin</a><a name="664" class="Symbol">;</a><a name="665"> suc</a><a name="669" class="Symbol">;</a><a name="670"> zero</a><a name="675" class="Symbol">)</a><a name="676">
  </a><a name="679" class="Keyword">open</a><a name="683"> </a><a name="684" class="Keyword">import</a><a name="690"> </a><a name="691" href="https://agda.github.io/agda-stdlib/Data.List.html#1" class="Module" target="_blank">Data.List</a><a name="700">            </a><a name="712" class="Keyword">using</a><a name="717"> </a><a name="718" class="Symbol">(</a><a name="719">List</a><a name="723" class="Symbol">;</a><a name="724"> _∷_</a><a name="728" class="Symbol">;</a><a name="729"> []</a><a name="732" class="Symbol">;</a><a name="733"> _++_</a><a name="738" class="Symbol">)</a><a name="739">
  </a><a name="742" class="Keyword">open</a><a name="746"> </a><a name="747" class="Keyword">import</a><a name="753"> </a><a name="754" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1" class="Module" target="_blank">Data.List.Any</a><a name="767">        </a><a name="775" class="Keyword">using</a><a name="780"> </a><a name="781" class="Symbol">(</a><a name="782" class="Keyword">module</a><a name="788"> Membership</a><a name="799" class="Symbol">;</a><a name="800"> here</a><a name="805" class="Symbol">;</a><a name="806"> there</a><a name="812" class="Symbol">)</a><a name="813">
  </a><a name="816" class="Keyword">open</a><a name="820"> </a><a name="821" class="Keyword">import</a><a name="827"> </a><a name="828" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#1" class="Module" target="_blank">Function.Equivalence</a><a name="848"> </a><a name="849" class="Keyword">using</a><a name="854"> </a><a name="855" class="Symbol">(</a><a name="856">_⇔_</a><a name="859" class="Symbol">;</a><a name="860"> id</a><a name="863" class="Symbol">;</a><a name="864"> map</a><a name="868" class="Symbol">;</a><a name="869"> equivalence</a><a name="881" class="Symbol">)</a><a name="882">
  </a><a name="885" class="Keyword">open</a><a name="889"> </a><a name="890" class="Keyword">import</a><a name="896"> </a><a name="897" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1" class="Module" target="_blank">Relation.Binary.PropositionalEquality</a><a name="934">
  </a><a name="937" class="Keyword">open</a><a name="941"> </a><a name="942" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2298" class="Module" target="_blank">Membership</a><a name="952"> </a><a name="953" class="Symbol">(</a><a name="954" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1526" class="Function" target="_blank">setoid</a><a name="960"> </a><a name="961" href="#469" class="Datatype">Type</a><a name="965" class="Symbol">)</a><a name="966">    </a><a name="970" class="Keyword">using</a><a name="975"> </a><a name="976" class="Symbol">(</a><a name="977">_∈_</a><a name="980" class="Symbol">;</a><a name="981"> _⊆_</a><a name="985" class="Symbol">)</a></pre>


<pre class="Agda">  <a name="1015" class="Keyword">infix</a><a name="1020"> </a><a name="1021" class="Number">4</a><a name="1022"> _⊢_

  </a><a name="1030" class="Keyword">data</a><a name="1034"> </a><a name="1035" href="#315" class="Module">Sequent</a><a name="1042"> </a><a name="1043" class="Symbol">:</a><a name="1044"> </a><a name="1045" class="PrimitiveType">Set</a><a name="1048"> </a><a name="1049" class="Keyword">where</a><a name="1054">
    </a><a name="1059" href="#1059" class="InductiveConstructor Operator">_⊢_</a><a name="1062"> </a><a name="1063" class="Symbol">:</a><a name="1064"> </a><a name="1065" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="1069"> </a><a name="1070" href="#469" class="Datatype">Type</a><a name="1074"> </a><a name="1075" class="Symbol">→</a><a name="1076"> </a><a name="1077" href="#469" class="Datatype">Type</a><a name="1081"> </a><a name="1082" class="Symbol">→</a><a name="1083"> </a><a name="1084" href="#1035" class="Datatype">Sequent</a></pre>

<pre class="Agda">  <a name="1119" class="Keyword">infix</a><a name="1124"> </a><a name="1125" class="Number">3</a><a name="1126"> ND_

  </a><a name="1134" class="Keyword">data</a><a name="1138"> </a><a name="1139" href="#315" class="Module">ND_</a><a name="1142"> </a><a name="1143" class="Symbol">:</a><a name="1144"> </a><a name="1145" href="#1035" class="Datatype">Sequent</a><a name="1152"> </a><a name="1153" class="Symbol">→</a><a name="1154"> </a><a name="1155" class="PrimitiveType">Set</a><a name="1158"> </a><a name="1159" class="Keyword">where</a><a name="1164">
    </a><a name="1169" href="#1169" class="InductiveConstructor">ax</a><a name="1171"> </a><a name="1172" class="Symbol">:</a><a name="1173"> </a><a name="1174" class="Symbol">∀</a><a name="1175"> </a><a name="1176" class="Symbol">{</a><a name="1177" href="#1177" class="Bound">A</a><a name="1178">   </a><a name="1181" href="#1181" class="Bound">Γ</a><a name="1182" class="Symbol">}</a><a name="1183"> </a><a name="1184" class="Symbol">→</a><a name="1185"> </a><a name="1186" href="#1177" class="Bound">A</a><a name="1187"> </a><a name="1188" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1189"> </a><a name="1190" href="#1181" class="Bound">Γ</a><a name="1191"> </a><a name="1192" class="Symbol">→</a><a name="1193"> </a><a name="1194" href="#1139" class="Datatype Operator">ND</a><a name="1196"> </a><a name="1197" href="#1181" class="Bound">Γ</a><a name="1198"> </a><a name="1199" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1200"> </a><a name="1201" href="#1177" class="Bound">A</a><a name="1202">
    </a><a name="1207" href="#1207" class="InductiveConstructor">⇒i</a><a name="1209"> </a><a name="1210" class="Symbol">:</a><a name="1211"> </a><a name="1212" class="Symbol">∀</a><a name="1213"> </a><a name="1214" class="Symbol">{</a><a name="1215" href="#1215" class="Bound">A</a><a name="1216"> </a><a name="1217" href="#1217" class="Bound">B</a><a name="1218"> </a><a name="1219" href="#1219" class="Bound">Γ</a><a name="1220" class="Symbol">}</a><a name="1221"> </a><a name="1222" class="Symbol">→</a><a name="1223"> </a><a name="1224" href="#1139" class="Datatype Operator">ND</a><a name="1226"> </a><a name="1227" href="#1215" class="Bound">A</a><a name="1228"> </a><a name="1229" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1230"> </a><a name="1231" href="#1219" class="Bound">Γ</a><a name="1232"> </a><a name="1233" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1234"> </a><a name="1235" href="#1217" class="Bound">B</a><a name="1236"> </a><a name="1237" class="Symbol">→</a><a name="1238"> </a><a name="1239" href="#1139" class="Datatype Operator">ND</a><a name="1241"> </a><a name="1242" href="#1219" class="Bound">Γ</a><a name="1243"> </a><a name="1244" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1245"> </a><a name="1246" href="#1215" class="Bound">A</a><a name="1247"> </a><a name="1248" href="#512" class="InductiveConstructor Operator">⇒</a><a name="1249"> </a><a name="1250" href="#1217" class="Bound">B</a><a name="1251">
    </a><a name="1256" href="#1256" class="InductiveConstructor">⇒e</a><a name="1258"> </a><a name="1259" class="Symbol">:</a><a name="1260"> </a><a name="1261" class="Symbol">∀</a><a name="1262"> </a><a name="1263" class="Symbol">{</a><a name="1264" href="#1264" class="Bound">A</a><a name="1265"> </a><a name="1266" href="#1266" class="Bound">B</a><a name="1267"> </a><a name="1268" href="#1268" class="Bound">Γ</a><a name="1269" class="Symbol">}</a><a name="1270"> </a><a name="1271" class="Symbol">→</a><a name="1272"> </a><a name="1273" href="#1139" class="Datatype Operator">ND</a><a name="1275"> </a><a name="1276" href="#1268" class="Bound">Γ</a><a name="1277"> </a><a name="1278" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1279"> </a><a name="1280" href="#1264" class="Bound">A</a><a name="1281"> </a><a name="1282" href="#512" class="InductiveConstructor Operator">⇒</a><a name="1283"> </a><a name="1284" href="#1266" class="Bound">B</a><a name="1285"> </a><a name="1286" class="Symbol">→</a><a name="1287"> </a><a name="1288" href="#1139" class="Datatype Operator">ND</a><a name="1290"> </a><a name="1291" href="#1268" class="Bound">Γ</a><a name="1292"> </a><a name="1293" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1294"> </a><a name="1295" href="#1264" class="Bound">A</a><a name="1296"> </a><a name="1297" class="Symbol">→</a><a name="1298"> </a><a name="1299" href="#1139" class="Datatype Operator">ND</a><a name="1301"> </a><a name="1302" href="#1268" class="Bound">Γ</a><a name="1303"> </a><a name="1304" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1305"> </a><a name="1306" href="#1266" class="Bound">B</a></pre>

\\[
    \\frac{A \\in \\Gamma}{\\Gamma \\vdash A}{\\small ax}
    \\quad
    \\frac{A , \\Gamma \\vdash B}{\\Gamma \\vdash A \\Rightarrow B}{\\small{\\Rightarrow}\\!i}
    \\quad
    \\frac{\\Gamma \\vdash A \Rightarrow B \\quad \\Gamma \\vdash A}{\\Gamma \\vdash B}{\\small{\\Rightarrow}\\!e}
\\]

<pre class="Agda">  <a name="1634" class="Keyword">infix</a><a name="1639"> </a><a name="1640" class="Number">3</a><a name="1641"> SC_

  </a><a name="1649" class="Keyword">data</a><a name="1653"> </a><a name="1654" href="#315" class="Module">SC_</a><a name="1657"> </a><a name="1658" class="Symbol">:</a><a name="1659"> </a><a name="1660" href="#1035" class="Datatype">Sequent</a><a name="1667"> </a><a name="1668" class="Symbol">→</a><a name="1669"> </a><a name="1670" class="PrimitiveType">Set</a><a name="1673"> </a><a name="1674" class="Keyword">where</a><a name="1679">
    </a><a name="1684" href="#1684" class="InductiveConstructor">ax</a><a name="1686">  </a><a name="1688" class="Symbol">:</a><a name="1689"> </a><a name="1690" class="Symbol">∀</a><a name="1691"> </a><a name="1692" class="Symbol">{</a><a name="1693" href="#1693" class="Bound">A</a><a name="1694">     </a><a name="1699" href="#1699" class="Bound">Γ</a><a name="1700" class="Symbol">}</a><a name="1701"> </a><a name="1702" class="Symbol">→</a><a name="1703"> </a><a name="1704" href="#1693" class="Bound">A</a><a name="1705"> </a><a name="1706" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1707"> </a><a name="1708" href="#1699" class="Bound">Γ</a><a name="1709"> </a><a name="1710" class="Symbol">→</a><a name="1711"> </a><a name="1712" href="#1654" class="Datatype Operator">SC</a><a name="1714"> </a><a name="1715" href="#1699" class="Bound">Γ</a><a name="1716"> </a><a name="1717" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1718"> </a><a name="1719" href="#1693" class="Bound">A</a><a name="1720">
    </a><a name="1725" href="#1725" class="InductiveConstructor">cut</a><a name="1728"> </a><a name="1729" class="Symbol">:</a><a name="1730"> </a><a name="1731" class="Symbol">∀</a><a name="1732"> </a><a name="1733" class="Symbol">{</a><a name="1734" href="#1734" class="Bound">A</a><a name="1735"> </a><a name="1736" href="#1736" class="Bound">B</a><a name="1737">   </a><a name="1740" href="#1740" class="Bound">Γ</a><a name="1741" class="Symbol">}</a><a name="1742"> </a><a name="1743" class="Symbol">→</a><a name="1744"> </a><a name="1745" href="#1654" class="Datatype Operator">SC</a><a name="1747"> </a><a name="1748" href="#1740" class="Bound">Γ</a><a name="1749"> </a><a name="1750" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1751"> </a><a name="1752" href="#1734" class="Bound">A</a><a name="1753"> </a><a name="1754" class="Symbol">→</a><a name="1755"> </a><a name="1756" href="#1654" class="Datatype Operator">SC</a><a name="1758"> </a><a name="1759" href="#1734" class="Bound">A</a><a name="1760"> </a><a name="1761" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1762"> </a><a name="1763" href="#1740" class="Bound">Γ</a><a name="1764"> </a><a name="1765" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1766"> </a><a name="1767" href="#1736" class="Bound">B</a><a name="1768"> </a><a name="1769" class="Symbol">→</a><a name="1770"> </a><a name="1771" href="#1654" class="Datatype Operator">SC</a><a name="1773"> </a><a name="1774" href="#1740" class="Bound">Γ</a><a name="1775"> </a><a name="1776" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1777"> </a><a name="1778" href="#1736" class="Bound">B</a><a name="1779">
    </a><a name="1784" href="#1784" class="InductiveConstructor">⇒l</a><a name="1786">  </a><a name="1788" class="Symbol">:</a><a name="1789"> </a><a name="1790" class="Symbol">∀</a><a name="1791"> </a><a name="1792" class="Symbol">{</a><a name="1793" href="#1793" class="Bound">A</a><a name="1794"> </a><a name="1795" href="#1795" class="Bound">B</a><a name="1796"> </a><a name="1797" href="#1797" class="Bound">C</a><a name="1798"> </a><a name="1799" href="#1799" class="Bound">Γ</a><a name="1800" class="Symbol">}</a><a name="1801"> </a><a name="1802" class="Symbol">→</a><a name="1803"> </a><a name="1804" href="#1654" class="Datatype Operator">SC</a><a name="1806"> </a><a name="1807" href="#1799" class="Bound">Γ</a><a name="1808"> </a><a name="1809" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1810"> </a><a name="1811" href="#1793" class="Bound">A</a><a name="1812"> </a><a name="1813" class="Symbol">→</a><a name="1814"> </a><a name="1815" href="#1654" class="Datatype Operator">SC</a><a name="1817"> </a><a name="1818" href="#1795" class="Bound">B</a><a name="1819"> </a><a name="1820" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1821"> </a><a name="1822" href="#1799" class="Bound">Γ</a><a name="1823"> </a><a name="1824" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1825"> </a><a name="1826" href="#1797" class="Bound">C</a><a name="1827"> </a><a name="1828" class="Symbol">→</a><a name="1829"> </a><a name="1830" href="#1654" class="Datatype Operator">SC</a><a name="1832"> </a><a name="1833" href="#1793" class="Bound">A</a><a name="1834"> </a><a name="1835" href="#512" class="InductiveConstructor Operator">⇒</a><a name="1836"> </a><a name="1837" href="#1795" class="Bound">B</a><a name="1838"> </a><a name="1839" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1840"> </a><a name="1841" href="#1799" class="Bound">Γ</a><a name="1842"> </a><a name="1843" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1844"> </a><a name="1845" href="#1797" class="Bound">C</a><a name="1846">
    </a><a name="1851" href="#1851" class="InductiveConstructor">⇒r</a><a name="1853">  </a><a name="1855" class="Symbol">:</a><a name="1856"> </a><a name="1857" class="Symbol">∀</a><a name="1858"> </a><a name="1859" class="Symbol">{</a><a name="1860" href="#1860" class="Bound">A</a><a name="1861"> </a><a name="1862" href="#1862" class="Bound">B</a><a name="1863">   </a><a name="1866" href="#1866" class="Bound">Γ</a><a name="1867" class="Symbol">}</a><a name="1868"> </a><a name="1869" class="Symbol">→</a><a name="1870"> </a><a name="1871" href="#1654" class="Datatype Operator">SC</a><a name="1873"> </a><a name="1874" href="#1860" class="Bound">A</a><a name="1875"> </a><a name="1876" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1877"> </a><a name="1878" href="#1866" class="Bound">Γ</a><a name="1879"> </a><a name="1880" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1881"> </a><a name="1882" href="#1862" class="Bound">B</a><a name="1883"> </a><a name="1884" class="Symbol">→</a><a name="1885"> </a><a name="1886" href="#1654" class="Datatype Operator">SC</a><a name="1888"> </a><a name="1889" href="#1866" class="Bound">Γ</a><a name="1890"> </a><a name="1891" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="1892"> </a><a name="1893" href="#1860" class="Bound">A</a><a name="1894"> </a><a name="1895" href="#512" class="InductiveConstructor Operator">⇒</a><a name="1896"> </a><a name="1897" href="#1862" class="Bound">B</a></pre>

\\[
    \\frac{A \\in \\Gamma}{\\Gamma \\vdash A}{\\small ax}
    \\quad
    \\frac{\\Gamma \\vdash A \\quad A , \\Gamma \\vdash B}{\\Gamma \\vdash B}{\\small cut}
    \\quad
    \\frac{\\Gamma \\vdash A \\quad B , \\Gamma \\vdash C}{A \\Rightarrow  B , \\Gamma \\vdash C}{\\small{\\Rightarrow}\\!l}
    \\quad
    \\frac{A , \\Gamma \\vdash B}{\\Gamma \\vdash A \\Rightarrow B}{\\small{\\Rightarrow}\\!r}
\\]

<pre class="Agda">  <a name="2337" class="Keyword">pattern</a><a name="2344"> </a><a name="2345" href="#2345" class="InductiveConstructor">ax₀</a><a name="2348"> </a><a name="2349" class="Symbol">=</a><a name="2350"> </a><a name="2351" class="InductiveConstructor">ax</a><a name="2353"> </a><a name="2354" class="Symbol">(</a><a name="2355" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2359"> </a><a name="2360" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="2364" class="Symbol">)</a><a name="2365">
  </a><a name="2368" class="Keyword">pattern</a><a name="2375"> </a><a name="2376" href="#2376" class="InductiveConstructor">ax₁</a><a name="2379"> </a><a name="2380" class="Symbol">=</a><a name="2381"> </a><a name="2382" class="InductiveConstructor">ax</a><a name="2384"> </a><a name="2385" class="Symbol">(</a><a name="2386" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2391"> </a><a name="2392" class="Symbol">(</a><a name="2393" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2397"> </a><a name="2398" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="2402" class="Symbol">))</a><a name="2404">
  </a><a name="2407" class="Keyword">pattern</a><a name="2414"> </a><a name="2415" href="#2415" class="InductiveConstructor">ax₂</a><a name="2418"> </a><a name="2419" class="Symbol">=</a><a name="2420"> </a><a name="2421" class="InductiveConstructor">ax</a><a name="2423"> </a><a name="2424" class="Symbol">(</a><a name="2425" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2430"> </a><a name="2431" class="Symbol">(</a><a name="2432" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2437"> </a><a name="2438" class="Symbol">(</a><a name="2439" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2443"> </a><a name="2444" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="2448" class="Symbol">)))</a></pre>

<pre class="Agda">  <a name="2504" href="#2504" class="Function">struct</a><a name="2510"> </a><a name="2511" class="Symbol">:</a><a name="2512"> </a><a name="2513" class="Symbol">∀</a><a name="2514"> </a><a name="2515" class="Symbol">{</a><a name="2516" href="#2516" class="Bound">A</a><a name="2517"> </a><a name="2518" href="#2518" class="Bound">Γ</a><a name="2519"> </a><a name="2520" href="#2520" class="Bound">Γ′</a><a name="2522" class="Symbol">}</a><a name="2523"> </a><a name="2524" class="Symbol">→</a><a name="2525"> </a><a name="2526" href="#2518" class="Bound">Γ</a><a name="2527"> </a><a name="2528" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#3056" class="Function Operator" target="_blank">⊆</a><a name="2529"> </a><a name="2530" href="#2520" class="Bound">Γ′</a><a name="2532"> </a><a name="2533" class="Symbol">→</a><a name="2534"> </a><a name="2535" href="#1139" class="Datatype Operator">ND</a><a name="2537"> </a><a name="2538" href="#2518" class="Bound">Γ</a><a name="2539"> </a><a name="2540" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="2541"> </a><a name="2542" href="#2516" class="Bound">A</a><a name="2543"> </a><a name="2544" class="Symbol">→</a><a name="2545"> </a><a name="2546" href="#1139" class="Datatype Operator">ND</a><a name="2548"> </a><a name="2549" href="#2520" class="Bound">Γ′</a><a name="2551"> </a><a name="2552" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="2553"> </a><a name="2554" href="#2516" class="Bound">A</a><a name="2555">
  </a><a name="2558" href="#2504" class="Function">struct</a><a name="2564"> </a><a name="2565" href="#2565" class="Bound">Γ⊆Γ′</a><a name="2569"> </a><a name="2570" class="Symbol">(</a><a name="2571" href="#1169" class="InductiveConstructor">ax</a><a name="2573"> </a><a name="2574" href="#2574" class="Bound">x</a><a name="2575" class="Symbol">)</a><a name="2576">   </a><a name="2579" class="Symbol">=</a><a name="2580"> </a><a name="2581" href="#1169" class="InductiveConstructor">ax</a><a name="2583"> </a><a name="2584" class="Symbol">(</a><a name="2585" href="#2565" class="Bound">Γ⊆Γ′</a><a name="2589"> </a><a name="2590" href="#2574" class="Bound">x</a><a name="2591" class="Symbol">)</a><a name="2592">
  </a><a name="2595" href="#2504" class="Function">struct</a><a name="2601"> </a><a name="2602" href="#2602" class="Bound">Γ⊆Γ′</a><a name="2606"> </a><a name="2607" class="Symbol">(</a><a name="2608" href="#1207" class="InductiveConstructor">⇒i</a><a name="2610"> </a><a name="2611" href="#2611" class="Bound">f</a><a name="2612" class="Symbol">)</a><a name="2613">   </a><a name="2616" class="Symbol">=</a><a name="2617"> </a><a name="2618" href="#1207" class="InductiveConstructor">⇒i</a><a name="2620"> </a><a name="2621" class="Symbol">(</a><a name="2622" href="#2504" class="Function">struct</a><a name="2628"> </a><a name="2629" class="Symbol">(</a><a name="2630" href="#2665" class="Function">∷-resp-⊆</a><a name="2638"> </a><a name="2639" href="#2602" class="Bound">Γ⊆Γ′</a><a name="2643" class="Symbol">)</a><a name="2644"> </a><a name="2645" href="#2611" class="Bound">f</a><a name="2646" class="Symbol">)</a><a name="2647">
    </a><a name="2652" class="Keyword">where</a><a name="2657">

      </a><a name="2665" href="#2665" class="Function">∷-resp-⊆</a><a name="2673"> </a><a name="2674" class="Symbol">:</a><a name="2675"> </a><a name="2676" class="Symbol">∀</a><a name="2677"> </a><a name="2678" class="Symbol">{</a><a name="2679" href="#2679" class="Bound">A</a><a name="2680"> </a><a name="2681" href="#2681" class="Bound">Γ</a><a name="2682"> </a><a name="2683" href="#2683" class="Bound">Γ′</a><a name="2685" class="Symbol">}</a><a name="2686"> </a><a name="2687" class="Symbol">→</a><a name="2688"> </a><a name="2689" href="#2681" class="Bound">Γ</a><a name="2690"> </a><a name="2691" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#3056" class="Function Operator" target="_blank">⊆</a><a name="2692"> </a><a name="2693" href="#2683" class="Bound">Γ′</a><a name="2695"> </a><a name="2696" class="Symbol">→</a><a name="2697"> </a><a name="2698" href="#2679" class="Bound">A</a><a name="2699"> </a><a name="2700" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2701"> </a><a name="2702" href="#2681" class="Bound">Γ</a><a name="2703"> </a><a name="2704" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#3056" class="Function Operator" target="_blank">⊆</a><a name="2705"> </a><a name="2706" href="#2679" class="Bound">A</a><a name="2707"> </a><a name="2708" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2709"> </a><a name="2710" href="#2683" class="Bound">Γ′</a><a name="2712">
      </a><a name="2719" href="#2665" class="Function">∷-resp-⊆</a><a name="2727"> </a><a name="2728" href="#2728" class="Bound">Γ⊆Γ′</a><a name="2732"> </a><a name="2733" class="Symbol">(</a><a name="2734" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2738">  </a><a name="2740" href="#2740" class="Bound">x</a><a name="2741" class="Symbol">)</a><a name="2742"> </a><a name="2743" class="Symbol">=</a><a name="2744"> </a><a name="2745" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2749"> </a><a name="2750" href="#2740" class="Bound">x</a><a name="2751">
      </a><a name="2758" href="#2665" class="Function">∷-resp-⊆</a><a name="2766"> </a><a name="2767" href="#2767" class="Bound">Γ⊆Γ′</a><a name="2771"> </a><a name="2772" class="Symbol">(</a><a name="2773" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2778"> </a><a name="2779" href="#2779" class="Bound">x</a><a name="2780" class="Symbol">)</a><a name="2781"> </a><a name="2782" class="Symbol">=</a><a name="2783"> </a><a name="2784" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2789"> </a><a name="2790" class="Symbol">(</a><a name="2791" href="#2767" class="Bound">Γ⊆Γ′</a><a name="2795"> </a><a name="2796" href="#2779" class="Bound">x</a><a name="2797" class="Symbol">)</a><a name="2798">

  </a><a name="2802" href="#2504" class="Function">struct</a><a name="2808"> </a><a name="2809" href="#2809" class="Bound">Γ⊆Γ′</a><a name="2813"> </a><a name="2814" class="Symbol">(</a><a name="2815" href="#1256" class="InductiveConstructor">⇒e</a><a name="2817"> </a><a name="2818" href="#2818" class="Bound">f</a><a name="2819"> </a><a name="2820" href="#2820" class="Bound">g</a><a name="2821" class="Symbol">)</a><a name="2822"> </a><a name="2823" class="Symbol">=</a><a name="2824"> </a><a name="2825" href="#1256" class="InductiveConstructor">⇒e</a><a name="2827"> </a><a name="2828" class="Symbol">(</a><a name="2829" href="#2504" class="Function">struct</a><a name="2835"> </a><a name="2836" href="#2809" class="Bound">Γ⊆Γ′</a><a name="2840"> </a><a name="2841" href="#2818" class="Bound">f</a><a name="2842" class="Symbol">)</a><a name="2843"> </a><a name="2844" class="Symbol">(</a><a name="2845" href="#2504" class="Function">struct</a><a name="2851"> </a><a name="2852" href="#2809" class="Bound">Γ⊆Γ′</a><a name="2856"> </a><a name="2857" href="#2820" class="Bound">g</a><a name="2858" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="2887" href="#2887" class="Function">weak</a><a name="2891"> </a><a name="2892" class="Symbol">:</a><a name="2893"> </a><a name="2894" class="Symbol">∀</a><a name="2895"> </a><a name="2896" class="Symbol">{</a><a name="2897" href="#2897" class="Bound">A</a><a name="2898"> </a><a name="2899" href="#2899" class="Bound">B</a><a name="2900"> </a><a name="2901" href="#2901" class="Bound">Γ</a><a name="2902" class="Symbol">}</a><a name="2903"> </a><a name="2904" class="Symbol">→</a><a name="2905"> </a><a name="2906" href="#1139" class="Datatype Operator">ND</a><a name="2908"> </a><a name="2909" href="#2901" class="Bound">Γ</a><a name="2910"> </a><a name="2911" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="2912"> </a><a name="2913" href="#2899" class="Bound">B</a><a name="2914"> </a><a name="2915" class="Symbol">→</a><a name="2916"> </a><a name="2917" href="#1139" class="Datatype Operator">ND</a><a name="2919"> </a><a name="2920" href="#2897" class="Bound">A</a><a name="2921"> </a><a name="2922" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2923"> </a><a name="2924" href="#2901" class="Bound">Γ</a><a name="2925"> </a><a name="2926" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="2927"> </a><a name="2928" href="#2899" class="Bound">B</a><a name="2929">
  </a><a name="2932" href="#2887" class="Function">weak</a><a name="2936"> </a><a name="2937" class="Symbol">=</a><a name="2938"> </a><a name="2939" href="#2504" class="Function">struct</a><a name="2945"> </a><a name="2946" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a></pre>

<pre class="Agda">  <a name="2979" class="Keyword">module</a><a name="2985"> </a><a name="2986" href="#2986" class="Module">ND⇔SC</a><a name="2991"> </a><a name="2992" class="Keyword">where</a><a name="2997">

    </a><a name="3003" href="#3003" class="Function">⟹</a><a name="3004"> </a><a name="3005" class="Symbol">:</a><a name="3006"> </a><a name="3007" class="Symbol">∀</a><a name="3008"> </a><a name="3009" class="Symbol">{</a><a name="3010" href="#3010" class="Bound">S</a><a name="3011" class="Symbol">}</a><a name="3012"> </a><a name="3013" class="Symbol">→</a><a name="3014"> </a><a name="3015" href="#1139" class="Datatype Operator">ND</a><a name="3017"> </a><a name="3018" href="#3010" class="Bound">S</a><a name="3019"> </a><a name="3020" class="Symbol">→</a><a name="3021"> </a><a name="3022" href="#1654" class="Datatype Operator">SC</a><a name="3024"> </a><a name="3025" href="#3010" class="Bound">S</a><a name="3026">
    </a><a name="3031" href="#3003" class="Function">⟹</a><a name="3032"> </a><a name="3033" class="Symbol">(</a><a name="3034" href="#1169" class="InductiveConstructor">ax</a><a name="3036">  </a><a name="3038" href="#3038" class="Bound">x</a><a name="3039" class="Symbol">)</a><a name="3040">   </a><a name="3043" class="Symbol">=</a><a name="3044"> </a><a name="3045" href="#1684" class="InductiveConstructor">ax</a><a name="3047"> </a><a name="3048" href="#3038" class="Bound">x</a><a name="3049">
    </a><a name="3054" href="#3003" class="Function">⟹</a><a name="3055"> </a><a name="3056" class="Symbol">(</a><a name="3057" href="#1207" class="InductiveConstructor">⇒i</a><a name="3059">  </a><a name="3061" href="#3061" class="Bound">f</a><a name="3062" class="Symbol">)</a><a name="3063">   </a><a name="3066" class="Symbol">=</a><a name="3067"> </a><a name="3068" href="#1851" class="InductiveConstructor">⇒r</a><a name="3070">  </a><a name="3072" class="Symbol">(</a><a name="3073" href="#3003" class="Function">⟹</a><a name="3074"> </a><a name="3075" href="#3061" class="Bound">f</a><a name="3076" class="Symbol">)</a><a name="3077">
    </a><a name="3082" href="#3003" class="Function">⟹</a><a name="3083"> </a><a name="3084" class="Symbol">(</a><a name="3085" href="#1256" class="InductiveConstructor">⇒e</a><a name="3087">  </a><a name="3089" href="#3089" class="Bound">f</a><a name="3090"> </a><a name="3091" href="#3091" class="Bound">g</a><a name="3092" class="Symbol">)</a><a name="3093"> </a><a name="3094" class="Symbol">=</a><a name="3095"> </a><a name="3096" href="#1725" class="InductiveConstructor">cut</a><a name="3099"> </a><a name="3100" class="Symbol">(</a><a name="3101" href="#3003" class="Function">⟹</a><a name="3102"> </a><a name="3103" href="#3089" class="Bound">f</a><a name="3104" class="Symbol">)</a><a name="3105"> </a><a name="3106" class="Symbol">(</a><a name="3107" href="#1784" class="InductiveConstructor">⇒l</a><a name="3109"> </a><a name="3110" class="Symbol">(</a><a name="3111" href="#3003" class="Function">⟹</a><a name="3112"> </a><a name="3113" href="#3091" class="Bound">g</a><a name="3114" class="Symbol">)</a><a name="3115"> </a><a name="3116" href="#2345" class="InductiveConstructor">ax₀</a><a name="3119" class="Symbol">)</a><a name="3120">

    </a><a name="3126" href="#3126" class="Function">⟸</a><a name="3127"> </a><a name="3128" class="Symbol">:</a><a name="3129"> </a><a name="3130" class="Symbol">∀</a><a name="3131"> </a><a name="3132" class="Symbol">{</a><a name="3133" href="#3133" class="Bound">S</a><a name="3134" class="Symbol">}</a><a name="3135"> </a><a name="3136" class="Symbol">→</a><a name="3137"> </a><a name="3138" href="#1654" class="Datatype Operator">SC</a><a name="3140"> </a><a name="3141" href="#3133" class="Bound">S</a><a name="3142"> </a><a name="3143" class="Symbol">→</a><a name="3144"> </a><a name="3145" href="#1139" class="Datatype Operator">ND</a><a name="3147"> </a><a name="3148" href="#3133" class="Bound">S</a><a name="3149">
    </a><a name="3154" href="#3126" class="Function">⟸</a><a name="3155"> </a><a name="3156" class="Symbol">(</a><a name="3157" href="#1684" class="InductiveConstructor">ax</a><a name="3159">  </a><a name="3161" href="#3161" class="Bound">p</a><a name="3162" class="Symbol">)</a><a name="3163">   </a><a name="3166" class="Symbol">=</a><a name="3167"> </a><a name="3168" href="#1169" class="InductiveConstructor">ax</a><a name="3170"> </a><a name="3171" href="#3161" class="Bound">p</a><a name="3172">
    </a><a name="3177" href="#3126" class="Function">⟸</a><a name="3178"> </a><a name="3179" class="Symbol">(</a><a name="3180" href="#1725" class="InductiveConstructor">cut</a><a name="3183"> </a><a name="3184" href="#3184" class="Bound">f</a><a name="3185"> </a><a name="3186" href="#3186" class="Bound">g</a><a name="3187" class="Symbol">)</a><a name="3188"> </a><a name="3189" class="Symbol">=</a><a name="3190"> </a><a name="3191" href="#1256" class="InductiveConstructor">⇒e</a><a name="3193"> </a><a name="3194" class="Symbol">(</a><a name="3195" href="#1207" class="InductiveConstructor">⇒i</a><a name="3197"> </a><a name="3198" class="Symbol">(</a><a name="3199" href="#3126" class="Function">⟸</a><a name="3200"> </a><a name="3201" href="#3186" class="Bound">g</a><a name="3202" class="Symbol">))</a><a name="3204"> </a><a name="3205" class="Symbol">(</a><a name="3206" href="#3126" class="Function">⟸</a><a name="3207"> </a><a name="3208" href="#3184" class="Bound">f</a><a name="3209" class="Symbol">)</a><a name="3210">
    </a><a name="3215" href="#3126" class="Function">⟸</a><a name="3216"> </a><a name="3217" class="Symbol">(</a><a name="3218" href="#1784" class="InductiveConstructor">⇒l</a><a name="3220">  </a><a name="3222" href="#3222" class="Bound">f</a><a name="3223"> </a><a name="3224" href="#3224" class="Bound">g</a><a name="3225" class="Symbol">)</a><a name="3226"> </a><a name="3227" class="Symbol">=</a><a name="3228"> </a><a name="3229" href="#1256" class="InductiveConstructor">⇒e</a><a name="3231"> </a><a name="3232" class="Symbol">(</a><a name="3233" href="#2887" class="Function">weak</a><a name="3237"> </a><a name="3238" class="Symbol">(</a><a name="3239" href="#1207" class="InductiveConstructor">⇒i</a><a name="3241"> </a><a name="3242" class="Symbol">(</a><a name="3243" href="#3126" class="Function">⟸</a><a name="3244"> </a><a name="3245" href="#3224" class="Bound">g</a><a name="3246" class="Symbol">)))</a><a name="3249"> </a><a name="3250" class="Symbol">(</a><a name="3251" href="#1256" class="InductiveConstructor">⇒e</a><a name="3253"> </a><a name="3254" href="#2345" class="InductiveConstructor">ax₀</a><a name="3257"> </a><a name="3258" class="Symbol">(</a><a name="3259" href="#2887" class="Function">weak</a><a name="3263"> </a><a name="3264" class="Symbol">(</a><a name="3265" href="#3126" class="Function">⟸</a><a name="3266"> </a><a name="3267" href="#3222" class="Bound">f</a><a name="3268" class="Symbol">)))</a><a name="3271">
    </a><a name="3276" href="#3126" class="Function">⟸</a><a name="3277"> </a><a name="3278" class="Symbol">(</a><a name="3279" href="#1851" class="InductiveConstructor">⇒r</a><a name="3281">  </a><a name="3283" href="#3283" class="Bound">f</a><a name="3284" class="Symbol">)</a><a name="3285">   </a><a name="3288" class="Symbol">=</a><a name="3289"> </a><a name="3290" href="#1207" class="InductiveConstructor">⇒i</a><a name="3292"> </a><a name="3293" class="Symbol">(</a><a name="3294" href="#3126" class="Function">⟸</a><a name="3295"> </a><a name="3296" href="#3283" class="Bound">f</a><a name="3297" class="Symbol">)</a></pre>

<pre class="Agda"><a name="3324" class="Keyword">open</a><a name="3328"> </a><a name="3329" class="Keyword">import</a><a name="3335"> </a><a name="3336" href="https://agda.github.io/agda-stdlib/Level.html#1" class="Module" target="_blank">Level</a><a name="3341"> </a><a name="3342" class="Keyword">using</a><a name="3347"> </a><a name="3348" class="Symbol">(</a><a name="3349">_⊔_</a><a name="3352" class="Symbol">)</a><a name="3353">

</a><a name="3355" class="Keyword">record</a><a name="3361"> </a><a name="3362" href="#3362" class="Record">Interpret</a><a name="3371"> </a><a name="3372" class="Symbol">{</a><a name="3373" href="#3373" class="Bound">a</a><a name="3374" class="Symbol">}</a><a name="3375"> </a><a name="3376" class="Symbol">{</a><a name="3377" href="#3377" class="Bound">b</a><a name="3378" class="Symbol">}</a><a name="3379"> </a><a name="3380" class="Symbol">(</a><a name="3381" href="#3381" class="Bound">A</a><a name="3382"> </a><a name="3383" class="Symbol">:</a><a name="3384"> </a><a name="3385" class="PrimitiveType">Set</a><a name="3388"> </a><a name="3389" href="#3373" class="Bound">a</a><a name="3390" class="Symbol">)</a><a name="3391"> </a><a name="3392" class="Symbol">(</a><a name="3393" href="#3393" class="Bound">B</a><a name="3394"> </a><a name="3395" class="Symbol">:</a><a name="3396"> </a><a name="3397" class="PrimitiveType">Set</a><a name="3400"> </a><a name="3401" href="#3377" class="Bound">b</a><a name="3402" class="Symbol">)</a><a name="3403"> </a><a name="3404" class="Symbol">:</a><a name="3405"> </a><a name="3406" class="PrimitiveType">Set</a><a name="3409"> </a><a name="3410" class="Symbol">(</a><a name="3411" href="#3373" class="Bound">a</a><a name="3412"> </a><a name="3413" href="https://agda.github.io/agda-stdlib/Agda.Primitive.html#626" class="Primitive Operator" target="_blank">⊔</a><a name="3414"> </a><a name="3415" href="#3377" class="Bound">b</a><a name="3416" class="Symbol">)</a><a name="3417"> </a><a name="3418" class="Keyword">where</a><a name="3423">
  </a><a name="3426" class="Keyword">field</a><a name="3431">
    </a><a name="3436" href="#3436" class="Field Operator">⟦_⟧</a><a name="3439"> </a><a name="3440" class="Symbol">:</a><a name="3441"> </a><a name="3442" href="#3381" class="Bound">A</a><a name="3443"> </a><a name="3444" class="Symbol">→</a><a name="3445"> </a><a name="3446" href="#3393" class="Bound">B</a><a name="3447">
</a><a name="3448" class="Keyword">open</a><a name="3452"> </a><a name="3453" href="#3362" class="Module">Interpret</a><a name="3462"> </a><a name="3463" class="Symbol">{{...}}</a></pre>

<pre class="Agda"><a name="3496" class="Keyword">module</a><a name="3502"> </a><a name="3503" href="#3503" class="Module">SetAntecedent-Interpret</a><a name="3526">
       </a><a name="3534" class="Symbol">(</a><a name="3535" href="#3535" class="Bound">Atom</a><a name="3539"> </a><a name="3540" class="Symbol">:</a><a name="3541"> </a><a name="3542" class="PrimitiveType">Set</a><a name="3545" class="Symbol">)</a><a name="3546"> </a><a name="3547" class="Symbol">(</a><a name="3548" href="#3548" class="Bound">intp</a><a name="3552"> </a><a name="3553" class="Symbol">:</a><a name="3554"> </a><a name="3555" href="#3362" class="Record">Interpret</a><a name="3564"> </a><a name="3565" href="#3535" class="Bound">Atom</a><a name="3569"> </a><a name="3570" class="PrimitiveType">Set</a><a name="3573" class="Symbol">)</a><a name="3574"> </a><a name="3575" class="Keyword">where</a></pre>

<pre class="Agda">  <a name="3608" class="Keyword">open</a><a name="3612"> </a><a name="3613" href="#404" class="Module">SetAntecedent</a><a name="3626"> </a><a name="3627" href="#3535" class="Bound">Atom</a><a name="3631">
  </a><a name="3634" class="Keyword">open</a><a name="3638"> </a><a name="3639" class="Keyword">import</a><a name="3645"> </a><a name="3646" href="https://agda.github.io/agda-stdlib/Data.List.html#1" class="Module" target="_blank">Data.List</a><a name="3655">            </a><a name="3667" class="Keyword">using</a><a name="3672"> </a><a name="3673" class="Symbol">(</a><a name="3674">List</a><a name="3678" class="Symbol">;</a><a name="3679"> _∷_</a><a name="3683" class="Symbol">;</a><a name="3684"> []</a><a name="3687" class="Symbol">;</a><a name="3688"> map</a><a name="3692" class="Symbol">)</a><a name="3693">
  </a><a name="3696" class="Keyword">open</a><a name="3700"> </a><a name="3701" class="Keyword">import</a><a name="3707"> </a><a name="3708" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1" class="Module" target="_blank">Data.List.Any</a><a name="3721">        </a><a name="3729" class="Keyword">using</a><a name="3734"> </a><a name="3735" class="Symbol">(</a><a name="3736" class="Keyword">module</a><a name="3742"> Membership</a><a name="3753" class="Symbol">;</a><a name="3754"> here</a><a name="3759" class="Symbol">;</a><a name="3760"> there</a><a name="3766" class="Symbol">)</a><a name="3767">
  </a><a name="3770" class="Keyword">open</a><a name="3774"> </a><a name="3775" class="Keyword">import</a><a name="3781"> </a><a name="3782" href="https://agda.github.io/agda-stdlib/Function.Equality.html#1" class="Module" target="_blank">Function.Equality</a><a name="3799">    </a><a name="3803" class="Keyword">using</a><a name="3808"> </a><a name="3809" class="Symbol">(</a><a name="3810">_⟨$⟩_</a><a name="3815" class="Symbol">)</a><a name="3816">
  </a><a name="3819" class="Keyword">open</a><a name="3823"> </a><a name="3824" class="Keyword">import</a><a name="3830"> </a><a name="3831" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#1" class="Module" target="_blank">Function.Equivalence</a><a name="3851"> </a><a name="3852" class="Keyword">using</a><a name="3857"> </a><a name="3858" class="Symbol">(</a><a name="3859" class="Keyword">module</a><a name="3865"> Equivalence</a><a name="3877" class="Symbol">)</a><a name="3878">
  </a><a name="3881" class="Keyword">open</a><a name="3885"> </a><a name="3886" class="Keyword">import</a><a name="3892"> </a><a name="3893" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1" class="Module" target="_blank">Relation.Binary.PropositionalEquality</a><a name="3930">
  </a><a name="3933" class="Keyword">open</a><a name="3937"> </a><a name="3938" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2298" class="Module" target="_blank">Membership</a><a name="3948"> </a><a name="3949" class="Symbol">(</a><a name="3950" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1526" class="Function" target="_blank">setoid</a><a name="3956"> </a><a name="3957" href="#469" class="Datatype">Type</a><a name="3961" class="Symbol">)</a><a name="3962">    </a><a name="3966" class="Keyword">using</a><a name="3971"> </a><a name="3972" class="Symbol">(</a><a name="3973">_∈_</a><a name="3976" class="Symbol">)</a><a name="3977">
  </a><a name="3980" class="Keyword">open</a><a name="3984"> </a><a name="3985" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#488" class="Module" target="_blank">Equivalence</a><a name="3996">                 </a><a name="4013" class="Keyword">using</a><a name="4018"> </a><a name="4019" class="Symbol">(</a><a name="4020">to</a><a name="4022" class="Symbol">;</a><a name="4023"> from</a><a name="4028" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="4057" class="Keyword">instance</a><a name="4065">
    </a><a name="4070" href="#4070" class="Function Operator">⟦_:Type⟧</a><a name="4078"> </a><a name="4079" class="Symbol">:</a><a name="4080"> </a><a name="4081" href="#3362" class="Record">Interpret</a><a name="4090"> </a><a name="4091" href="#469" class="Datatype">Type</a><a name="4095"> </a><a name="4096" class="PrimitiveType">Set</a><a name="4099">
    </a><a name="4104" href="#4070" class="Function Operator">⟦_:Type⟧</a><a name="4112"> </a><a name="4113" class="Symbol">=</a><a name="4114"> </a><a name="4115" class="Keyword">record</a><a name="4121"> </a><a name="4122" class="Symbol">{</a><a name="4123"> </a><a name="4124" class="Field Operator">⟦_⟧</a><a name="4127"> </a><a name="4128" class="Symbol">=</a><a name="4129"> </a><a name="4130" href="#4157" class="Function Operator">⟦_⟧′</a><a name="4134"> </a><a name="4135" class="Symbol">}</a><a name="4136">
      </a><a name="4143" class="Keyword">where</a><a name="4148">
        </a><a name="4157" href="#4157" class="Function Operator">⟦_⟧′</a><a name="4161">  </a><a name="4163" class="Symbol">:</a><a name="4164"> </a><a name="4165" href="#469" class="Datatype">Type</a><a name="4169"> </a><a name="4170" class="Symbol">→</a><a name="4171"> </a><a name="4172" class="PrimitiveType">Set</a><a name="4175">
        </a><a name="4184" href="#4157" class="Function Operator">⟦</a><a name="4185"> </a><a name="4186" href="#490" class="InductiveConstructor">El</a><a name="4188">  </a><a name="4190" href="#4190" class="Bound">A</a><a name="4191"> </a><a name="4192" href="#4157" class="Function Operator">⟧′</a><a name="4194"> </a><a name="4195" class="Symbol">=</a><a name="4196"> </a><a name="4197" href="#3436" class="Field Operator">⟦</a><a name="4198"> </a><a name="4199" href="#4190" class="Bound">A</a><a name="4200"> </a><a name="4201" href="#3436" class="Field Operator">⟧</a><a name="4202">
        </a><a name="4211" href="#4157" class="Function Operator">⟦</a><a name="4212"> </a><a name="4213" href="#4213" class="Bound">A</a><a name="4214"> </a><a name="4215" href="#512" class="InductiveConstructor Operator">⇒</a><a name="4216"> </a><a name="4217" href="#4217" class="Bound">B</a><a name="4218"> </a><a name="4219" href="#4157" class="Function Operator">⟧′</a><a name="4221"> </a><a name="4222" class="Symbol">=</a><a name="4223"> </a><a name="4224" href="#4157" class="Function Operator">⟦</a><a name="4225"> </a><a name="4226" href="#4213" class="Bound">A</a><a name="4227"> </a><a name="4228" href="#4157" class="Function Operator">⟧′</a><a name="4230"> </a><a name="4231" class="Symbol">→</a><a name="4232"> </a><a name="4233" href="#4157" class="Function Operator">⟦</a><a name="4234"> </a><a name="4235" href="#4217" class="Bound">B</a><a name="4236"> </a><a name="4237" href="#4157" class="Function Operator">⟧′</a></pre>

<pre class="Agda">  <a name="4267" class="Keyword">data</a><a name="4271"> </a><a name="4272" href="#4272" class="Datatype">Env</a><a name="4275"> </a><a name="4276" class="Symbol">:</a><a name="4277"> </a><a name="4278" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="4282"> </a><a name="4283" href="#469" class="Datatype">Type</a><a name="4287"> </a><a name="4288" class="Symbol">→</a><a name="4289"> </a><a name="4290" class="PrimitiveType">Set</a><a name="4293"> </a><a name="4294" class="Keyword">where</a><a name="4299">
    </a><a name="4304" href="#4304" class="InductiveConstructor">[]</a><a name="4306">  </a><a name="4308" class="Symbol">:</a><a name="4309"> </a><a name="4310" href="#4272" class="Datatype">Env</a><a name="4313"> </a><a name="4314" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="4316">
    </a><a name="4321" href="#4321" class="InductiveConstructor Operator">_∷_</a><a name="4324"> </a><a name="4325" class="Symbol">:</a><a name="4326"> </a><a name="4327" class="Symbol">{</a><a name="4328" href="#4328" class="Bound">A</a><a name="4329"> </a><a name="4330" class="Symbol">:</a><a name="4331"> </a><a name="4332" href="#469" class="Datatype">Type</a><a name="4336" class="Symbol">}</a><a name="4337"> </a><a name="4338" class="Symbol">{</a><a name="4339" href="#4339" class="Bound">Γ</a><a name="4340"> </a><a name="4341" class="Symbol">:</a><a name="4342"> </a><a name="4343" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="4347"> </a><a name="4348" href="#469" class="Datatype">Type</a><a name="4352" class="Symbol">}</a><a name="4353">
        </a><a name="4362" class="Symbol">→</a><a name="4363"> </a><a name="4364" href="#3436" class="Field Operator">⟦</a><a name="4365"> </a><a name="4366" href="#4328" class="Bound">A</a><a name="4367"> </a><a name="4368" href="#3436" class="Field Operator">⟧</a><a name="4369"> </a><a name="4370" class="Symbol">→</a><a name="4371"> </a><a name="4372" href="#4272" class="Datatype">Env</a><a name="4375"> </a><a name="4376" href="#4339" class="Bound">Γ</a><a name="4377"> </a><a name="4378" class="Symbol">→</a><a name="4379"> </a><a name="4380" href="#4272" class="Datatype">Env</a><a name="4383"> </a><a name="4384" class="Symbol">(</a><a name="4385" href="#4328" class="Bound">A</a><a name="4386"> </a><a name="4387" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="4388"> </a><a name="4389" href="#4339" class="Bound">Γ</a><a name="4390" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="4419" href="#4419" class="Function">lookup</a><a name="4425"> </a><a name="4426" class="Symbol">:</a><a name="4427"> </a><a name="4428" class="Symbol">∀</a><a name="4429"> </a><a name="4430" class="Symbol">{</a><a name="4431" href="#4431" class="Bound">A</a><a name="4432"> </a><a name="4433" href="#4433" class="Bound">Γ</a><a name="4434" class="Symbol">}</a><a name="4435"> </a><a name="4436" class="Symbol">→</a><a name="4437"> </a><a name="4438" href="#4431" class="Bound">A</a><a name="4439"> </a><a name="4440" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="4441"> </a><a name="4442" href="#4433" class="Bound">Γ</a><a name="4443"> </a><a name="4444" class="Symbol">→</a><a name="4445"> </a><a name="4446" href="#4272" class="Datatype">Env</a><a name="4449"> </a><a name="4450" href="#4433" class="Bound">Γ</a><a name="4451"> </a><a name="4452" class="Symbol">→</a><a name="4453"> </a><a name="4454" href="#3436" class="Field Operator">⟦</a><a name="4455"> </a><a name="4456" href="#4431" class="Bound">A</a><a name="4457"> </a><a name="4458" href="#3436" class="Field Operator">⟧</a><a name="4459">
  </a><a name="4462" href="#4419" class="Function">lookup</a><a name="4468"> </a><a name="4469" class="Symbol">(</a><a name="4470" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="4474">  </a><a name="4476" href="#4476" class="Bound">p</a><a name="4477" class="Symbol">)</a><a name="4478"> </a><a name="4479" class="Symbol">(</a><a name="4480" href="#4480" class="Bound">x</a><a name="4481"> </a><a name="4482" href="#4321" class="InductiveConstructor Operator">∷</a><a name="4483"> </a><a name="4484" class="Symbol">_)</a><a name="4486"> </a><a name="4487" class="Keyword">rewrite</a><a name="4494"> </a><a name="4495" href="#4476" class="Bound">p</a><a name="4496"> </a><a name="4497" class="Symbol">=</a><a name="4498"> </a><a name="4499" href="#4480" class="Bound">x</a><a name="4500">
  </a><a name="4503" href="#4419" class="Function">lookup</a><a name="4509"> </a><a name="4510" class="Symbol">(</a><a name="4511" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="4516"> </a><a name="4517" href="#4517" class="Bound">p</a><a name="4518" class="Symbol">)</a><a name="4519"> </a><a name="4520" class="Symbol">(_</a><a name="4522"> </a><a name="4523" href="#4321" class="InductiveConstructor Operator">∷</a><a name="4524"> </a><a name="4525" href="#4525" class="Bound">e</a><a name="4526" class="Symbol">)</a><a name="4527"> </a><a name="4528" class="Symbol">=</a><a name="4529"> </a><a name="4530" href="#4419" class="Function">lookup</a><a name="4536"> </a><a name="4537" href="#4517" class="Bound">p</a><a name="4538"> </a><a name="4539" href="#4525" class="Bound">e</a></pre>

<pre class="Agda">  <a name="4568" class="Keyword">instance</a><a name="4576">
    </a><a name="4581" href="#4581" class="Function Operator">⟦_:Sequent⟧</a><a name="4592"> </a><a name="4593" class="Symbol">:</a><a name="4594"> </a><a name="4595" href="#3362" class="Record">Interpret</a><a name="4604"> </a><a name="4605" href="#1035" class="Datatype">Sequent</a><a name="4612"> </a><a name="4613" class="PrimitiveType">Set</a><a name="4616">
    </a><a name="4621" href="#4581" class="Function Operator">⟦_:Sequent⟧</a><a name="4632"> </a><a name="4633" class="Symbol">=</a><a name="4634"> </a><a name="4635" class="Keyword">record</a><a name="4641"> </a><a name="4642" class="Symbol">{</a><a name="4643"> </a><a name="4644" class="Field Operator">⟦_⟧</a><a name="4647"> </a><a name="4648" class="Symbol">=</a><a name="4649"> </a><a name="4650" href="#4677" class="Function Operator">⟦_⟧′</a><a name="4654"> </a><a name="4655" class="Symbol">}</a><a name="4656">
      </a><a name="4663" class="Keyword">where</a><a name="4668">
        </a><a name="4677" href="#4677" class="Function Operator">⟦_⟧′</a><a name="4681"> </a><a name="4682" class="Symbol">:</a><a name="4683"> </a><a name="4684" href="#1035" class="Datatype">Sequent</a><a name="4691"> </a><a name="4692" class="Symbol">→</a><a name="4693"> </a><a name="4694" class="PrimitiveType">Set</a><a name="4697">
        </a><a name="4706" href="#4677" class="Function Operator">⟦</a><a name="4707"> </a><a name="4708" href="#4708" class="Bound">Γ</a><a name="4709"> </a><a name="4710" href="#1059" class="InductiveConstructor Operator">⊢</a><a name="4711"> </a><a name="4712" href="#4712" class="Bound">A</a><a name="4713"> </a><a name="4714" href="#4677" class="Function Operator">⟧′</a><a name="4716"> </a><a name="4717" class="Symbol">=</a><a name="4718"> </a><a name="4719" href="#4272" class="Datatype">Env</a><a name="4722"> </a><a name="4723" href="#4708" class="Bound">Γ</a><a name="4724"> </a><a name="4725" class="Symbol">→</a><a name="4726"> </a><a name="4727" href="#3436" class="Field Operator">⟦</a><a name="4728"> </a><a name="4729" href="#4712" class="Bound">A</a><a name="4730"> </a><a name="4731" href="#3436" class="Field Operator">⟧</a></pre>

<pre class="Agda">  <a name="4760" class="Keyword">instance</a><a name="4768">
    </a><a name="4773" href="#4773" class="Function Operator">⟦_:ND⟧</a><a name="4779"> </a><a name="4780" class="Symbol">:</a><a name="4781"> </a><a name="4782" class="Symbol">∀</a><a name="4783"> </a><a name="4784" class="Symbol">{</a><a name="4785" href="#4785" class="Bound">S</a><a name="4786" class="Symbol">}</a><a name="4787"> </a><a name="4788" class="Symbol">→</a><a name="4789"> </a><a name="4790" href="#3362" class="Record">Interpret</a><a name="4799"> </a><a name="4800" class="Symbol">(</a><a name="4801" href="#1139" class="Datatype Operator">ND</a><a name="4803"> </a><a name="4804" href="#4785" class="Bound">S</a><a name="4805" class="Symbol">)</a><a name="4806"> </a><a name="4807" href="#3436" class="Field Operator">⟦</a><a name="4808"> </a><a name="4809" href="#4785" class="Bound">S</a><a name="4810"> </a><a name="4811" href="#3436" class="Field Operator">⟧</a><a name="4812">
    </a><a name="4817" href="#4773" class="Function Operator">⟦_:ND⟧</a><a name="4823"> </a><a name="4824" class="Symbol">=</a><a name="4825"> </a><a name="4826" class="Keyword">record</a><a name="4832"> </a><a name="4833" class="Symbol">{</a><a name="4834"> </a><a name="4835" class="Field Operator">⟦_⟧</a><a name="4838"> </a><a name="4839" class="Symbol">=</a><a name="4840"> </a><a name="4841" href="#4868" class="Function Operator">⟦_⟧′</a><a name="4845"> </a><a name="4846" class="Symbol">}</a><a name="4847">
      </a><a name="4854" class="Keyword">where</a><a name="4859">
        </a><a name="4868" href="#4868" class="Function Operator">⟦_⟧′</a><a name="4872"> </a><a name="4873" class="Symbol">:</a><a name="4874"> </a><a name="4875" class="Symbol">∀</a><a name="4876"> </a><a name="4877" class="Symbol">{</a><a name="4878" href="#4878" class="Bound">S</a><a name="4879" class="Symbol">}</a><a name="4880"> </a><a name="4881" class="Symbol">→</a><a name="4882"> </a><a name="4883" href="#1139" class="Datatype Operator">ND</a><a name="4885"> </a><a name="4886" href="#4878" class="Bound">S</a><a name="4887"> </a><a name="4888" class="Symbol">→</a><a name="4889"> </a><a name="4890" href="#3436" class="Field Operator">⟦</a><a name="4891"> </a><a name="4892" href="#4878" class="Bound">S</a><a name="4893"> </a><a name="4894" href="#3436" class="Field Operator">⟧</a><a name="4895">
        </a><a name="4904" href="#4868" class="Function Operator">⟦</a><a name="4905"> </a><a name="4906" href="#1169" class="InductiveConstructor">ax</a><a name="4908"> </a><a name="4909" href="#4909" class="Bound">p</a><a name="4910">   </a><a name="4913" href="#4868" class="Function Operator">⟧′</a><a name="4915"> </a><a name="4916" href="#4916" class="Bound">e</a><a name="4917"> </a><a name="4918" class="Symbol">=</a><a name="4919"> </a><a name="4920" href="#4419" class="Function">lookup</a><a name="4926"> </a><a name="4927" href="#4909" class="Bound">p</a><a name="4928"> </a><a name="4929" href="#4916" class="Bound">e</a><a name="4930">
        </a><a name="4939" href="#4868" class="Function Operator">⟦</a><a name="4940"> </a><a name="4941" href="#1207" class="InductiveConstructor">⇒i</a><a name="4943"> </a><a name="4944" href="#4944" class="Bound">f</a><a name="4945">   </a><a name="4948" href="#4868" class="Function Operator">⟧′</a><a name="4950"> </a><a name="4951" href="#4951" class="Bound">e</a><a name="4952"> </a><a name="4953" class="Symbol">=</a><a name="4954"> </a><a name="4955" class="Symbol">λ</a><a name="4956"> </a><a name="4957" href="#4957" class="Bound">x</a><a name="4958"> </a><a name="4959" class="Symbol">→</a><a name="4960"> </a><a name="4961" href="#4868" class="Function Operator">⟦</a><a name="4962"> </a><a name="4963" href="#4944" class="Bound">f</a><a name="4964"> </a><a name="4965" href="#4868" class="Function Operator">⟧′</a><a name="4967"> </a><a name="4968" class="Symbol">(</a><a name="4969" href="#4957" class="Bound">x</a><a name="4970"> </a><a name="4971" href="#4321" class="InductiveConstructor Operator">∷</a><a name="4972"> </a><a name="4973" href="#4951" class="Bound">e</a><a name="4974" class="Symbol">)</a><a name="4975">
        </a><a name="4984" href="#4868" class="Function Operator">⟦</a><a name="4985"> </a><a name="4986" href="#1256" class="InductiveConstructor">⇒e</a><a name="4988"> </a><a name="4989" href="#4989" class="Bound">f</a><a name="4990"> </a><a name="4991" href="#4991" class="Bound">g</a><a name="4992"> </a><a name="4993" href="#4868" class="Function Operator">⟧′</a><a name="4995"> </a><a name="4996" href="#4996" class="Bound">e</a><a name="4997"> </a><a name="4998" class="Symbol">=</a><a name="4999"> </a><a name="5000" class="Symbol">(</a><a name="5001" href="#4868" class="Function Operator">⟦</a><a name="5002"> </a><a name="5003" href="#4989" class="Bound">f</a><a name="5004"> </a><a name="5005" href="#4868" class="Function Operator">⟧′</a><a name="5007"> </a><a name="5008" href="#4996" class="Bound">e</a><a name="5009" class="Symbol">)</a><a name="5010"> </a><a name="5011" class="Symbol">(</a><a name="5012" href="#4868" class="Function Operator">⟦</a><a name="5013"> </a><a name="5014" href="#4991" class="Bound">g</a><a name="5015"> </a><a name="5016" href="#4868" class="Function Operator">⟧′</a><a name="5018"> </a><a name="5019" href="#4996" class="Bound">e</a><a name="5020" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="5049" href="#5049" class="Function">head</a><a name="5053"> </a><a name="5054" class="Symbol">:</a><a name="5055"> </a><a name="5056" class="Symbol">∀</a><a name="5057"> </a><a name="5058" class="Symbol">{</a><a name="5059" href="#5059" class="Bound">A</a><a name="5060"> </a><a name="5061" href="#5061" class="Bound">Γ</a><a name="5062" class="Symbol">}</a><a name="5063"> </a><a name="5064" class="Symbol">→</a><a name="5065"> </a><a name="5066" href="#4272" class="Datatype">Env</a><a name="5069"> </a><a name="5070" class="Symbol">(</a><a name="5071" href="#5059" class="Bound">A</a><a name="5072"> </a><a name="5073" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="5074"> </a><a name="5075" href="#5061" class="Bound">Γ</a><a name="5076" class="Symbol">)</a><a name="5077"> </a><a name="5078" class="Symbol">→</a><a name="5079"> </a><a name="5080" href="#3436" class="Field Operator">⟦</a><a name="5081"> </a><a name="5082" href="#5059" class="Bound">A</a><a name="5083"> </a><a name="5084" href="#3436" class="Field Operator">⟧</a><a name="5085">
  </a><a name="5088" href="#5049" class="Function">head</a><a name="5092"> </a><a name="5093" class="Symbol">(</a><a name="5094" href="#5094" class="Bound">x</a><a name="5095"> </a><a name="5096" href="#4321" class="InductiveConstructor Operator">∷</a><a name="5097"> </a><a name="5098" class="Symbol">_)</a><a name="5100"> </a><a name="5101" class="Symbol">=</a><a name="5102"> </a><a name="5103" href="#5094" class="Bound">x</a><a name="5104">

  </a><a name="5108" href="#5108" class="Function">tail</a><a name="5112"> </a><a name="5113" class="Symbol">:</a><a name="5114"> </a><a name="5115" class="Symbol">∀</a><a name="5116"> </a><a name="5117" class="Symbol">{</a><a name="5118" href="#5118" class="Bound">A</a><a name="5119"> </a><a name="5120" href="#5120" class="Bound">Γ</a><a name="5121" class="Symbol">}</a><a name="5122"> </a><a name="5123" class="Symbol">→</a><a name="5124"> </a><a name="5125" href="#4272" class="Datatype">Env</a><a name="5128"> </a><a name="5129" class="Symbol">(</a><a name="5130" href="#5118" class="Bound">A</a><a name="5131"> </a><a name="5132" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="5133"> </a><a name="5134" href="#5120" class="Bound">Γ</a><a name="5135" class="Symbol">)</a><a name="5136"> </a><a name="5137" class="Symbol">→</a><a name="5138"> </a><a name="5139" href="#4272" class="Datatype">Env</a><a name="5142"> </a><a name="5143" href="#5120" class="Bound">Γ</a><a name="5144">
  </a><a name="5147" href="#5108" class="Function">tail</a><a name="5151"> </a><a name="5152" class="Symbol">(_</a><a name="5154"> </a><a name="5155" href="#4321" class="InductiveConstructor Operator">∷</a><a name="5156"> </a><a name="5157" href="#5157" class="Bound">e</a><a name="5158" class="Symbol">)</a><a name="5159"> </a><a name="5160" class="Symbol">=</a><a name="5161"> </a><a name="5162" href="#5157" class="Bound">e</a></pre>

<pre class="Agda">  <a name="5191" class="Keyword">instance</a><a name="5199">
    </a><a name="5204" href="#5204" class="Function Operator">⟦_:SC⟧</a><a name="5210"> </a><a name="5211" class="Symbol">:</a><a name="5212"> </a><a name="5213" class="Symbol">∀</a><a name="5214"> </a><a name="5215" class="Symbol">{</a><a name="5216" href="#5216" class="Bound">S</a><a name="5217" class="Symbol">}</a><a name="5218"> </a><a name="5219" class="Symbol">→</a><a name="5220"> </a><a name="5221" href="#3362" class="Record">Interpret</a><a name="5230"> </a><a name="5231" class="Symbol">(</a><a name="5232" href="#1654" class="Datatype Operator">SC</a><a name="5234"> </a><a name="5235" href="#5216" class="Bound">S</a><a name="5236" class="Symbol">)</a><a name="5237"> </a><a name="5238" href="#3436" class="Field Operator">⟦</a><a name="5239"> </a><a name="5240" href="#5216" class="Bound">S</a><a name="5241"> </a><a name="5242" href="#3436" class="Field Operator">⟧</a><a name="5243">
    </a><a name="5248" href="#5204" class="Function Operator">⟦_:SC⟧</a><a name="5254"> </a><a name="5255" class="Symbol">=</a><a name="5256"> </a><a name="5257" class="Keyword">record</a><a name="5263"> </a><a name="5264" class="Symbol">{</a><a name="5265"> </a><a name="5266" class="Field Operator">⟦_⟧</a><a name="5269"> </a><a name="5270" class="Symbol">=</a><a name="5271"> </a><a name="5272" href="#5299" class="Function Operator">⟦_⟧′</a><a name="5276"> </a><a name="5277" class="Symbol">}</a><a name="5278">
      </a><a name="5285" class="Keyword">where</a><a name="5290">
        </a><a name="5299" href="#5299" class="Function Operator">⟦_⟧′</a><a name="5303"> </a><a name="5304" class="Symbol">:</a><a name="5305"> </a><a name="5306" class="Symbol">∀</a><a name="5307"> </a><a name="5308" class="Symbol">{</a><a name="5309" href="#5309" class="Bound">S</a><a name="5310" class="Symbol">}</a><a name="5311"> </a><a name="5312" class="Symbol">→</a><a name="5313"> </a><a name="5314" href="#1654" class="Datatype Operator">SC</a><a name="5316"> </a><a name="5317" href="#5309" class="Bound">S</a><a name="5318"> </a><a name="5319" class="Symbol">→</a><a name="5320"> </a><a name="5321" href="#3436" class="Field Operator">⟦</a><a name="5322"> </a><a name="5323" href="#5309" class="Bound">S</a><a name="5324"> </a><a name="5325" href="#3436" class="Field Operator">⟧</a><a name="5326">
        </a><a name="5335" href="#5299" class="Function Operator">⟦</a><a name="5336"> </a><a name="5337" href="#1684" class="InductiveConstructor">ax</a><a name="5339">  </a><a name="5341" href="#5341" class="Bound">p</a><a name="5342">   </a><a name="5345" href="#5299" class="Function Operator">⟧′</a><a name="5347"> </a><a name="5348" href="#5348" class="Bound">e</a><a name="5349"> </a><a name="5350" class="Symbol">=</a><a name="5351"> </a><a name="5352" href="#4419" class="Function">lookup</a><a name="5358"> </a><a name="5359" href="#5341" class="Bound">p</a><a name="5360"> </a><a name="5361" href="#5348" class="Bound">e</a><a name="5362">
        </a><a name="5371" href="#5299" class="Function Operator">⟦</a><a name="5372"> </a><a name="5373" href="#1725" class="InductiveConstructor">cut</a><a name="5376"> </a><a name="5377" href="#5377" class="Bound">f</a><a name="5378"> </a><a name="5379" href="#5379" class="Bound">g</a><a name="5380"> </a><a name="5381" href="#5299" class="Function Operator">⟧′</a><a name="5383"> </a><a name="5384" href="#5384" class="Bound">e</a><a name="5385"> </a><a name="5386" class="Symbol">=</a><a name="5387"> </a><a name="5388" href="#5299" class="Function Operator">⟦</a><a name="5389"> </a><a name="5390" href="#5379" class="Bound">g</a><a name="5391"> </a><a name="5392" href="#5299" class="Function Operator">⟧′</a><a name="5394"> </a><a name="5395" class="Symbol">(</a><a name="5396" href="#5299" class="Function Operator">⟦</a><a name="5397"> </a><a name="5398" href="#5377" class="Bound">f</a><a name="5399"> </a><a name="5400" href="#5299" class="Function Operator">⟧′</a><a name="5402"> </a><a name="5403" href="#5384" class="Bound">e</a><a name="5404"> </a><a name="5405" href="#4321" class="InductiveConstructor Operator">∷</a><a name="5406"> </a><a name="5407" href="#5384" class="Bound">e</a><a name="5408" class="Symbol">)</a><a name="5409">
        </a><a name="5418" href="#5299" class="Function Operator">⟦</a><a name="5419"> </a><a name="5420" href="#1784" class="InductiveConstructor">⇒l</a><a name="5422">  </a><a name="5424" href="#5424" class="Bound">f</a><a name="5425"> </a><a name="5426" href="#5426" class="Bound">g</a><a name="5427"> </a><a name="5428" href="#5299" class="Function Operator">⟧′</a><a name="5430"> </a><a name="5431" href="#5431" class="Bound">e</a><a name="5432"> </a><a name="5433" class="Symbol">=</a><a name="5434"> </a><a name="5435" href="#5299" class="Function Operator">⟦</a><a name="5436"> </a><a name="5437" href="#5426" class="Bound">g</a><a name="5438"> </a><a name="5439" href="#5299" class="Function Operator">⟧′</a><a name="5441"> </a><a name="5442" class="Symbol">(</a><a name="5443" href="#5049" class="Function">head</a><a name="5447"> </a><a name="5448" href="#5431" class="Bound">e</a><a name="5449"> </a><a name="5450" class="Symbol">(</a><a name="5451" href="#5299" class="Function Operator">⟦</a><a name="5452"> </a><a name="5453" href="#5424" class="Bound">f</a><a name="5454"> </a><a name="5455" href="#5299" class="Function Operator">⟧′</a><a name="5457"> </a><a name="5458" class="Symbol">(</a><a name="5459" href="#5108" class="Function">tail</a><a name="5463"> </a><a name="5464" href="#5431" class="Bound">e</a><a name="5465" class="Symbol">))</a><a name="5467"> </a><a name="5468" href="#4321" class="InductiveConstructor Operator">∷</a><a name="5469"> </a><a name="5470" href="#5108" class="Function">tail</a><a name="5474"> </a><a name="5475" href="#5431" class="Bound">e</a><a name="5476" class="Symbol">)</a><a name="5477">
        </a><a name="5486" href="#5299" class="Function Operator">⟦</a><a name="5487"> </a><a name="5488" href="#1851" class="InductiveConstructor">⇒r</a><a name="5490">  </a><a name="5492" href="#5492" class="Bound">f</a><a name="5493">   </a><a name="5496" href="#5299" class="Function Operator">⟧′</a><a name="5498"> </a><a name="5499" href="#5499" class="Bound">e</a><a name="5500"> </a><a name="5501" class="Symbol">=</a><a name="5502"> </a><a name="5503" class="Symbol">λ</a><a name="5504"> </a><a name="5505" href="#5505" class="Bound">x</a><a name="5506"> </a><a name="5507" class="Symbol">→</a><a name="5508"> </a><a name="5509" href="#5299" class="Function Operator">⟦</a><a name="5510"> </a><a name="5511" href="#5492" class="Bound">f</a><a name="5512"> </a><a name="5513" href="#5299" class="Function Operator">⟧′</a><a name="5515"> </a><a name="5516" class="Symbol">(</a><a name="5517" href="#5505" class="Bound">x</a><a name="5518"> </a><a name="5519" href="#4321" class="InductiveConstructor Operator">∷</a><a name="5520"> </a><a name="5521" href="#5499" class="Bound">e</a><a name="5522" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="5551" class="Keyword">module</a><a name="5557"> </a><a name="5558" href="#5558" class="Module">⟦ND⟧⇔⟦SC⟧</a><a name="5567"> </a><a name="5568" class="Keyword">where</a><a name="5573">

    </a><a name="5579" href="#5579" class="Function">⟹</a><a name="5580"> </a><a name="5581" class="Symbol">:</a><a name="5582"> </a><a name="5583" class="Symbol">∀</a><a name="5584"> </a><a name="5585" class="Symbol">{</a><a name="5586" href="#5586" class="Bound">S</a><a name="5587" class="Symbol">}</a><a name="5588"> </a><a name="5589" class="Symbol">(</a><a name="5590" href="#5590" class="Bound">f</a><a name="5591"> </a><a name="5592" class="Symbol">:</a><a name="5593"> </a><a name="5594" href="#1139" class="Datatype Operator">ND</a><a name="5596"> </a><a name="5597" href="#5586" class="Bound">S</a><a name="5598" class="Symbol">)</a><a name="5599"> </a><a name="5600" class="Symbol">→</a><a name="5601"> </a><a name="5602" href="#3436" class="Field Operator">⟦</a><a name="5603"> </a><a name="5604" href="#5590" class="Bound">f</a><a name="5605"> </a><a name="5606" href="#3436" class="Field Operator">⟧</a><a name="5607"> </a><a name="5608" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4497" class="Datatype Operator" target="_blank">≡</a><a name="5609"> </a><a name="5610" href="#3436" class="Field Operator">⟦</a><a name="5611"> </a><a name="5612" href="#3003" class="Function">ND⇔SC.⟹</a><a name="5619"> </a><a name="5620" href="#5590" class="Bound">f</a><a name="5621"> </a><a name="5622" href="#3436" class="Field Operator">⟧</a><a name="5623">
    </a><a name="5628" href="#5579" class="Function">⟹</a><a name="5629"> </a><a name="5630" class="Symbol">(</a><a name="5631" href="#1169" class="InductiveConstructor">ax</a><a name="5633"> </a><a name="5634" class="Symbol">_)</a><a name="5636">   </a><a name="5639" class="Symbol">=</a><a name="5640"> </a><a name="5641" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="5645">
    </a><a name="5650" href="#5579" class="Function">⟹</a><a name="5651"> </a><a name="5652" class="Symbol">(</a><a name="5653" href="#1207" class="InductiveConstructor">⇒i</a><a name="5655"> </a><a name="5656" href="#5656" class="Bound">f</a><a name="5657" class="Symbol">)</a><a name="5658">   </a><a name="5661" class="Symbol">=</a><a name="5662"> </a><a name="5663" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1036" class="Function" target="_blank">cong</a><a name="5667">  </a><a name="5669" class="Symbol">(λ</a><a name="5671"> </a><a name="5672" href="#5672" class="Bound">f</a><a name="5673"> </a><a name="5674" href="#5674" class="Bound">e</a><a name="5675"> </a><a name="5676" href="#5676" class="Bound">x</a><a name="5677"> </a><a name="5678" class="Symbol">→</a><a name="5679"> </a><a name="5680" href="#5672" class="Bound">f</a><a name="5681"> </a><a name="5682" class="Symbol">(</a><a name="5683" href="#5676" class="Bound">x</a><a name="5684"> </a><a name="5685" href="#4321" class="InductiveConstructor Operator">∷</a><a name="5686"> </a><a name="5687" href="#5674" class="Bound">e</a><a name="5688" class="Symbol">))</a><a name="5690"> </a><a name="5691" class="Symbol">(</a><a name="5692" href="#5579" class="Function">⟹</a><a name="5693"> </a><a name="5694" href="#5656" class="Bound">f</a><a name="5695" class="Symbol">)</a><a name="5696">
    </a><a name="5701" href="#5579" class="Function">⟹</a><a name="5702"> </a><a name="5703" class="Symbol">(</a><a name="5704" href="#1256" class="InductiveConstructor">⇒e</a><a name="5706"> </a><a name="5707" href="#5707" class="Bound">f</a><a name="5708"> </a><a name="5709" href="#5709" class="Bound">g</a><a name="5710" class="Symbol">)</a><a name="5711"> </a><a name="5712" class="Symbol">=</a><a name="5713"> </a><a name="5714" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1274" class="Function" target="_blank">cong₂</a><a name="5719"> </a><a name="5720" class="Symbol">(λ</a><a name="5722"> </a><a name="5723" href="#5723" class="Bound">f</a><a name="5724"> </a><a name="5725" href="#5725" class="Bound">g</a><a name="5726"> </a><a name="5727" href="#5727" class="Bound">e</a><a name="5728"> </a><a name="5729" class="Symbol">→</a><a name="5730"> </a><a name="5731" href="#5723" class="Bound">f</a><a name="5732"> </a><a name="5733" href="#5727" class="Bound">e</a><a name="5734"> </a><a name="5735" class="Symbol">(</a><a name="5736" href="#5725" class="Bound">g</a><a name="5737"> </a><a name="5738" href="#5727" class="Bound">e</a><a name="5739" class="Symbol">))</a><a name="5741"> </a><a name="5742" class="Symbol">(</a><a name="5743" href="#5579" class="Function">⟹</a><a name="5744"> </a><a name="5745" href="#5707" class="Bound">f</a><a name="5746" class="Symbol">)</a><a name="5747"> </a><a name="5748" class="Symbol">(</a><a name="5749" href="#5579" class="Function">⟹</a><a name="5750"> </a><a name="5751" href="#5709" class="Bound">g</a><a name="5752" class="Symbol">)</a><a name="5753">

</a><a name="5755" class="Comment">--  ⟸ : ∀ {S} (f : SC S) → ⟦ f ⟧ ≡ ⟦ ND⇔SC.⟸ f ⟧</a><a name="5803">
</a><a name="5804" class="Comment">--  ⟸ (ax  _)   = refl</a><a name="5826">
</a><a name="5827" class="Comment">--  ⟸ (cut f g) = cong₂ (λ f g e → g (f e ∷ e)) (⟸ f) (⟸ g)</a><a name="5886">
</a><a name="5887" class="Comment">--  ⟸ (⇒l  f g) = {!!}</a><a name="5909">
</a><a name="5910" class="Comment">--  ⟸ (⇒r  f)   = cong  (λ f e x → f (x ∷ e)) (⟸ f)</a></pre>


