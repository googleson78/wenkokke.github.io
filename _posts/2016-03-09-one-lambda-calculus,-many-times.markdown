---
title      : One λ-calculus, many times...
date       : 2016-03-09 12:00:00
categories : [agda]
tags       : [agda]
published  : false
---

I mentioned one another type of post which you'll find on any Agda
user's blog: implementing the λ-calculus. If you simply google "Agda
lambda calculus", you'll easily find tens of examples.

<div style="display:none;">
<pre class="Agda"><a name="378" class="Keyword">module</a><a name="384"> </a><a name="385" href="#1" class="Module">2016-03-09-one-lambda-calculus,-many-times</a><a name="427"> </a><a name="428" class="Keyword">where</a></pre>
</div>


<pre class="Agda"><a name="467" class="Keyword">module</a><a name="473"> </a><a name="474" href="#474" class="Module">SetAntecedent</a><a name="487"> </a><a name="488" class="Symbol">(</a><a name="489" href="#489" class="Bound">Atom</a><a name="493"> </a><a name="494" class="Symbol">:</a><a name="495"> </a><a name="496" class="PrimitiveType">Set</a><a name="499" class="Symbol">)</a><a name="500"> </a><a name="501" class="Keyword">where</a></pre>

<pre class="Agda">  <a name="534" class="Keyword">data</a><a name="538"> </a><a name="539" href="#385" class="Module">Type</a><a name="543"> </a><a name="544" class="Symbol">:</a><a name="545"> </a><a name="546" class="PrimitiveType">Set</a><a name="549"> </a><a name="550" class="Keyword">where</a><a name="555">
    </a><a name="560" href="#560" class="InductiveConstructor">El</a><a name="562">  </a><a name="564" class="Symbol">:</a><a name="565"> </a><a name="566" href="#489" class="Bound">Atom</a><a name="570"> </a><a name="571" class="Symbol">→</a><a name="572"> </a><a name="573" href="#539" class="Datatype">Type</a><a name="577">
    </a><a name="582" href="#582" class="InductiveConstructor Operator">_⇒_</a><a name="585"> </a><a name="586" class="Symbol">:</a><a name="587"> </a><a name="588" href="#539" class="Datatype">Type</a><a name="592"> </a><a name="593" class="Symbol">→</a><a name="594"> </a><a name="595" href="#539" class="Datatype">Type</a><a name="599"> </a><a name="600" class="Symbol">→</a><a name="601"> </a><a name="602" href="#539" class="Datatype">Type</a></pre>


<pre class="Agda">  <a name="635" class="Keyword">open</a><a name="639"> </a><a name="640" class="Keyword">import</a><a name="646"> </a><a name="647" href="https://agda.github.io/agda-stdlib/Data.Nat.html#1" class="Module" target="_blank">Data.Nat</a><a name="655">             </a><a name="668" class="Keyword">using</a><a name="673"> </a><a name="674" class="Symbol">(</a><a name="675">ℕ</a><a name="676" class="Symbol">;</a><a name="677"> suc</a><a name="681" class="Symbol">;</a><a name="682"> zero</a><a name="687" class="Symbol">)</a><a name="688">
  </a><a name="691" class="Keyword">open</a><a name="695"> </a><a name="696" class="Keyword">import</a><a name="702"> </a><a name="703" href="https://agda.github.io/agda-stdlib/Data.Fin.html#1" class="Module" target="_blank">Data.Fin</a><a name="711">             </a><a name="724" class="Keyword">using</a><a name="729"> </a><a name="730" class="Symbol">(</a><a name="731">Fin</a><a name="734" class="Symbol">;</a><a name="735"> suc</a><a name="739" class="Symbol">;</a><a name="740"> zero</a><a name="745" class="Symbol">)</a><a name="746">
  </a><a name="749" class="Keyword">open</a><a name="753"> </a><a name="754" class="Keyword">import</a><a name="760"> </a><a name="761" href="https://agda.github.io/agda-stdlib/Data.List.html#1" class="Module" target="_blank">Data.List</a><a name="770">            </a><a name="782" class="Keyword">using</a><a name="787"> </a><a name="788" class="Symbol">(</a><a name="789">List</a><a name="793" class="Symbol">;</a><a name="794"> _∷_</a><a name="798" class="Symbol">;</a><a name="799"> []</a><a name="802" class="Symbol">;</a><a name="803"> _++_</a><a name="808" class="Symbol">)</a><a name="809">
  </a><a name="812" class="Keyword">open</a><a name="816"> </a><a name="817" class="Keyword">import</a><a name="823"> </a><a name="824" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1" class="Module" target="_blank">Data.List.Any</a><a name="837">        </a><a name="845" class="Keyword">using</a><a name="850"> </a><a name="851" class="Symbol">(</a><a name="852" class="Keyword">module</a><a name="858"> Membership</a><a name="869" class="Symbol">;</a><a name="870"> here</a><a name="875" class="Symbol">;</a><a name="876"> there</a><a name="882" class="Symbol">)</a><a name="883">
  </a><a name="886" class="Keyword">open</a><a name="890"> </a><a name="891" class="Keyword">import</a><a name="897"> </a><a name="898" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#1" class="Module" target="_blank">Function.Equivalence</a><a name="918"> </a><a name="919" class="Keyword">using</a><a name="924"> </a><a name="925" class="Symbol">(</a><a name="926">_⇔_</a><a name="929" class="Symbol">;</a><a name="930"> id</a><a name="933" class="Symbol">;</a><a name="934"> map</a><a name="938" class="Symbol">;</a><a name="939"> equivalence</a><a name="951" class="Symbol">)</a><a name="952">
  </a><a name="955" class="Keyword">open</a><a name="959"> </a><a name="960" class="Keyword">import</a><a name="966"> </a><a name="967" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1" class="Module" target="_blank">Relation.Binary.PropositionalEquality</a><a name="1004">
  </a><a name="1007" class="Keyword">open</a><a name="1011"> </a><a name="1012" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2298" class="Module" target="_blank">Membership</a><a name="1022"> </a><a name="1023" class="Symbol">(</a><a name="1024" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1526" class="Function" target="_blank">setoid</a><a name="1030"> </a><a name="1031" href="#539" class="Datatype">Type</a><a name="1035" class="Symbol">)</a><a name="1036">    </a><a name="1040" class="Keyword">using</a><a name="1045"> </a><a name="1046" class="Symbol">(</a><a name="1047">_∈_</a><a name="1050" class="Symbol">)</a></pre>


<pre class="Agda">  <a name="1080" class="Keyword">infix</a><a name="1085"> </a><a name="1086" class="Number">4</a><a name="1087"> _⊢_

  </a><a name="1095" class="Keyword">data</a><a name="1099"> </a><a name="1100" href="#385" class="Module">Sequent</a><a name="1107"> </a><a name="1108" class="Symbol">:</a><a name="1109"> </a><a name="1110" class="PrimitiveType">Set</a><a name="1113"> </a><a name="1114" class="Keyword">where</a><a name="1119">
    </a><a name="1124" href="#1124" class="InductiveConstructor Operator">_⊢_</a><a name="1127"> </a><a name="1128" class="Symbol">:</a><a name="1129"> </a><a name="1130" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="1134"> </a><a name="1135" href="#539" class="Datatype">Type</a><a name="1139"> </a><a name="1140" class="Symbol">→</a><a name="1141"> </a><a name="1142" href="#539" class="Datatype">Type</a><a name="1146"> </a><a name="1147" class="Symbol">→</a><a name="1148"> </a><a name="1149" href="#1100" class="Datatype">Sequent</a></pre>

<pre class="Agda">  <a name="1184" class="Keyword">infix</a><a name="1189"> </a><a name="1190" class="Number">3</a><a name="1191"> ND_

  </a><a name="1199" class="Keyword">data</a><a name="1203"> </a><a name="1204" href="#385" class="Module">ND_</a><a name="1207"> </a><a name="1208" class="Symbol">:</a><a name="1209"> </a><a name="1210" href="#1100" class="Datatype">Sequent</a><a name="1217"> </a><a name="1218" class="Symbol">→</a><a name="1219"> </a><a name="1220" class="PrimitiveType">Set</a><a name="1223"> </a><a name="1224" class="Keyword">where</a><a name="1229">
    </a><a name="1234" href="#1234" class="InductiveConstructor">ax</a><a name="1236"> </a><a name="1237" class="Symbol">:</a><a name="1238"> </a><a name="1239" class="Symbol">∀</a><a name="1240"> </a><a name="1241" class="Symbol">{</a><a name="1242" href="#1242" class="Bound">A</a><a name="1243">   </a><a name="1246" href="#1246" class="Bound">Γ</a><a name="1247" class="Symbol">}</a><a name="1248"> </a><a name="1249" class="Symbol">→</a><a name="1250"> </a><a name="1251" href="#1242" class="Bound">A</a><a name="1252"> </a><a name="1253" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1254"> </a><a name="1255" href="#1246" class="Bound">Γ</a><a name="1256"> </a><a name="1257" class="Symbol">→</a><a name="1258"> </a><a name="1259" href="#1204" class="Datatype Operator">ND</a><a name="1261"> </a><a name="1262" href="#1246" class="Bound">Γ</a><a name="1263"> </a><a name="1264" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1265"> </a><a name="1266" href="#1242" class="Bound">A</a><a name="1267">
    </a><a name="1272" href="#1272" class="InductiveConstructor">⇒i</a><a name="1274"> </a><a name="1275" class="Symbol">:</a><a name="1276"> </a><a name="1277" class="Symbol">∀</a><a name="1278"> </a><a name="1279" class="Symbol">{</a><a name="1280" href="#1280" class="Bound">A</a><a name="1281"> </a><a name="1282" href="#1282" class="Bound">B</a><a name="1283"> </a><a name="1284" href="#1284" class="Bound">Γ</a><a name="1285" class="Symbol">}</a><a name="1286"> </a><a name="1287" class="Symbol">→</a><a name="1288"> </a><a name="1289" href="#1204" class="Datatype Operator">ND</a><a name="1291"> </a><a name="1292" href="#1280" class="Bound">A</a><a name="1293"> </a><a name="1294" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1295"> </a><a name="1296" href="#1284" class="Bound">Γ</a><a name="1297"> </a><a name="1298" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1299"> </a><a name="1300" href="#1282" class="Bound">B</a><a name="1301"> </a><a name="1302" class="Symbol">→</a><a name="1303"> </a><a name="1304" href="#1204" class="Datatype Operator">ND</a><a name="1306"> </a><a name="1307" href="#1284" class="Bound">Γ</a><a name="1308"> </a><a name="1309" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1310"> </a><a name="1311" href="#1280" class="Bound">A</a><a name="1312"> </a><a name="1313" href="#582" class="InductiveConstructor Operator">⇒</a><a name="1314"> </a><a name="1315" href="#1282" class="Bound">B</a><a name="1316">
    </a><a name="1321" href="#1321" class="InductiveConstructor">⇒e</a><a name="1323"> </a><a name="1324" class="Symbol">:</a><a name="1325"> </a><a name="1326" class="Symbol">∀</a><a name="1327"> </a><a name="1328" class="Symbol">{</a><a name="1329" href="#1329" class="Bound">A</a><a name="1330"> </a><a name="1331" href="#1331" class="Bound">B</a><a name="1332"> </a><a name="1333" href="#1333" class="Bound">Γ</a><a name="1334" class="Symbol">}</a><a name="1335"> </a><a name="1336" class="Symbol">→</a><a name="1337"> </a><a name="1338" href="#1204" class="Datatype Operator">ND</a><a name="1340"> </a><a name="1341" href="#1333" class="Bound">Γ</a><a name="1342"> </a><a name="1343" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1344"> </a><a name="1345" href="#1329" class="Bound">A</a><a name="1346"> </a><a name="1347" href="#582" class="InductiveConstructor Operator">⇒</a><a name="1348"> </a><a name="1349" href="#1331" class="Bound">B</a><a name="1350"> </a><a name="1351" class="Symbol">→</a><a name="1352"> </a><a name="1353" href="#1204" class="Datatype Operator">ND</a><a name="1355"> </a><a name="1356" href="#1333" class="Bound">Γ</a><a name="1357"> </a><a name="1358" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1359"> </a><a name="1360" href="#1329" class="Bound">A</a><a name="1361"> </a><a name="1362" class="Symbol">→</a><a name="1363"> </a><a name="1364" href="#1204" class="Datatype Operator">ND</a><a name="1366"> </a><a name="1367" href="#1333" class="Bound">Γ</a><a name="1368"> </a><a name="1369" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1370"> </a><a name="1371" href="#1331" class="Bound">B</a></pre>

\\[
    \\frac{A \\in \\Gamma}{\\Gamma \\vdash A}{\\small ax}
    \\quad
    \\frac{A , \\Gamma \\vdash B}{\\Gamma \\vdash A \\Rightarrow B}{\\small{\\Rightarrow}\\!i}
    \\quad
    \\frac{\\Gamma \\vdash A \Rightarrow B \\quad \\Gamma \\vdash A}{\\Gamma \\vdash B}{\\small{\\Rightarrow}\\!e}
\\]

<pre class="Agda">  <a name="1699" class="Keyword">infix</a><a name="1704"> </a><a name="1705" class="Number">3</a><a name="1706"> SC_

  </a><a name="1714" class="Keyword">data</a><a name="1718"> </a><a name="1719" href="#385" class="Module">SC_</a><a name="1722"> </a><a name="1723" class="Symbol">:</a><a name="1724"> </a><a name="1725" href="#1100" class="Datatype">Sequent</a><a name="1732"> </a><a name="1733" class="Symbol">→</a><a name="1734"> </a><a name="1735" class="PrimitiveType">Set</a><a name="1738"> </a><a name="1739" class="Keyword">where</a><a name="1744">
    </a><a name="1749" href="#1749" class="InductiveConstructor">ax</a><a name="1751">  </a><a name="1753" class="Symbol">:</a><a name="1754"> </a><a name="1755" class="Symbol">∀</a><a name="1756"> </a><a name="1757" class="Symbol">{</a><a name="1758" href="#1758" class="Bound">A</a><a name="1759">     </a><a name="1764" href="#1764" class="Bound">Γ</a><a name="1765" class="Symbol">}</a><a name="1766"> </a><a name="1767" class="Symbol">→</a><a name="1768"> </a><a name="1769" href="#1758" class="Bound">A</a><a name="1770"> </a><a name="1771" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1772"> </a><a name="1773" href="#1764" class="Bound">Γ</a><a name="1774"> </a><a name="1775" class="Symbol">→</a><a name="1776"> </a><a name="1777" href="#1719" class="Datatype Operator">SC</a><a name="1779"> </a><a name="1780" href="#1764" class="Bound">Γ</a><a name="1781"> </a><a name="1782" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1783"> </a><a name="1784" href="#1758" class="Bound">A</a><a name="1785">
    </a><a name="1790" href="#1790" class="InductiveConstructor">cut</a><a name="1793"> </a><a name="1794" class="Symbol">:</a><a name="1795"> </a><a name="1796" class="Symbol">∀</a><a name="1797"> </a><a name="1798" class="Symbol">{</a><a name="1799" href="#1799" class="Bound">A</a><a name="1800"> </a><a name="1801" href="#1801" class="Bound">B</a><a name="1802">   </a><a name="1805" href="#1805" class="Bound">Γ</a><a name="1806" class="Symbol">}</a><a name="1807"> </a><a name="1808" class="Symbol">→</a><a name="1809"> </a><a name="1810" href="#1719" class="Datatype Operator">SC</a><a name="1812"> </a><a name="1813" href="#1805" class="Bound">Γ</a><a name="1814"> </a><a name="1815" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1816"> </a><a name="1817" href="#1799" class="Bound">A</a><a name="1818"> </a><a name="1819" class="Symbol">→</a><a name="1820"> </a><a name="1821" href="#1719" class="Datatype Operator">SC</a><a name="1823"> </a><a name="1824" href="#1799" class="Bound">A</a><a name="1825"> </a><a name="1826" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1827"> </a><a name="1828" href="#1805" class="Bound">Γ</a><a name="1829"> </a><a name="1830" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1831"> </a><a name="1832" href="#1801" class="Bound">B</a><a name="1833"> </a><a name="1834" class="Symbol">→</a><a name="1835"> </a><a name="1836" href="#1719" class="Datatype Operator">SC</a><a name="1838"> </a><a name="1839" href="#1805" class="Bound">Γ</a><a name="1840"> </a><a name="1841" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1842"> </a><a name="1843" href="#1801" class="Bound">B</a><a name="1844">
    </a><a name="1849" href="#1849" class="InductiveConstructor">⇒l</a><a name="1851">  </a><a name="1853" class="Symbol">:</a><a name="1854"> </a><a name="1855" class="Symbol">∀</a><a name="1856"> </a><a name="1857" class="Symbol">{</a><a name="1858" href="#1858" class="Bound">A</a><a name="1859"> </a><a name="1860" href="#1860" class="Bound">B</a><a name="1861"> </a><a name="1862" href="#1862" class="Bound">C</a><a name="1863"> </a><a name="1864" href="#1864" class="Bound">Γ</a><a name="1865" class="Symbol">}</a><a name="1866"> </a><a name="1867" class="Symbol">→</a><a name="1868"> </a><a name="1869" href="#1719" class="Datatype Operator">SC</a><a name="1871"> </a><a name="1872" href="#1864" class="Bound">Γ</a><a name="1873"> </a><a name="1874" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1875"> </a><a name="1876" href="#1858" class="Bound">A</a><a name="1877"> </a><a name="1878" class="Symbol">→</a><a name="1879"> </a><a name="1880" href="#1719" class="Datatype Operator">SC</a><a name="1882"> </a><a name="1883" href="#1860" class="Bound">B</a><a name="1884"> </a><a name="1885" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1886"> </a><a name="1887" href="#1864" class="Bound">Γ</a><a name="1888"> </a><a name="1889" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1890"> </a><a name="1891" href="#1862" class="Bound">C</a><a name="1892"> </a><a name="1893" class="Symbol">→</a><a name="1894"> </a><a name="1895" href="#1719" class="Datatype Operator">SC</a><a name="1897"> </a><a name="1898" href="#1858" class="Bound">A</a><a name="1899"> </a><a name="1900" href="#582" class="InductiveConstructor Operator">⇒</a><a name="1901"> </a><a name="1902" href="#1860" class="Bound">B</a><a name="1903"> </a><a name="1904" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1905"> </a><a name="1906" href="#1864" class="Bound">Γ</a><a name="1907"> </a><a name="1908" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1909"> </a><a name="1910" href="#1862" class="Bound">C</a><a name="1911">
    </a><a name="1916" href="#1916" class="InductiveConstructor">⇒r</a><a name="1918">  </a><a name="1920" class="Symbol">:</a><a name="1921"> </a><a name="1922" class="Symbol">∀</a><a name="1923"> </a><a name="1924" class="Symbol">{</a><a name="1925" href="#1925" class="Bound">A</a><a name="1926"> </a><a name="1927" href="#1927" class="Bound">B</a><a name="1928">   </a><a name="1931" href="#1931" class="Bound">Γ</a><a name="1932" class="Symbol">}</a><a name="1933"> </a><a name="1934" class="Symbol">→</a><a name="1935"> </a><a name="1936" href="#1719" class="Datatype Operator">SC</a><a name="1938"> </a><a name="1939" href="#1925" class="Bound">A</a><a name="1940"> </a><a name="1941" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1942"> </a><a name="1943" href="#1931" class="Bound">Γ</a><a name="1944"> </a><a name="1945" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1946"> </a><a name="1947" href="#1927" class="Bound">B</a><a name="1948"> </a><a name="1949" class="Symbol">→</a><a name="1950"> </a><a name="1951" href="#1719" class="Datatype Operator">SC</a><a name="1953"> </a><a name="1954" href="#1931" class="Bound">Γ</a><a name="1955"> </a><a name="1956" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="1957"> </a><a name="1958" href="#1925" class="Bound">A</a><a name="1959"> </a><a name="1960" href="#582" class="InductiveConstructor Operator">⇒</a><a name="1961"> </a><a name="1962" href="#1927" class="Bound">B</a></pre>

\\[
    \\frac{A \\in \\Gamma}{\\Gamma \\vdash A}{\\small ax}
    \\quad
    \\frac{\\Gamma \\vdash A \\quad A , \\Gamma \\vdash B}{\\Gamma \\vdash B}{\\small cut}
    \\quad
    \\frac{\\Gamma \\vdash A \\quad B , \\Gamma \\vdash C}{A \\Rightarrow  B , \\Gamma \\vdash C}{\\small{\\Rightarrow}\\!l}
    \\quad
    \\frac{A , \\Gamma \\vdash B}{\\Gamma \\vdash A \\Rightarrow B}{\\small{\\Rightarrow}\\!r}
\\]

<pre class="Agda">  <a name="2402" class="Keyword">pattern</a><a name="2409"> </a><a name="2410" href="#2410" class="InductiveConstructor">ax₀</a><a name="2413"> </a><a name="2414" class="Symbol">=</a><a name="2415"> </a><a name="2416" class="InductiveConstructor">ax</a><a name="2418"> </a><a name="2419" class="Symbol">(</a><a name="2420" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2424"> </a><a name="2425" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="2429" class="Symbol">)</a><a name="2430">
  </a><a name="2433" class="Keyword">pattern</a><a name="2440"> </a><a name="2441" href="#2441" class="InductiveConstructor">ax₁</a><a name="2444"> </a><a name="2445" class="Symbol">=</a><a name="2446"> </a><a name="2447" class="InductiveConstructor">ax</a><a name="2449"> </a><a name="2450" class="Symbol">(</a><a name="2451" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2456"> </a><a name="2457" class="Symbol">(</a><a name="2458" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2462"> </a><a name="2463" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="2467" class="Symbol">))</a><a name="2469">
  </a><a name="2472" class="Keyword">pattern</a><a name="2479"> </a><a name="2480" href="#2480" class="InductiveConstructor">ax₂</a><a name="2483"> </a><a name="2484" class="Symbol">=</a><a name="2485"> </a><a name="2486" class="InductiveConstructor">ax</a><a name="2488"> </a><a name="2489" class="Symbol">(</a><a name="2490" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2495"> </a><a name="2496" class="Symbol">(</a><a name="2497" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2502"> </a><a name="2503" class="Symbol">(</a><a name="2504" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2508"> </a><a name="2509" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="2513" class="Symbol">)))</a></pre>

<pre class="Agda">  <a name="2544" href="#2544" class="Function">∈-exch</a><a name="2550"> </a><a name="2551" class="Symbol">:</a><a name="2552"> </a><a name="2553" class="Symbol">∀</a><a name="2554"> </a><a name="2555" class="Symbol">{</a><a name="2556" href="#2556" class="Bound">A</a><a name="2557"> </a><a name="2558" href="#2558" class="Bound">B</a><a name="2559"> </a><a name="2560" href="#2560" class="Bound">C</a><a name="2561" class="Symbol">}</a><a name="2562"> </a><a name="2563" class="Symbol">(</a><a name="2564" href="#2564" class="Bound">Γ₁</a><a name="2566"> </a><a name="2567" class="Symbol">:</a><a name="2568"> </a><a name="2569" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="2573"> </a><a name="2574" href="#539" class="Datatype">Type</a><a name="2578" class="Symbol">)</a><a name="2579"> </a><a name="2580" class="Symbol">{</a><a name="2581" href="#2581" class="Bound">Γ₂</a><a name="2583"> </a><a name="2584" class="Symbol">:</a><a name="2585"> </a><a name="2586" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="2590"> </a><a name="2591" href="#539" class="Datatype">Type</a><a name="2595" class="Symbol">}</a><a name="2596">
          </a><a name="2607" class="Symbol">→</a><a name="2608"> </a><a name="2609" href="#2556" class="Bound">A</a><a name="2610"> </a><a name="2611" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="2612"> </a><a name="2613" href="#2564" class="Bound">Γ₁</a><a name="2615"> </a><a name="2616" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="2618"> </a><a name="2619" href="#2560" class="Bound">C</a><a name="2620"> </a><a name="2621" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2622"> </a><a name="2623" href="#2558" class="Bound">B</a><a name="2624"> </a><a name="2625" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2626"> </a><a name="2627" href="#2581" class="Bound">Γ₂</a><a name="2629"> </a><a name="2630" class="Symbol">→</a><a name="2631"> </a><a name="2632" href="#2556" class="Bound">A</a><a name="2633"> </a><a name="2634" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="2635"> </a><a name="2636" href="#2564" class="Bound">Γ₁</a><a name="2638"> </a><a name="2639" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="2641"> </a><a name="2642" href="#2558" class="Bound">B</a><a name="2643"> </a><a name="2644" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2645"> </a><a name="2646" href="#2560" class="Bound">C</a><a name="2647"> </a><a name="2648" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2649"> </a><a name="2650" href="#2581" class="Bound">Γ₂</a><a name="2652">
  </a><a name="2655" href="#2544" class="Function">∈-exch</a><a name="2661">      </a><a name="2667" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2669">  </a><a name="2671" class="Symbol">(</a><a name="2672" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2676">         </a><a name="2685" href="#2685" class="Bound">p</a><a name="2686" class="Symbol">)</a><a name="2687">  </a><a name="2689" class="Symbol">=</a><a name="2690"> </a><a name="2691" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2696"> </a><a name="2697" class="Symbol">(</a><a name="2698" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2702"> </a><a name="2703" href="#2685" class="Bound">p</a><a name="2704" class="Symbol">)</a><a name="2705"> </a><a name="2706" class="Comment">-- the swap</a><a name="2717">
  </a><a name="2720" href="#2544" class="Function">∈-exch</a><a name="2726">      </a><a name="2732" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2734">  </a><a name="2736" class="Symbol">(</a><a name="2737" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2742"> </a><a name="2743" class="Symbol">(</a><a name="2744" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2748">  </a><a name="2750" href="#2750" class="Bound">p</a><a name="2751" class="Symbol">))</a><a name="2753"> </a><a name="2754" class="Symbol">=</a><a name="2755"> </a><a name="2756" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2760"> </a><a name="2761" href="#2750" class="Bound">p</a><a name="2762">         </a><a name="2771" class="Comment">-- is here.</a><a name="2782">
  </a><a name="2785" href="#2544" class="Function">∈-exch</a><a name="2791">      </a><a name="2797" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2799">  </a><a name="2801" class="Symbol">(</a><a name="2802" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2807"> </a><a name="2808" class="Symbol">(</a><a name="2809" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2814"> </a><a name="2815" href="#2815" class="Bound">p</a><a name="2816" class="Symbol">))</a><a name="2818"> </a><a name="2819" class="Symbol">=</a><a name="2820"> </a><a name="2821" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2826"> </a><a name="2827" class="Symbol">(</a><a name="2828" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2833"> </a><a name="2834" href="#2815" class="Bound">p</a><a name="2835" class="Symbol">)</a><a name="2836">
  </a><a name="2839" href="#2544" class="Function">∈-exch</a><a name="2845"> </a><a name="2846" class="Symbol">(</a><a name="2847" href="#2847" class="Bound">C</a><a name="2848"> </a><a name="2849" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2850"> </a><a name="2851" href="#2851" class="Bound">Γ₁</a><a name="2853" class="Symbol">)</a><a name="2854"> </a><a name="2855" class="Symbol">(</a><a name="2856" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2860">         </a><a name="2869" href="#2869" class="Bound">p</a><a name="2870" class="Symbol">)</a><a name="2871">  </a><a name="2873" class="Symbol">=</a><a name="2874"> </a><a name="2875" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2879"> </a><a name="2880" href="#2869" class="Bound">p</a><a name="2881">
  </a><a name="2884" href="#2544" class="Function">∈-exch</a><a name="2890"> </a><a name="2891" class="Symbol">(</a><a name="2892" href="#2892" class="Bound">C</a><a name="2893"> </a><a name="2894" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2895"> </a><a name="2896" href="#2896" class="Bound">Γ₁</a><a name="2898" class="Symbol">)</a><a name="2899"> </a><a name="2900" class="Symbol">(</a><a name="2901" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2906">        </a><a name="2914" href="#2914" class="Bound">p</a><a name="2915" class="Symbol">)</a><a name="2916">  </a><a name="2918" class="Symbol">=</a><a name="2919"> </a><a name="2920" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2925"> </a><a name="2926" class="Symbol">(</a><a name="2927" href="#2544" class="Function">∈-exch</a><a name="2933"> </a><a name="2934" href="#2896" class="Bound">Γ₁</a><a name="2936"> </a><a name="2937" href="#2914" class="Bound">p</a><a name="2938" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="2967" href="#2967" class="Function">exch</a><a name="2971"> </a><a name="2972" class="Symbol">:</a><a name="2973"> </a><a name="2974" class="Symbol">∀</a><a name="2975"> </a><a name="2976" class="Symbol">{</a><a name="2977" href="#2977" class="Bound">A</a><a name="2978"> </a><a name="2979" href="#2979" class="Bound">B</a><a name="2980"> </a><a name="2981" href="#2981" class="Bound">C</a><a name="2982" class="Symbol">}</a><a name="2983"> </a><a name="2984" class="Symbol">(</a><a name="2985" href="#2985" class="Bound">Γ₁</a><a name="2987"> </a><a name="2988" class="Symbol">:</a><a name="2989"> </a><a name="2990" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="2994"> </a><a name="2995" href="#539" class="Datatype">Type</a><a name="2999" class="Symbol">)</a><a name="3000"> </a><a name="3001" class="Symbol">{</a><a name="3002" href="#3002" class="Bound">Γ₂</a><a name="3004"> </a><a name="3005" class="Symbol">:</a><a name="3006"> </a><a name="3007" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="3011"> </a><a name="3012" href="#539" class="Datatype">Type</a><a name="3016" class="Symbol">}</a><a name="3017">
       </a><a name="3025" class="Symbol">→</a><a name="3026"> </a><a name="3027" href="#1204" class="Datatype Operator">ND</a><a name="3029"> </a><a name="3030" href="#2985" class="Bound">Γ₁</a><a name="3032"> </a><a name="3033" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="3035"> </a><a name="3036" href="#2979" class="Bound">B</a><a name="3037"> </a><a name="3038" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3039"> </a><a name="3040" href="#2977" class="Bound">A</a><a name="3041"> </a><a name="3042" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3043"> </a><a name="3044" href="#3002" class="Bound">Γ₂</a><a name="3046"> </a><a name="3047" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="3048"> </a><a name="3049" href="#2981" class="Bound">C</a><a name="3050"> </a><a name="3051" class="Symbol">→</a><a name="3052"> </a><a name="3053" href="#1204" class="Datatype Operator">ND</a><a name="3055"> </a><a name="3056" href="#2985" class="Bound">Γ₁</a><a name="3058"> </a><a name="3059" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="3061"> </a><a name="3062" href="#2977" class="Bound">A</a><a name="3063"> </a><a name="3064" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3065"> </a><a name="3066" href="#2979" class="Bound">B</a><a name="3067"> </a><a name="3068" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3069"> </a><a name="3070" href="#3002" class="Bound">Γ₂</a><a name="3072"> </a><a name="3073" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="3074"> </a><a name="3075" href="#2981" class="Bound">C</a><a name="3076">
  </a><a name="3079" href="#2967" class="Function">exch</a><a name="3083"> </a><a name="3084" href="#3084" class="Bound">Γ₁</a><a name="3086"> </a><a name="3087" class="Symbol">(</a><a name="3088" href="#1234" class="InductiveConstructor">ax</a><a name="3090"> </a><a name="3091" href="#3091" class="Bound">p</a><a name="3092" class="Symbol">)</a><a name="3093">   </a><a name="3096" class="Symbol">=</a><a name="3097"> </a><a name="3098" href="#1234" class="InductiveConstructor">ax</a><a name="3100"> </a><a name="3101" class="Symbol">(</a><a name="3102" href="#2544" class="Function">∈-exch</a><a name="3108"> </a><a name="3109" href="#3084" class="Bound">Γ₁</a><a name="3111"> </a><a name="3112" href="#3091" class="Bound">p</a><a name="3113" class="Symbol">)</a><a name="3114">
  </a><a name="3117" href="#2967" class="Function">exch</a><a name="3121"> </a><a name="3122" href="#3122" class="Bound">Γ₁</a><a name="3124"> </a><a name="3125" class="Symbol">(</a><a name="3126" href="#1272" class="InductiveConstructor">⇒i</a><a name="3128"> </a><a name="3129" href="#3129" class="Bound">f</a><a name="3130" class="Symbol">)</a><a name="3131">   </a><a name="3134" class="Symbol">=</a><a name="3135"> </a><a name="3136" href="#1272" class="InductiveConstructor">⇒i</a><a name="3138"> </a><a name="3139" class="Symbol">(</a><a name="3140" href="#2967" class="Function">exch</a><a name="3144"> </a><a name="3145" class="Symbol">(_</a><a name="3147"> </a><a name="3148" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3149"> </a><a name="3150" href="#3122" class="Bound">Γ₁</a><a name="3152" class="Symbol">)</a><a name="3153"> </a><a name="3154" href="#3129" class="Bound">f</a><a name="3155" class="Symbol">)</a><a name="3156">
  </a><a name="3159" href="#2967" class="Function">exch</a><a name="3163"> </a><a name="3164" href="#3164" class="Bound">Γ₁</a><a name="3166"> </a><a name="3167" class="Symbol">(</a><a name="3168" href="#1321" class="InductiveConstructor">⇒e</a><a name="3170"> </a><a name="3171" href="#3171" class="Bound">f</a><a name="3172"> </a><a name="3173" href="#3173" class="Bound">g</a><a name="3174" class="Symbol">)</a><a name="3175"> </a><a name="3176" class="Symbol">=</a><a name="3177"> </a><a name="3178" href="#1321" class="InductiveConstructor">⇒e</a><a name="3180"> </a><a name="3181" class="Symbol">(</a><a name="3182" href="#2967" class="Function">exch</a><a name="3186"> </a><a name="3187" href="#3164" class="Bound">Γ₁</a><a name="3189"> </a><a name="3190" href="#3171" class="Bound">f</a><a name="3191" class="Symbol">)</a><a name="3192"> </a><a name="3193" class="Symbol">(</a><a name="3194" href="#2967" class="Function">exch</a><a name="3198"> </a><a name="3199" href="#3164" class="Bound">Γ₁</a><a name="3201"> </a><a name="3202" href="#3173" class="Bound">g</a><a name="3203" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="3232" href="#3232" class="Function">weak</a><a name="3236"> </a><a name="3237" class="Symbol">:</a><a name="3238"> </a><a name="3239" class="Symbol">∀</a><a name="3240"> </a><a name="3241" class="Symbol">{</a><a name="3242" href="#3242" class="Bound">A</a><a name="3243"> </a><a name="3244" href="#3244" class="Bound">B</a><a name="3245"> </a><a name="3246" href="#3246" class="Bound">Γ</a><a name="3247" class="Symbol">}</a><a name="3248"> </a><a name="3249" class="Symbol">→</a><a name="3250"> </a><a name="3251" href="#1204" class="Datatype Operator">ND</a><a name="3253"> </a><a name="3254" href="#3246" class="Bound">Γ</a><a name="3255"> </a><a name="3256" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="3257"> </a><a name="3258" href="#3244" class="Bound">B</a><a name="3259"> </a><a name="3260" class="Symbol">→</a><a name="3261"> </a><a name="3262" href="#1204" class="Datatype Operator">ND</a><a name="3264"> </a><a name="3265" href="#3242" class="Bound">A</a><a name="3266"> </a><a name="3267" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3268"> </a><a name="3269" href="#3246" class="Bound">Γ</a><a name="3270"> </a><a name="3271" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="3272"> </a><a name="3273" href="#3244" class="Bound">B</a><a name="3274">
  </a><a name="3277" href="#3232" class="Function">weak</a><a name="3281"> </a><a name="3282" class="Symbol">(</a><a name="3283" href="#1234" class="InductiveConstructor">ax</a><a name="3285"> </a><a name="3286" href="#3286" class="Bound">p</a><a name="3287" class="Symbol">)</a><a name="3288">   </a><a name="3291" class="Symbol">=</a><a name="3292"> </a><a name="3293" href="#1234" class="InductiveConstructor">ax</a><a name="3295"> </a><a name="3296" class="Symbol">(</a><a name="3297" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="3302"> </a><a name="3303" href="#3286" class="Bound">p</a><a name="3304" class="Symbol">)</a><a name="3305">
  </a><a name="3308" href="#3232" class="Function">weak</a><a name="3312"> </a><a name="3313" class="Symbol">(</a><a name="3314" href="#1272" class="InductiveConstructor">⇒i</a><a name="3316"> </a><a name="3317" href="#3317" class="Bound">f</a><a name="3318" class="Symbol">)</a><a name="3319">   </a><a name="3322" class="Symbol">=</a><a name="3323"> </a><a name="3324" href="#1272" class="InductiveConstructor">⇒i</a><a name="3326"> </a><a name="3327" class="Symbol">(</a><a name="3328" href="#2967" class="Function">exch</a><a name="3332"> </a><a name="3333" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="3335"> </a><a name="3336" class="Symbol">(</a><a name="3337" href="#3232" class="Function">weak</a><a name="3341"> </a><a name="3342" href="#3317" class="Bound">f</a><a name="3343" class="Symbol">))</a><a name="3345">
  </a><a name="3348" href="#3232" class="Function">weak</a><a name="3352"> </a><a name="3353" class="Symbol">(</a><a name="3354" href="#1321" class="InductiveConstructor">⇒e</a><a name="3356"> </a><a name="3357" href="#3357" class="Bound">f</a><a name="3358"> </a><a name="3359" href="#3359" class="Bound">g</a><a name="3360" class="Symbol">)</a><a name="3361"> </a><a name="3362" class="Symbol">=</a><a name="3363"> </a><a name="3364" href="#1321" class="InductiveConstructor">⇒e</a><a name="3366"> </a><a name="3367" class="Symbol">(</a><a name="3368" href="#3232" class="Function">weak</a><a name="3372"> </a><a name="3373" href="#3357" class="Bound">f</a><a name="3374" class="Symbol">)</a><a name="3375"> </a><a name="3376" class="Symbol">(</a><a name="3377" href="#3232" class="Function">weak</a><a name="3381"> </a><a name="3382" href="#3359" class="Bound">g</a><a name="3383" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="3412" class="Keyword">instance</a><a name="3420">
    </a><a name="3425" href="#3425" class="Function">ND⇔SC</a><a name="3430"> </a><a name="3431" class="Symbol">:</a><a name="3432"> </a><a name="3433" class="Symbol">∀</a><a name="3434"> </a><a name="3435" class="Symbol">{</a><a name="3436" href="#3436" class="Bound">S</a><a name="3437" class="Symbol">}</a><a name="3438"> </a><a name="3439" class="Symbol">→</a><a name="3440"> </a><a name="3441" href="#1204" class="Datatype Operator">ND</a><a name="3443"> </a><a name="3444" href="#3436" class="Bound">S</a><a name="3445"> </a><a name="3446" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#711" class="Function Operator" target="_blank">⇔</a><a name="3447"> </a><a name="3448" href="#1719" class="Datatype Operator">SC</a><a name="3450"> </a><a name="3451" href="#3436" class="Bound">S</a><a name="3452">
    </a><a name="3457" href="#3425" class="Function">ND⇔SC</a><a name="3462"> </a><a name="3463" class="Symbol">=</a><a name="3464"> </a><a name="3465" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#804" class="Function" target="_blank">equivalence</a><a name="3476"> </a><a name="3477" href="#3501" class="Function">⟹</a><a name="3478"> </a><a name="3479" href="#3638" class="Function">⟸</a><a name="3480">
      </a><a name="3487" class="Keyword">where</a><a name="3492">
        </a><a name="3501" href="#3501" class="Function">⟹</a><a name="3502"> </a><a name="3503" class="Symbol">:</a><a name="3504"> </a><a name="3505" class="Symbol">∀</a><a name="3506"> </a><a name="3507" class="Symbol">{</a><a name="3508" href="#3508" class="Bound">S</a><a name="3509" class="Symbol">}</a><a name="3510"> </a><a name="3511" class="Symbol">→</a><a name="3512"> </a><a name="3513" href="#1204" class="Datatype Operator">ND</a><a name="3515"> </a><a name="3516" href="#3508" class="Bound">S</a><a name="3517"> </a><a name="3518" class="Symbol">→</a><a name="3519"> </a><a name="3520" href="#1719" class="Datatype Operator">SC</a><a name="3522"> </a><a name="3523" href="#3508" class="Bound">S</a><a name="3524">
        </a><a name="3533" href="#3501" class="Function">⟹</a><a name="3534"> </a><a name="3535" class="Symbol">(</a><a name="3536" href="#1234" class="InductiveConstructor">ax</a><a name="3538">  </a><a name="3540" href="#3540" class="Bound">p</a><a name="3541" class="Symbol">)</a><a name="3542">   </a><a name="3545" class="Symbol">=</a><a name="3546"> </a><a name="3547" href="#1749" class="InductiveConstructor">ax</a><a name="3549"> </a><a name="3550" href="#3540" class="Bound">p</a><a name="3551">
        </a><a name="3560" href="#3501" class="Function">⟹</a><a name="3561"> </a><a name="3562" class="Symbol">(</a><a name="3563" href="#1272" class="InductiveConstructor">⇒i</a><a name="3565">  </a><a name="3567" href="#3567" class="Bound">f</a><a name="3568" class="Symbol">)</a><a name="3569">   </a><a name="3572" class="Symbol">=</a><a name="3573"> </a><a name="3574" href="#1916" class="InductiveConstructor">⇒r</a><a name="3576"> </a><a name="3577" class="Symbol">(</a><a name="3578" href="#3501" class="Function">⟹</a><a name="3579"> </a><a name="3580" href="#3567" class="Bound">f</a><a name="3581" class="Symbol">)</a><a name="3582">
        </a><a name="3591" href="#3501" class="Function">⟹</a><a name="3592"> </a><a name="3593" class="Symbol">(</a><a name="3594" href="#1321" class="InductiveConstructor">⇒e</a><a name="3596">  </a><a name="3598" href="#3598" class="Bound">f</a><a name="3599"> </a><a name="3600" href="#3600" class="Bound">g</a><a name="3601" class="Symbol">)</a><a name="3602"> </a><a name="3603" class="Symbol">=</a><a name="3604"> </a><a name="3605" href="#1790" class="InductiveConstructor">cut</a><a name="3608"> </a><a name="3609" class="Symbol">(</a><a name="3610" href="#3501" class="Function">⟹</a><a name="3611"> </a><a name="3612" href="#3598" class="Bound">f</a><a name="3613" class="Symbol">)</a><a name="3614"> </a><a name="3615" class="Symbol">(</a><a name="3616" href="#1849" class="InductiveConstructor">⇒l</a><a name="3618"> </a><a name="3619" class="Symbol">(</a><a name="3620" href="#3501" class="Function">⟹</a><a name="3621"> </a><a name="3622" href="#3600" class="Bound">g</a><a name="3623" class="Symbol">)</a><a name="3624"> </a><a name="3625" href="#2410" class="InductiveConstructor">ax₀</a><a name="3628" class="Symbol">)</a><a name="3629">
        </a><a name="3638" href="#3638" class="Function">⟸</a><a name="3639"> </a><a name="3640" class="Symbol">:</a><a name="3641"> </a><a name="3642" class="Symbol">∀</a><a name="3643"> </a><a name="3644" class="Symbol">{</a><a name="3645" href="#3645" class="Bound">S</a><a name="3646" class="Symbol">}</a><a name="3647"> </a><a name="3648" class="Symbol">→</a><a name="3649"> </a><a name="3650" href="#1719" class="Datatype Operator">SC</a><a name="3652"> </a><a name="3653" href="#3645" class="Bound">S</a><a name="3654"> </a><a name="3655" class="Symbol">→</a><a name="3656"> </a><a name="3657" href="#1204" class="Datatype Operator">ND</a><a name="3659"> </a><a name="3660" href="#3645" class="Bound">S</a><a name="3661">
        </a><a name="3670" href="#3638" class="Function">⟸</a><a name="3671"> </a><a name="3672" class="Symbol">(</a><a name="3673" href="#1749" class="InductiveConstructor">ax</a><a name="3675">  </a><a name="3677" href="#3677" class="Bound">p</a><a name="3678" class="Symbol">)</a><a name="3679">   </a><a name="3682" class="Symbol">=</a><a name="3683"> </a><a name="3684" href="#1234" class="InductiveConstructor">ax</a><a name="3686"> </a><a name="3687" href="#3677" class="Bound">p</a><a name="3688">
        </a><a name="3697" href="#3638" class="Function">⟸</a><a name="3698"> </a><a name="3699" class="Symbol">(</a><a name="3700" href="#1790" class="InductiveConstructor">cut</a><a name="3703"> </a><a name="3704" href="#3704" class="Bound">f</a><a name="3705"> </a><a name="3706" href="#3706" class="Bound">g</a><a name="3707" class="Symbol">)</a><a name="3708"> </a><a name="3709" class="Symbol">=</a><a name="3710"> </a><a name="3711" href="#1321" class="InductiveConstructor">⇒e</a><a name="3713"> </a><a name="3714" class="Symbol">(</a><a name="3715" href="#1272" class="InductiveConstructor">⇒i</a><a name="3717"> </a><a name="3718" class="Symbol">(</a><a name="3719" href="#3638" class="Function">⟸</a><a name="3720"> </a><a name="3721" href="#3706" class="Bound">g</a><a name="3722" class="Symbol">))</a><a name="3724"> </a><a name="3725" class="Symbol">(</a><a name="3726" href="#3638" class="Function">⟸</a><a name="3727"> </a><a name="3728" href="#3704" class="Bound">f</a><a name="3729" class="Symbol">)</a><a name="3730">
        </a><a name="3739" href="#3638" class="Function">⟸</a><a name="3740"> </a><a name="3741" class="Symbol">(</a><a name="3742" href="#1849" class="InductiveConstructor">⇒l</a><a name="3744">  </a><a name="3746" href="#3746" class="Bound">f</a><a name="3747"> </a><a name="3748" href="#3748" class="Bound">g</a><a name="3749" class="Symbol">)</a><a name="3750"> </a><a name="3751" class="Symbol">=</a><a name="3752"> </a><a name="3753" href="#1321" class="InductiveConstructor">⇒e</a><a name="3755"> </a><a name="3756" class="Symbol">(</a><a name="3757" href="#3232" class="Function">weak</a><a name="3761"> </a><a name="3762" class="Symbol">(</a><a name="3763" href="#1272" class="InductiveConstructor">⇒i</a><a name="3765"> </a><a name="3766" class="Symbol">(</a><a name="3767" href="#3638" class="Function">⟸</a><a name="3768"> </a><a name="3769" href="#3748" class="Bound">g</a><a name="3770" class="Symbol">)))</a><a name="3773"> </a><a name="3774" class="Symbol">(</a><a name="3775" href="#1321" class="InductiveConstructor">⇒e</a><a name="3777"> </a><a name="3778" href="#2410" class="InductiveConstructor">ax₀</a><a name="3781"> </a><a name="3782" class="Symbol">(</a><a name="3783" href="#3232" class="Function">weak</a><a name="3787"> </a><a name="3788" class="Symbol">(</a><a name="3789" href="#3638" class="Function">⟸</a><a name="3790"> </a><a name="3791" href="#3746" class="Bound">f</a><a name="3792" class="Symbol">)))</a><a name="3795">
        </a><a name="3804" href="#3638" class="Function">⟸</a><a name="3805"> </a><a name="3806" class="Symbol">(</a><a name="3807" href="#1916" class="InductiveConstructor">⇒r</a><a name="3809">  </a><a name="3811" href="#3811" class="Bound">f</a><a name="3812" class="Symbol">)</a><a name="3813">   </a><a name="3816" class="Symbol">=</a><a name="3817"> </a><a name="3818" href="#1272" class="InductiveConstructor">⇒i</a><a name="3820"> </a><a name="3821" class="Symbol">(</a><a name="3822" href="#3638" class="Function">⟸</a><a name="3823"> </a><a name="3824" href="#3811" class="Bound">f</a><a name="3825" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="3854" href="#3854" class="Function">cont</a><a name="3858"> </a><a name="3859" class="Symbol">:</a><a name="3860"> </a><a name="3861" class="Symbol">∀</a><a name="3862"> </a><a name="3863" class="Symbol">{</a><a name="3864" href="#3864" class="Bound">A</a><a name="3865"> </a><a name="3866" href="#3866" class="Bound">B</a><a name="3867"> </a><a name="3868" href="#3868" class="Bound">Γ</a><a name="3869" class="Symbol">}</a><a name="3870"> </a><a name="3871" class="Symbol">→</a><a name="3872"> </a><a name="3873" href="#1204" class="Datatype Operator">ND</a><a name="3875"> </a><a name="3876" href="#3864" class="Bound">A</a><a name="3877"> </a><a name="3878" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3879"> </a><a name="3880" href="#3864" class="Bound">A</a><a name="3881"> </a><a name="3882" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3883"> </a><a name="3884" href="#3868" class="Bound">Γ</a><a name="3885"> </a><a name="3886" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="3887"> </a><a name="3888" href="#3866" class="Bound">B</a><a name="3889"> </a><a name="3890" class="Symbol">→</a><a name="3891"> </a><a name="3892" href="#1204" class="Datatype Operator">ND</a><a name="3894"> </a><a name="3895" href="#3864" class="Bound">A</a><a name="3896"> </a><a name="3897" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3898"> </a><a name="3899" href="#3868" class="Bound">Γ</a><a name="3900"> </a><a name="3901" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="3902"> </a><a name="3903" href="#3866" class="Bound">B</a><a name="3904">
  </a><a name="3907" href="#3854" class="Function">cont</a><a name="3911"> </a><a name="3912" href="#3912" class="Bound">f</a><a name="3913"> </a><a name="3914" class="Symbol">=</a><a name="3915"> </a><a name="3916" href="#1321" class="InductiveConstructor">⇒e</a><a name="3918"> </a><a name="3919" class="Symbol">(</a><a name="3920" href="#1272" class="InductiveConstructor">⇒i</a><a name="3922"> </a><a name="3923" href="#3912" class="Bound">f</a><a name="3924" class="Symbol">)</a><a name="3925"> </a><a name="3926" class="Symbol">(</a><a name="3927" href="#1234" class="InductiveConstructor">ax</a><a name="3929"> </a><a name="3930" class="Symbol">(</a><a name="3931" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="3935"> </a><a name="3936" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="3940" class="Symbol">))</a></pre>

<pre class="Agda"><a name="3968" class="Keyword">open</a><a name="3972"> </a><a name="3973" class="Keyword">import</a><a name="3979"> </a><a name="3980" href="https://agda.github.io/agda-stdlib/Level.html#1" class="Module" target="_blank">Level</a><a name="3985"> </a><a name="3986" class="Keyword">using</a><a name="3991"> </a><a name="3992" class="Symbol">(</a><a name="3993">_⊔_</a><a name="3996" class="Symbol">)</a><a name="3997">

</a><a name="3999" class="Keyword">record</a><a name="4005"> </a><a name="4006" href="#4006" class="Record">Interpret</a><a name="4015"> </a><a name="4016" class="Symbol">{</a><a name="4017" href="#4017" class="Bound">a</a><a name="4018" class="Symbol">}</a><a name="4019"> </a><a name="4020" class="Symbol">{</a><a name="4021" href="#4021" class="Bound">b</a><a name="4022" class="Symbol">}</a><a name="4023"> </a><a name="4024" class="Symbol">(</a><a name="4025" href="#4025" class="Bound">A</a><a name="4026"> </a><a name="4027" class="Symbol">:</a><a name="4028"> </a><a name="4029" class="PrimitiveType">Set</a><a name="4032"> </a><a name="4033" href="#4017" class="Bound">a</a><a name="4034" class="Symbol">)</a><a name="4035"> </a><a name="4036" class="Symbol">(</a><a name="4037" href="#4037" class="Bound">B</a><a name="4038"> </a><a name="4039" class="Symbol">:</a><a name="4040"> </a><a name="4041" class="PrimitiveType">Set</a><a name="4044"> </a><a name="4045" href="#4021" class="Bound">b</a><a name="4046" class="Symbol">)</a><a name="4047"> </a><a name="4048" class="Symbol">:</a><a name="4049"> </a><a name="4050" class="PrimitiveType">Set</a><a name="4053"> </a><a name="4054" class="Symbol">(</a><a name="4055" href="#4017" class="Bound">a</a><a name="4056"> </a><a name="4057" href="https://agda.github.io/agda-stdlib/Agda.Primitive.html#626" class="Primitive Operator" target="_blank">⊔</a><a name="4058"> </a><a name="4059" href="#4021" class="Bound">b</a><a name="4060" class="Symbol">)</a><a name="4061"> </a><a name="4062" class="Keyword">where</a><a name="4067">
  </a><a name="4070" class="Keyword">field</a><a name="4075">
    </a><a name="4080" href="#4080" class="Field Operator">⟦_⟧</a><a name="4083"> </a><a name="4084" class="Symbol">:</a><a name="4085"> </a><a name="4086" href="#4025" class="Bound">A</a><a name="4087"> </a><a name="4088" class="Symbol">→</a><a name="4089"> </a><a name="4090" href="#4037" class="Bound">B</a><a name="4091">
</a><a name="4092" class="Keyword">open</a><a name="4096"> </a><a name="4097" href="#4006" class="Module">Interpret</a><a name="4106"> </a><a name="4107" class="Symbol">{{...}}</a></pre>

<pre class="Agda"><a name="4140" class="Keyword">module</a><a name="4146"> </a><a name="4147" href="#4147" class="Module">SetAntecedent-Interpret</a><a name="4170">
       </a><a name="4178" class="Symbol">(</a><a name="4179" href="#4179" class="Bound">Atom</a><a name="4183"> </a><a name="4184" class="Symbol">:</a><a name="4185"> </a><a name="4186" class="PrimitiveType">Set</a><a name="4189" class="Symbol">)</a><a name="4190"> </a><a name="4191" class="Symbol">(</a><a name="4192" href="#4192" class="Bound">intp</a><a name="4196"> </a><a name="4197" class="Symbol">:</a><a name="4198"> </a><a name="4199" href="#4006" class="Record">Interpret</a><a name="4208"> </a><a name="4209" href="#4179" class="Bound">Atom</a><a name="4213"> </a><a name="4214" class="PrimitiveType">Set</a><a name="4217" class="Symbol">)</a><a name="4218"> </a><a name="4219" class="Keyword">where</a></pre>

<pre class="Agda">  <a name="4252" class="Keyword">open</a><a name="4256"> </a><a name="4257" href="#474" class="Module">SetAntecedent</a><a name="4270"> </a><a name="4271" href="#4179" class="Bound">Atom</a><a name="4275">
  </a><a name="4278" class="Keyword">open</a><a name="4282"> </a><a name="4283" class="Keyword">import</a><a name="4289"> </a><a name="4290" href="https://agda.github.io/agda-stdlib/Data.List.html#1" class="Module" target="_blank">Data.List</a><a name="4299">            </a><a name="4311" class="Keyword">using</a><a name="4316"> </a><a name="4317" class="Symbol">(</a><a name="4318">List</a><a name="4322" class="Symbol">;</a><a name="4323"> _∷_</a><a name="4327" class="Symbol">;</a><a name="4328"> []</a><a name="4331" class="Symbol">;</a><a name="4332"> map</a><a name="4336" class="Symbol">)</a><a name="4337">
  </a><a name="4340" class="Keyword">open</a><a name="4344"> </a><a name="4345" class="Keyword">import</a><a name="4351"> </a><a name="4352" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1" class="Module" target="_blank">Data.List.Any</a><a name="4365">        </a><a name="4373" class="Keyword">using</a><a name="4378"> </a><a name="4379" class="Symbol">(</a><a name="4380" class="Keyword">module</a><a name="4386"> Membership</a><a name="4397" class="Symbol">;</a><a name="4398"> here</a><a name="4403" class="Symbol">;</a><a name="4404"> there</a><a name="4410" class="Symbol">)</a><a name="4411">
  </a><a name="4414" class="Keyword">open</a><a name="4418"> </a><a name="4419" class="Keyword">import</a><a name="4425"> </a><a name="4426" href="https://agda.github.io/agda-stdlib/Function.Equality.html#1" class="Module" target="_blank">Function.Equality</a><a name="4443">    </a><a name="4447" class="Keyword">using</a><a name="4452"> </a><a name="4453" class="Symbol">(</a><a name="4454">_⟨$⟩_</a><a name="4459" class="Symbol">)</a><a name="4460">
  </a><a name="4463" class="Keyword">open</a><a name="4467"> </a><a name="4468" class="Keyword">import</a><a name="4474"> </a><a name="4475" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#1" class="Module" target="_blank">Function.Equivalence</a><a name="4495"> </a><a name="4496" class="Keyword">using</a><a name="4501"> </a><a name="4502" class="Symbol">(</a><a name="4503" class="Keyword">module</a><a name="4509"> Equivalence</a><a name="4521" class="Symbol">)</a><a name="4522">
  </a><a name="4525" class="Keyword">open</a><a name="4529"> </a><a name="4530" class="Keyword">import</a><a name="4536"> </a><a name="4537" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1" class="Module" target="_blank">Relation.Binary.PropositionalEquality</a><a name="4574">
  </a><a name="4577" class="Keyword">open</a><a name="4581"> </a><a name="4582" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2298" class="Module" target="_blank">Membership</a><a name="4592"> </a><a name="4593" class="Symbol">(</a><a name="4594" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1526" class="Function" target="_blank">setoid</a><a name="4600"> </a><a name="4601" href="#539" class="Datatype">Type</a><a name="4605" class="Symbol">)</a><a name="4606">    </a><a name="4610" class="Keyword">using</a><a name="4615"> </a><a name="4616" class="Symbol">(</a><a name="4617">_∈_</a><a name="4620" class="Symbol">)</a><a name="4621">
  </a><a name="4624" class="Keyword">open</a><a name="4628"> </a><a name="4629" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#488" class="Module" target="_blank">Equivalence</a><a name="4640">                 </a><a name="4657" class="Keyword">using</a><a name="4662"> </a><a name="4663" class="Symbol">(</a><a name="4664">to</a><a name="4666" class="Symbol">;</a><a name="4667"> from</a><a name="4672" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="4701" class="Keyword">instance</a><a name="4709">
    </a><a name="4714" href="#4714" class="Function">intpType</a><a name="4722"> </a><a name="4723" class="Symbol">:</a><a name="4724"> </a><a name="4725" href="#4006" class="Record">Interpret</a><a name="4734"> </a><a name="4735" href="#539" class="Datatype">Type</a><a name="4739"> </a><a name="4740" class="PrimitiveType">Set</a><a name="4743">
    </a><a name="4748" href="#4714" class="Function">intpType</a><a name="4756"> </a><a name="4757" class="Symbol">=</a><a name="4758"> </a><a name="4759" class="Keyword">record</a><a name="4765"> </a><a name="4766" class="Symbol">{</a><a name="4767"> </a><a name="4768" class="Field Operator">⟦_⟧</a><a name="4771"> </a><a name="4772" class="Symbol">=</a><a name="4773"> </a><a name="4774" href="#4801" class="Function Operator">⟦_⟧′</a><a name="4778"> </a><a name="4779" class="Symbol">}</a><a name="4780">
      </a><a name="4787" class="Keyword">where</a><a name="4792">
        </a><a name="4801" href="#4801" class="Function Operator">⟦_⟧′</a><a name="4805">  </a><a name="4807" class="Symbol">:</a><a name="4808"> </a><a name="4809" href="#539" class="Datatype">Type</a><a name="4813"> </a><a name="4814" class="Symbol">→</a><a name="4815"> </a><a name="4816" class="PrimitiveType">Set</a><a name="4819">
        </a><a name="4828" href="#4801" class="Function Operator">⟦</a><a name="4829"> </a><a name="4830" href="#560" class="InductiveConstructor">El</a><a name="4832">  </a><a name="4834" href="#4834" class="Bound">A</a><a name="4835"> </a><a name="4836" href="#4801" class="Function Operator">⟧′</a><a name="4838"> </a><a name="4839" class="Symbol">=</a><a name="4840"> </a><a name="4841" href="#4080" class="Field Operator">⟦</a><a name="4842"> </a><a name="4843" href="#4834" class="Bound">A</a><a name="4844"> </a><a name="4845" href="#4080" class="Field Operator">⟧</a><a name="4846">
        </a><a name="4855" href="#4801" class="Function Operator">⟦</a><a name="4856"> </a><a name="4857" href="#4857" class="Bound">A</a><a name="4858"> </a><a name="4859" href="#582" class="InductiveConstructor Operator">⇒</a><a name="4860"> </a><a name="4861" href="#4861" class="Bound">B</a><a name="4862"> </a><a name="4863" href="#4801" class="Function Operator">⟧′</a><a name="4865"> </a><a name="4866" class="Symbol">=</a><a name="4867"> </a><a name="4868" href="#4801" class="Function Operator">⟦</a><a name="4869"> </a><a name="4870" href="#4857" class="Bound">A</a><a name="4871"> </a><a name="4872" href="#4801" class="Function Operator">⟧′</a><a name="4874"> </a><a name="4875" class="Symbol">→</a><a name="4876"> </a><a name="4877" href="#4801" class="Function Operator">⟦</a><a name="4878"> </a><a name="4879" href="#4861" class="Bound">B</a><a name="4880"> </a><a name="4881" href="#4801" class="Function Operator">⟧′</a></pre>

<pre class="Agda">  <a name="4911" class="Keyword">data</a><a name="4915"> </a><a name="4916" href="#4916" class="Datatype">Env</a><a name="4919"> </a><a name="4920" class="Symbol">:</a><a name="4921"> </a><a name="4922" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="4926"> </a><a name="4927" href="#539" class="Datatype">Type</a><a name="4931"> </a><a name="4932" class="Symbol">→</a><a name="4933"> </a><a name="4934" class="PrimitiveType">Set</a><a name="4937"> </a><a name="4938" class="Keyword">where</a><a name="4943">
    </a><a name="4948" href="#4948" class="InductiveConstructor">[]</a><a name="4950">  </a><a name="4952" class="Symbol">:</a><a name="4953"> </a><a name="4954" href="#4916" class="Datatype">Env</a><a name="4957"> </a><a name="4958" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="4960">
    </a><a name="4965" href="#4965" class="InductiveConstructor Operator">_∷_</a><a name="4968"> </a><a name="4969" class="Symbol">:</a><a name="4970"> </a><a name="4971" class="Symbol">{</a><a name="4972" href="#4972" class="Bound">A</a><a name="4973"> </a><a name="4974" class="Symbol">:</a><a name="4975"> </a><a name="4976" href="#539" class="Datatype">Type</a><a name="4980" class="Symbol">}</a><a name="4981"> </a><a name="4982" class="Symbol">{</a><a name="4983" href="#4983" class="Bound">Γ</a><a name="4984"> </a><a name="4985" class="Symbol">:</a><a name="4986"> </a><a name="4987" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="4991"> </a><a name="4992" href="#539" class="Datatype">Type</a><a name="4996" class="Symbol">}</a><a name="4997">
        </a><a name="5006" class="Symbol">→</a><a name="5007"> </a><a name="5008" href="#4080" class="Field Operator">⟦</a><a name="5009"> </a><a name="5010" href="#4972" class="Bound">A</a><a name="5011"> </a><a name="5012" href="#4080" class="Field Operator">⟧</a><a name="5013"> </a><a name="5014" class="Symbol">→</a><a name="5015"> </a><a name="5016" href="#4916" class="Datatype">Env</a><a name="5019"> </a><a name="5020" href="#4983" class="Bound">Γ</a><a name="5021"> </a><a name="5022" class="Symbol">→</a><a name="5023"> </a><a name="5024" href="#4916" class="Datatype">Env</a><a name="5027"> </a><a name="5028" class="Symbol">(</a><a name="5029" href="#4972" class="Bound">A</a><a name="5030"> </a><a name="5031" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="5032"> </a><a name="5033" href="#4983" class="Bound">Γ</a><a name="5034" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="5063" href="#5063" class="Function">lookup</a><a name="5069"> </a><a name="5070" class="Symbol">:</a><a name="5071"> </a><a name="5072" class="Symbol">∀</a><a name="5073"> </a><a name="5074" class="Symbol">{</a><a name="5075" href="#5075" class="Bound">A</a><a name="5076"> </a><a name="5077" href="#5077" class="Bound">Γ</a><a name="5078" class="Symbol">}</a><a name="5079"> </a><a name="5080" class="Symbol">→</a><a name="5081"> </a><a name="5082" href="#5075" class="Bound">A</a><a name="5083"> </a><a name="5084" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="5085"> </a><a name="5086" href="#5077" class="Bound">Γ</a><a name="5087"> </a><a name="5088" class="Symbol">→</a><a name="5089"> </a><a name="5090" href="#4916" class="Datatype">Env</a><a name="5093"> </a><a name="5094" href="#5077" class="Bound">Γ</a><a name="5095"> </a><a name="5096" class="Symbol">→</a><a name="5097"> </a><a name="5098" href="#4080" class="Field Operator">⟦</a><a name="5099"> </a><a name="5100" href="#5075" class="Bound">A</a><a name="5101"> </a><a name="5102" href="#4080" class="Field Operator">⟧</a><a name="5103">
  </a><a name="5106" href="#5063" class="Function">lookup</a><a name="5112"> </a><a name="5113" class="Symbol">(</a><a name="5114" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="5118">  </a><a name="5120" href="#5120" class="Bound">p</a><a name="5121" class="Symbol">)</a><a name="5122"> </a><a name="5123" class="Symbol">(</a><a name="5124" href="#5124" class="Bound">x</a><a name="5125"> </a><a name="5126" href="#4965" class="InductiveConstructor Operator">∷</a><a name="5127"> </a><a name="5128" class="Symbol">_)</a><a name="5130"> </a><a name="5131" class="Keyword">rewrite</a><a name="5138"> </a><a name="5139" href="#5120" class="Bound">p</a><a name="5140"> </a><a name="5141" class="Symbol">=</a><a name="5142"> </a><a name="5143" href="#5124" class="Bound">x</a><a name="5144">
  </a><a name="5147" href="#5063" class="Function">lookup</a><a name="5153"> </a><a name="5154" class="Symbol">(</a><a name="5155" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="5160"> </a><a name="5161" href="#5161" class="Bound">p</a><a name="5162" class="Symbol">)</a><a name="5163"> </a><a name="5164" class="Symbol">(_</a><a name="5166"> </a><a name="5167" href="#4965" class="InductiveConstructor Operator">∷</a><a name="5168"> </a><a name="5169" href="#5169" class="Bound">e</a><a name="5170" class="Symbol">)</a><a name="5171"> </a><a name="5172" class="Symbol">=</a><a name="5173"> </a><a name="5174" href="#5063" class="Function">lookup</a><a name="5180"> </a><a name="5181" href="#5161" class="Bound">p</a><a name="5182"> </a><a name="5183" href="#5169" class="Bound">e</a></pre>

<pre class="Agda">  <a name="5212" class="Keyword">instance</a><a name="5220">
    </a><a name="5225" href="#5225" class="Function">intpSequent</a><a name="5236"> </a><a name="5237" class="Symbol">:</a><a name="5238"> </a><a name="5239" href="#4006" class="Record">Interpret</a><a name="5248"> </a><a name="5249" href="#1100" class="Datatype">Sequent</a><a name="5256"> </a><a name="5257" class="PrimitiveType">Set</a><a name="5260">
    </a><a name="5265" href="#5225" class="Function">intpSequent</a><a name="5276"> </a><a name="5277" class="Symbol">=</a><a name="5278"> </a><a name="5279" class="Keyword">record</a><a name="5285"> </a><a name="5286" class="Symbol">{</a><a name="5287"> </a><a name="5288" class="Field Operator">⟦_⟧</a><a name="5291"> </a><a name="5292" class="Symbol">=</a><a name="5293"> </a><a name="5294" href="#5321" class="Function Operator">⟦_⟧′</a><a name="5298"> </a><a name="5299" class="Symbol">}</a><a name="5300">
      </a><a name="5307" class="Keyword">where</a><a name="5312">
        </a><a name="5321" href="#5321" class="Function Operator">⟦_⟧′</a><a name="5325"> </a><a name="5326" class="Symbol">:</a><a name="5327"> </a><a name="5328" href="#1100" class="Datatype">Sequent</a><a name="5335"> </a><a name="5336" class="Symbol">→</a><a name="5337"> </a><a name="5338" class="PrimitiveType">Set</a><a name="5341">
        </a><a name="5350" href="#5321" class="Function Operator">⟦</a><a name="5351"> </a><a name="5352" href="#5352" class="Bound">Γ</a><a name="5353"> </a><a name="5354" href="#1124" class="InductiveConstructor Operator">⊢</a><a name="5355"> </a><a name="5356" href="#5356" class="Bound">A</a><a name="5357"> </a><a name="5358" href="#5321" class="Function Operator">⟧′</a><a name="5360"> </a><a name="5361" class="Symbol">=</a><a name="5362"> </a><a name="5363" href="#4916" class="Datatype">Env</a><a name="5366"> </a><a name="5367" href="#5352" class="Bound">Γ</a><a name="5368"> </a><a name="5369" class="Symbol">→</a><a name="5370"> </a><a name="5371" href="#4080" class="Field Operator">⟦</a><a name="5372"> </a><a name="5373" href="#5356" class="Bound">A</a><a name="5374"> </a><a name="5375" href="#4080" class="Field Operator">⟧</a></pre>

<pre class="Agda">  <a name="5404" class="Keyword">instance</a><a name="5412">
    </a><a name="5417" href="#5417" class="Function">intpND</a><a name="5423"> </a><a name="5424" class="Symbol">:</a><a name="5425"> </a><a name="5426" class="Symbol">∀</a><a name="5427"> </a><a name="5428" class="Symbol">{</a><a name="5429" href="#5429" class="Bound">S</a><a name="5430" class="Symbol">}</a><a name="5431"> </a><a name="5432" class="Symbol">→</a><a name="5433"> </a><a name="5434" href="#4006" class="Record">Interpret</a><a name="5443"> </a><a name="5444" class="Symbol">(</a><a name="5445" href="#1204" class="Datatype Operator">ND</a><a name="5447"> </a><a name="5448" href="#5429" class="Bound">S</a><a name="5449" class="Symbol">)</a><a name="5450"> </a><a name="5451" href="#4080" class="Field Operator">⟦</a><a name="5452"> </a><a name="5453" href="#5429" class="Bound">S</a><a name="5454"> </a><a name="5455" href="#4080" class="Field Operator">⟧</a><a name="5456">
    </a><a name="5461" href="#5417" class="Function">intpND</a><a name="5467"> </a><a name="5468" class="Symbol">=</a><a name="5469"> </a><a name="5470" class="Keyword">record</a><a name="5476"> </a><a name="5477" class="Symbol">{</a><a name="5478"> </a><a name="5479" class="Field Operator">⟦_⟧</a><a name="5482"> </a><a name="5483" class="Symbol">=</a><a name="5484"> </a><a name="5485" href="#5512" class="Function Operator">⟦_⟧′</a><a name="5489"> </a><a name="5490" class="Symbol">}</a><a name="5491">
      </a><a name="5498" class="Keyword">where</a><a name="5503">
        </a><a name="5512" href="#5512" class="Function Operator">⟦_⟧′</a><a name="5516"> </a><a name="5517" class="Symbol">:</a><a name="5518"> </a><a name="5519" class="Symbol">∀</a><a name="5520"> </a><a name="5521" class="Symbol">{</a><a name="5522" href="#5522" class="Bound">S</a><a name="5523" class="Symbol">}</a><a name="5524"> </a><a name="5525" class="Symbol">→</a><a name="5526"> </a><a name="5527" href="#1204" class="Datatype Operator">ND</a><a name="5529"> </a><a name="5530" href="#5522" class="Bound">S</a><a name="5531"> </a><a name="5532" class="Symbol">→</a><a name="5533"> </a><a name="5534" href="#4080" class="Field Operator">⟦</a><a name="5535"> </a><a name="5536" href="#5522" class="Bound">S</a><a name="5537"> </a><a name="5538" href="#4080" class="Field Operator">⟧</a><a name="5539">
        </a><a name="5548" href="#5512" class="Function Operator">⟦</a><a name="5549"> </a><a name="5550" href="#1234" class="InductiveConstructor">ax</a><a name="5552"> </a><a name="5553" href="#5553" class="Bound">p</a><a name="5554">   </a><a name="5557" href="#5512" class="Function Operator">⟧′</a><a name="5559"> </a><a name="5560" href="#5560" class="Bound">e</a><a name="5561"> </a><a name="5562" class="Symbol">=</a><a name="5563"> </a><a name="5564" href="#5063" class="Function">lookup</a><a name="5570"> </a><a name="5571" href="#5553" class="Bound">p</a><a name="5572"> </a><a name="5573" href="#5560" class="Bound">e</a><a name="5574">
        </a><a name="5583" href="#5512" class="Function Operator">⟦</a><a name="5584"> </a><a name="5585" href="#1272" class="InductiveConstructor">⇒i</a><a name="5587"> </a><a name="5588" href="#5588" class="Bound">f</a><a name="5589">   </a><a name="5592" href="#5512" class="Function Operator">⟧′</a><a name="5594"> </a><a name="5595" href="#5595" class="Bound">e</a><a name="5596"> </a><a name="5597" class="Symbol">=</a><a name="5598"> </a><a name="5599" class="Symbol">λ</a><a name="5600"> </a><a name="5601" href="#5601" class="Bound">x</a><a name="5602"> </a><a name="5603" class="Symbol">→</a><a name="5604"> </a><a name="5605" href="#5512" class="Function Operator">⟦</a><a name="5606"> </a><a name="5607" href="#5588" class="Bound">f</a><a name="5608"> </a><a name="5609" href="#5512" class="Function Operator">⟧′</a><a name="5611"> </a><a name="5612" class="Symbol">(</a><a name="5613" href="#5601" class="Bound">x</a><a name="5614"> </a><a name="5615" href="#4965" class="InductiveConstructor Operator">∷</a><a name="5616"> </a><a name="5617" href="#5595" class="Bound">e</a><a name="5618" class="Symbol">)</a><a name="5619">
        </a><a name="5628" href="#5512" class="Function Operator">⟦</a><a name="5629"> </a><a name="5630" href="#1321" class="InductiveConstructor">⇒e</a><a name="5632"> </a><a name="5633" href="#5633" class="Bound">f</a><a name="5634"> </a><a name="5635" href="#5635" class="Bound">g</a><a name="5636"> </a><a name="5637" href="#5512" class="Function Operator">⟧′</a><a name="5639"> </a><a name="5640" href="#5640" class="Bound">e</a><a name="5641"> </a><a name="5642" class="Symbol">=</a><a name="5643"> </a><a name="5644" class="Symbol">(</a><a name="5645" href="#5512" class="Function Operator">⟦</a><a name="5646"> </a><a name="5647" href="#5633" class="Bound">f</a><a name="5648"> </a><a name="5649" href="#5512" class="Function Operator">⟧′</a><a name="5651"> </a><a name="5652" href="#5640" class="Bound">e</a><a name="5653" class="Symbol">)</a><a name="5654"> </a><a name="5655" class="Symbol">(</a><a name="5656" href="#5512" class="Function Operator">⟦</a><a name="5657"> </a><a name="5658" href="#5635" class="Bound">g</a><a name="5659"> </a><a name="5660" href="#5512" class="Function Operator">⟧′</a><a name="5662"> </a><a name="5663" href="#5640" class="Bound">e</a><a name="5664" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="5693" class="Keyword">instance</a><a name="5701">
    </a><a name="5706" href="#5706" class="Function">intpSC</a><a name="5712"> </a><a name="5713" class="Symbol">:</a><a name="5714"> </a><a name="5715" class="Symbol">∀</a><a name="5716"> </a><a name="5717" class="Symbol">{</a><a name="5718" href="#5718" class="Bound">S</a><a name="5719" class="Symbol">}</a><a name="5720"> </a><a name="5721" class="Symbol">→</a><a name="5722"> </a><a name="5723" href="#4006" class="Record">Interpret</a><a name="5732"> </a><a name="5733" class="Symbol">(</a><a name="5734" href="#1719" class="Datatype Operator">SC</a><a name="5736"> </a><a name="5737" href="#5718" class="Bound">S</a><a name="5738" class="Symbol">)</a><a name="5739"> </a><a name="5740" href="#4080" class="Field Operator">⟦</a><a name="5741"> </a><a name="5742" href="#5718" class="Bound">S</a><a name="5743"> </a><a name="5744" href="#4080" class="Field Operator">⟧</a><a name="5745">
    </a><a name="5750" href="#5706" class="Function">intpSC</a><a name="5756"> </a><a name="5757" class="Symbol">=</a><a name="5758"> </a><a name="5759" class="Keyword">record</a><a name="5765"> </a><a name="5766" class="Symbol">{</a><a name="5767"> </a><a name="5768" class="Field Operator">⟦_⟧</a><a name="5771"> </a><a name="5772" class="Symbol">=</a><a name="5773"> </a><a name="5774" href="#5801" class="Function Operator">⟦_⟧′</a><a name="5778"> </a><a name="5779" class="Symbol">}</a><a name="5780">
      </a><a name="5787" class="Keyword">where</a><a name="5792">
        </a><a name="5801" href="#5801" class="Function Operator">⟦_⟧′</a><a name="5805"> </a><a name="5806" class="Symbol">:</a><a name="5807"> </a><a name="5808" class="Symbol">∀</a><a name="5809"> </a><a name="5810" class="Symbol">{</a><a name="5811" href="#5811" class="Bound">S</a><a name="5812" class="Symbol">}</a><a name="5813"> </a><a name="5814" class="Symbol">→</a><a name="5815"> </a><a name="5816" href="#1719" class="Datatype Operator">SC</a><a name="5818"> </a><a name="5819" href="#5811" class="Bound">S</a><a name="5820"> </a><a name="5821" class="Symbol">→</a><a name="5822"> </a><a name="5823" href="#4080" class="Field Operator">⟦</a><a name="5824"> </a><a name="5825" href="#5811" class="Bound">S</a><a name="5826"> </a><a name="5827" href="#4080" class="Field Operator">⟧</a><a name="5828">
        </a><a name="5837" href="#5801" class="Function Operator">⟦</a><a name="5838"> </a><a name="5839" href="#1749" class="InductiveConstructor">ax</a><a name="5841">  </a><a name="5843" href="#5843" class="Bound">p</a><a name="5844">   </a><a name="5847" href="#5801" class="Function Operator">⟧′</a><a name="5849">      </a><a name="5855" href="#5855" class="Bound">e</a><a name="5856">  </a><a name="5858" class="Symbol">=</a><a name="5859"> </a><a name="5860" href="#5063" class="Function">lookup</a><a name="5866"> </a><a name="5867" href="#5843" class="Bound">p</a><a name="5868"> </a><a name="5869" href="#5855" class="Bound">e</a><a name="5870">
        </a><a name="5879" href="#5801" class="Function Operator">⟦</a><a name="5880"> </a><a name="5881" href="#1790" class="InductiveConstructor">cut</a><a name="5884"> </a><a name="5885" href="#5885" class="Bound">f</a><a name="5886"> </a><a name="5887" href="#5887" class="Bound">g</a><a name="5888"> </a><a name="5889" href="#5801" class="Function Operator">⟧′</a><a name="5891">      </a><a name="5897" href="#5897" class="Bound">e</a><a name="5898">  </a><a name="5900" class="Symbol">=</a><a name="5901"> </a><a name="5902" href="#5801" class="Function Operator">⟦</a><a name="5903"> </a><a name="5904" href="#5887" class="Bound">g</a><a name="5905"> </a><a name="5906" href="#5801" class="Function Operator">⟧′</a><a name="5908"> </a><a name="5909" class="Symbol">(</a><a name="5910" href="#5801" class="Function Operator">⟦</a><a name="5911"> </a><a name="5912" href="#5885" class="Bound">f</a><a name="5913"> </a><a name="5914" href="#5801" class="Function Operator">⟧′</a><a name="5916"> </a><a name="5917" href="#5897" class="Bound">e</a><a name="5918"> </a><a name="5919" href="#4965" class="InductiveConstructor Operator">∷</a><a name="5920"> </a><a name="5921" href="#5897" class="Bound">e</a><a name="5922" class="Symbol">)</a><a name="5923">
        </a><a name="5932" href="#5801" class="Function Operator">⟦</a><a name="5933"> </a><a name="5934" href="#1849" class="InductiveConstructor">⇒l</a><a name="5936">  </a><a name="5938" href="#5938" class="Bound">f</a><a name="5939"> </a><a name="5940" href="#5940" class="Bound">g</a><a name="5941"> </a><a name="5942" href="#5801" class="Function Operator">⟧′</a><a name="5944"> </a><a name="5945" class="Symbol">(</a><a name="5946" href="#5946" class="Bound">h</a><a name="5947"> </a><a name="5948" href="#4965" class="InductiveConstructor Operator">∷</a><a name="5949"> </a><a name="5950" href="#5950" class="Bound">e</a><a name="5951" class="Symbol">)</a><a name="5952"> </a><a name="5953" class="Symbol">=</a><a name="5954"> </a><a name="5955" href="#5801" class="Function Operator">⟦</a><a name="5956"> </a><a name="5957" href="#5940" class="Bound">g</a><a name="5958"> </a><a name="5959" href="#5801" class="Function Operator">⟧′</a><a name="5961"> </a><a name="5962" class="Symbol">(</a><a name="5963" href="#5946" class="Bound">h</a><a name="5964"> </a><a name="5965" class="Symbol">(</a><a name="5966" href="#5801" class="Function Operator">⟦</a><a name="5967"> </a><a name="5968" href="#5938" class="Bound">f</a><a name="5969"> </a><a name="5970" href="#5801" class="Function Operator">⟧′</a><a name="5972"> </a><a name="5973" href="#5950" class="Bound">e</a><a name="5974" class="Symbol">)</a><a name="5975"> </a><a name="5976" href="#4965" class="InductiveConstructor Operator">∷</a><a name="5977"> </a><a name="5978" href="#5950" class="Bound">e</a><a name="5979" class="Symbol">)</a><a name="5980">
        </a><a name="5989" href="#5801" class="Function Operator">⟦</a><a name="5990"> </a><a name="5991" href="#1916" class="InductiveConstructor">⇒r</a><a name="5993">  </a><a name="5995" href="#5995" class="Bound">f</a><a name="5996">   </a><a name="5999" href="#5801" class="Function Operator">⟧′</a><a name="6001">      </a><a name="6007" href="#6007" class="Bound">e</a><a name="6008">  </a><a name="6010" class="Symbol">=</a><a name="6011"> </a><a name="6012" class="Symbol">λ</a><a name="6013"> </a><a name="6014" href="#6014" class="Bound">x</a><a name="6015"> </a><a name="6016" class="Symbol">→</a><a name="6017"> </a><a name="6018" href="#5801" class="Function Operator">⟦</a><a name="6019"> </a><a name="6020" href="#5995" class="Bound">f</a><a name="6021"> </a><a name="6022" href="#5801" class="Function Operator">⟧′</a><a name="6024"> </a><a name="6025" class="Symbol">(</a><a name="6026" href="#6014" class="Bound">x</a><a name="6027"> </a><a name="6028" href="#4965" class="InductiveConstructor Operator">∷</a><a name="6029"> </a><a name="6030" href="#6007" class="Bound">e</a><a name="6031" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="6060" href="#6060" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6069"> </a><a name="6070" class="Symbol">:</a><a name="6071"> </a><a name="6072" class="Symbol">∀</a><a name="6073"> </a><a name="6074" class="Symbol">{</a><a name="6075" href="#6075" class="Bound">S</a><a name="6076" class="Symbol">}</a><a name="6077"> </a><a name="6078" class="Symbol">(</a><a name="6079" href="#6079" class="Bound">f</a><a name="6080"> </a><a name="6081" class="Symbol">:</a><a name="6082"> </a><a name="6083" href="#1204" class="Datatype Operator">ND</a><a name="6085"> </a><a name="6086" href="#6075" class="Bound">S</a><a name="6087" class="Symbol">)</a><a name="6088"> </a><a name="6089" class="Symbol">→</a><a name="6090"> </a><a name="6091" href="#4080" class="Field Operator">⟦</a><a name="6092"> </a><a name="6093" href="#6079" class="Bound">f</a><a name="6094"> </a><a name="6095" href="#4080" class="Field Operator">⟧</a><a name="6096"> </a><a name="6097" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4497" class="Datatype Operator" target="_blank">≡</a><a name="6098"> </a><a name="6099" href="#4080" class="Field Operator">⟦</a><a name="6100"> </a><a name="6101" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#638" class="Field" target="_blank">to</a><a name="6103"> </a><a name="6104" href="#3425" class="Function">ND⇔SC</a><a name="6109"> </a><a name="6110" href="https://agda.github.io/agda-stdlib/Function.Equality.html#681" class="Field Operator" target="_blank">⟨$⟩</a><a name="6113"> </a><a name="6114" href="#6079" class="Bound">f</a><a name="6115"> </a><a name="6116" href="#4080" class="Field Operator">⟧</a><a name="6117">
  </a><a name="6120" href="#6060" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6129"> </a><a name="6130" class="Symbol">(</a><a name="6131" href="#1234" class="InductiveConstructor">ax</a><a name="6133"> </a><a name="6134" class="Symbol">_)</a><a name="6136">   </a><a name="6139" class="Symbol">=</a><a name="6140"> </a><a name="6141" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="6145">
  </a><a name="6148" href="#6060" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6157"> </a><a name="6158" class="Symbol">(</a><a name="6159" href="#1272" class="InductiveConstructor">⇒i</a><a name="6161"> </a><a name="6162" href="#6162" class="Bound">f</a><a name="6163" class="Symbol">)</a><a name="6164">   </a><a name="6167" class="Symbol">=</a><a name="6168"> </a><a name="6169" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1036" class="Function" target="_blank">cong</a><a name="6173">  </a><a name="6175" class="Symbol">(λ</a><a name="6177"> </a><a name="6178" href="#6178" class="Bound">f</a><a name="6179"> </a><a name="6180" href="#6180" class="Bound">e</a><a name="6181"> </a><a name="6182" href="#6182" class="Bound">x</a><a name="6183"> </a><a name="6184" class="Symbol">→</a><a name="6185"> </a><a name="6186" href="#6178" class="Bound">f</a><a name="6187"> </a><a name="6188" class="Symbol">(</a><a name="6189" href="#6182" class="Bound">x</a><a name="6190"> </a><a name="6191" href="#4965" class="InductiveConstructor Operator">∷</a><a name="6192"> </a><a name="6193" href="#6180" class="Bound">e</a><a name="6194" class="Symbol">))</a><a name="6196"> </a><a name="6197" class="Symbol">(</a><a name="6198" href="#6060" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6207"> </a><a name="6208" href="#6162" class="Bound">f</a><a name="6209" class="Symbol">)</a><a name="6210">
  </a><a name="6213" href="#6060" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6222"> </a><a name="6223" class="Symbol">(</a><a name="6224" href="#1321" class="InductiveConstructor">⇒e</a><a name="6226"> </a><a name="6227" href="#6227" class="Bound">f</a><a name="6228"> </a><a name="6229" href="#6229" class="Bound">g</a><a name="6230" class="Symbol">)</a><a name="6231"> </a><a name="6232" class="Symbol">=</a><a name="6233"> </a><a name="6234" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1274" class="Function" target="_blank">cong₂</a><a name="6239"> </a><a name="6240" class="Symbol">(λ</a><a name="6242"> </a><a name="6243" href="#6243" class="Bound">f</a><a name="6244"> </a><a name="6245" href="#6245" class="Bound">g</a><a name="6246"> </a><a name="6247" href="#6247" class="Bound">e</a><a name="6248"> </a><a name="6249" class="Symbol">→</a><a name="6250"> </a><a name="6251" href="#6243" class="Bound">f</a><a name="6252"> </a><a name="6253" href="#6247" class="Bound">e</a><a name="6254"> </a><a name="6255" class="Symbol">(</a><a name="6256" href="#6245" class="Bound">g</a><a name="6257"> </a><a name="6258" href="#6247" class="Bound">e</a><a name="6259" class="Symbol">))</a><a name="6261"> </a><a name="6262" class="Symbol">(</a><a name="6263" href="#6060" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6272"> </a><a name="6273" href="#6227" class="Bound">f</a><a name="6274" class="Symbol">)</a><a name="6275"> </a><a name="6276" class="Symbol">(</a><a name="6277" href="#6060" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6286"> </a><a name="6287" href="#6229" class="Bound">g</a><a name="6288" class="Symbol">)</a></pre>

<!--
  ⟦ND⟧⇐⟦SC⟧ : ∀ {S} (f : SC S) → ⟦ f ⟧ ≡ ⟦ from ND⇔SC ⟨$⟩ f ⟧
  ⟦ND⟧⇐⟦SC⟧ (ax  _)   = refl
  ⟦ND⟧⇐⟦SC⟧ (cut f g) = cong₂ (λ f g e → g (f e ∷ e)) (⟦ND⟧⇐⟦SC⟧ f) (⟦ND⟧⇐⟦SC⟧ g)
  ⟦ND⟧⇐⟦SC⟧ (⇒l  f g) = {!!}
  ⟦ND⟧⇐⟦SC⟧ (⇒r  f)   = cong  (λ f e x → f (x ∷ e)) (⟦ND⟧⇐⟦SC⟧ f)
-->
