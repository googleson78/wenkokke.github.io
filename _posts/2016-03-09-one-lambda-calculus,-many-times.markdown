---
title      : One λ-calculus, many times...
date       : 2016-03-02 12:00:00
categories : [agda]
tags       : [agda]
---

I mentioned one another type of post which you'll find on any Agda
user's blog: implementing the λ-calculus. If you simply google "Agda
lambda calculus", you'll easily find tens of examples.

<div style="display:none;">
<pre class="Agda"><a name="359" class="Keyword">module</a><a name="365"> </a><a name="366" href="#1" class="Module">2016-03-09-one-lambda-calculus,-many-times</a><a name="408"> </a><a name="409" class="Keyword">where</a></pre>
</div>


<pre class="Agda"><a name="448" class="Keyword">module</a><a name="454"> </a><a name="455" href="#455" class="Module">SetAntecedent</a><a name="468"> </a><a name="469" class="Symbol">(</a><a name="470" href="#470" class="Bound">Atom</a><a name="474"> </a><a name="475" class="Symbol">:</a><a name="476"> </a><a name="477" class="PrimitiveType">Set</a><a name="480" class="Symbol">)</a><a name="481"> </a><a name="482" class="Keyword">where</a></pre>

<pre class="Agda">  <a name="515" class="Keyword">data</a><a name="519"> </a><a name="520" href="#366" class="Module">Type</a><a name="524"> </a><a name="525" class="Symbol">:</a><a name="526"> </a><a name="527" class="PrimitiveType">Set</a><a name="530"> </a><a name="531" class="Keyword">where</a><a name="536">
    </a><a name="541" href="#541" class="InductiveConstructor">El</a><a name="543">  </a><a name="545" class="Symbol">:</a><a name="546"> </a><a name="547" href="#470" class="Bound">Atom</a><a name="551"> </a><a name="552" class="Symbol">→</a><a name="553"> </a><a name="554" href="#520" class="Datatype">Type</a><a name="558">
    </a><a name="563" href="#563" class="InductiveConstructor Operator">_⇒_</a><a name="566"> </a><a name="567" class="Symbol">:</a><a name="568"> </a><a name="569" href="#520" class="Datatype">Type</a><a name="573"> </a><a name="574" class="Symbol">→</a><a name="575"> </a><a name="576" href="#520" class="Datatype">Type</a><a name="580"> </a><a name="581" class="Symbol">→</a><a name="582"> </a><a name="583" href="#520" class="Datatype">Type</a></pre>


<pre class="Agda">  <a name="616" class="Keyword">open</a><a name="620"> </a><a name="621" class="Keyword">import</a><a name="627"> </a><a name="628" href="https://agda.github.io/agda-stdlib/Data.Nat.html#1" class="Module" target="_blank">Data.Nat</a><a name="636">             </a><a name="649" class="Keyword">using</a><a name="654"> </a><a name="655" class="Symbol">(</a><a name="656">ℕ</a><a name="657" class="Symbol">;</a><a name="658"> suc</a><a name="662" class="Symbol">;</a><a name="663"> zero</a><a name="668" class="Symbol">)</a><a name="669">
  </a><a name="672" class="Keyword">open</a><a name="676"> </a><a name="677" class="Keyword">import</a><a name="683"> </a><a name="684" href="https://agda.github.io/agda-stdlib/Data.Fin.html#1" class="Module" target="_blank">Data.Fin</a><a name="692">             </a><a name="705" class="Keyword">using</a><a name="710"> </a><a name="711" class="Symbol">(</a><a name="712">Fin</a><a name="715" class="Symbol">;</a><a name="716"> suc</a><a name="720" class="Symbol">;</a><a name="721"> zero</a><a name="726" class="Symbol">)</a><a name="727">
  </a><a name="730" class="Keyword">open</a><a name="734"> </a><a name="735" class="Keyword">import</a><a name="741"> </a><a name="742" href="https://agda.github.io/agda-stdlib/Data.List.html#1" class="Module" target="_blank">Data.List</a><a name="751">            </a><a name="763" class="Keyword">using</a><a name="768"> </a><a name="769" class="Symbol">(</a><a name="770">List</a><a name="774" class="Symbol">;</a><a name="775"> _∷_</a><a name="779" class="Symbol">;</a><a name="780"> []</a><a name="783" class="Symbol">;</a><a name="784"> _++_</a><a name="789" class="Symbol">)</a><a name="790">
  </a><a name="793" class="Keyword">open</a><a name="797"> </a><a name="798" class="Keyword">import</a><a name="804"> </a><a name="805" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1" class="Module" target="_blank">Data.List.Any</a><a name="818">        </a><a name="826" class="Keyword">using</a><a name="831"> </a><a name="832" class="Symbol">(</a><a name="833" class="Keyword">module</a><a name="839"> Membership</a><a name="850" class="Symbol">;</a><a name="851"> here</a><a name="856" class="Symbol">;</a><a name="857"> there</a><a name="863" class="Symbol">)</a><a name="864">
  </a><a name="867" class="Keyword">open</a><a name="871"> </a><a name="872" class="Keyword">import</a><a name="878"> </a><a name="879" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#1" class="Module" target="_blank">Function.Equivalence</a><a name="899"> </a><a name="900" class="Keyword">using</a><a name="905"> </a><a name="906" class="Symbol">(</a><a name="907">_⇔_</a><a name="910" class="Symbol">;</a><a name="911"> id</a><a name="914" class="Symbol">;</a><a name="915"> map</a><a name="919" class="Symbol">;</a><a name="920"> equivalence</a><a name="932" class="Symbol">)</a><a name="933">
  </a><a name="936" class="Keyword">open</a><a name="940"> </a><a name="941" class="Keyword">import</a><a name="947"> </a><a name="948" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1" class="Module" target="_blank">Relation.Binary.PropositionalEquality</a><a name="985">
  </a><a name="988" class="Keyword">open</a><a name="992"> </a><a name="993" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2298" class="Module" target="_blank">Membership</a><a name="1003"> </a><a name="1004" class="Symbol">(</a><a name="1005" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1526" class="Function" target="_blank">setoid</a><a name="1011"> </a><a name="1012" href="#520" class="Datatype">Type</a><a name="1016" class="Symbol">)</a><a name="1017">    </a><a name="1021" class="Keyword">using</a><a name="1026"> </a><a name="1027" class="Symbol">(</a><a name="1028">_∈_</a><a name="1031" class="Symbol">)</a></pre>


<pre class="Agda">  <a name="1061" class="Keyword">infix</a><a name="1066"> </a><a name="1067" class="Number">4</a><a name="1068"> _⊢_

  </a><a name="1076" class="Keyword">data</a><a name="1080"> </a><a name="1081" href="#366" class="Module">Sequent</a><a name="1088"> </a><a name="1089" class="Symbol">:</a><a name="1090"> </a><a name="1091" class="PrimitiveType">Set</a><a name="1094"> </a><a name="1095" class="Keyword">where</a><a name="1100">
    </a><a name="1105" href="#1105" class="InductiveConstructor Operator">_⊢_</a><a name="1108"> </a><a name="1109" class="Symbol">:</a><a name="1110"> </a><a name="1111" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="1115"> </a><a name="1116" href="#520" class="Datatype">Type</a><a name="1120"> </a><a name="1121" class="Symbol">→</a><a name="1122"> </a><a name="1123" href="#520" class="Datatype">Type</a><a name="1127"> </a><a name="1128" class="Symbol">→</a><a name="1129"> </a><a name="1130" href="#1081" class="Datatype">Sequent</a></pre>

<pre class="Agda">  <a name="1165" class="Keyword">infix</a><a name="1170"> </a><a name="1171" class="Number">3</a><a name="1172"> ND_

  </a><a name="1180" class="Keyword">data</a><a name="1184"> </a><a name="1185" href="#366" class="Module">ND_</a><a name="1188"> </a><a name="1189" class="Symbol">:</a><a name="1190"> </a><a name="1191" href="#1081" class="Datatype">Sequent</a><a name="1198"> </a><a name="1199" class="Symbol">→</a><a name="1200"> </a><a name="1201" class="PrimitiveType">Set</a><a name="1204"> </a><a name="1205" class="Keyword">where</a><a name="1210">
    </a><a name="1215" href="#1215" class="InductiveConstructor">ax</a><a name="1217"> </a><a name="1218" class="Symbol">:</a><a name="1219"> </a><a name="1220" class="Symbol">∀</a><a name="1221"> </a><a name="1222" class="Symbol">{</a><a name="1223" href="#1223" class="Bound">A</a><a name="1224">   </a><a name="1227" href="#1227" class="Bound">Γ</a><a name="1228" class="Symbol">}</a><a name="1229"> </a><a name="1230" class="Symbol">→</a><a name="1231"> </a><a name="1232" href="#1223" class="Bound">A</a><a name="1233"> </a><a name="1234" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1235"> </a><a name="1236" href="#1227" class="Bound">Γ</a><a name="1237"> </a><a name="1238" class="Symbol">→</a><a name="1239"> </a><a name="1240" href="#1185" class="Datatype Operator">ND</a><a name="1242"> </a><a name="1243" href="#1227" class="Bound">Γ</a><a name="1244"> </a><a name="1245" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1246"> </a><a name="1247" href="#1223" class="Bound">A</a><a name="1248">
    </a><a name="1253" href="#1253" class="InductiveConstructor">⇒i</a><a name="1255"> </a><a name="1256" class="Symbol">:</a><a name="1257"> </a><a name="1258" class="Symbol">∀</a><a name="1259"> </a><a name="1260" class="Symbol">{</a><a name="1261" href="#1261" class="Bound">A</a><a name="1262"> </a><a name="1263" href="#1263" class="Bound">B</a><a name="1264"> </a><a name="1265" href="#1265" class="Bound">Γ</a><a name="1266" class="Symbol">}</a><a name="1267"> </a><a name="1268" class="Symbol">→</a><a name="1269"> </a><a name="1270" href="#1185" class="Datatype Operator">ND</a><a name="1272"> </a><a name="1273" href="#1261" class="Bound">A</a><a name="1274"> </a><a name="1275" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1276"> </a><a name="1277" href="#1265" class="Bound">Γ</a><a name="1278"> </a><a name="1279" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1280"> </a><a name="1281" href="#1263" class="Bound">B</a><a name="1282"> </a><a name="1283" class="Symbol">→</a><a name="1284"> </a><a name="1285" href="#1185" class="Datatype Operator">ND</a><a name="1287"> </a><a name="1288" href="#1265" class="Bound">Γ</a><a name="1289"> </a><a name="1290" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1291"> </a><a name="1292" href="#1261" class="Bound">A</a><a name="1293"> </a><a name="1294" href="#563" class="InductiveConstructor Operator">⇒</a><a name="1295"> </a><a name="1296" href="#1263" class="Bound">B</a><a name="1297">
    </a><a name="1302" href="#1302" class="InductiveConstructor">⇒e</a><a name="1304"> </a><a name="1305" class="Symbol">:</a><a name="1306"> </a><a name="1307" class="Symbol">∀</a><a name="1308"> </a><a name="1309" class="Symbol">{</a><a name="1310" href="#1310" class="Bound">A</a><a name="1311"> </a><a name="1312" href="#1312" class="Bound">B</a><a name="1313"> </a><a name="1314" href="#1314" class="Bound">Γ</a><a name="1315" class="Symbol">}</a><a name="1316"> </a><a name="1317" class="Symbol">→</a><a name="1318"> </a><a name="1319" href="#1185" class="Datatype Operator">ND</a><a name="1321"> </a><a name="1322" href="#1314" class="Bound">Γ</a><a name="1323"> </a><a name="1324" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1325"> </a><a name="1326" href="#1310" class="Bound">A</a><a name="1327"> </a><a name="1328" href="#563" class="InductiveConstructor Operator">⇒</a><a name="1329"> </a><a name="1330" href="#1312" class="Bound">B</a><a name="1331"> </a><a name="1332" class="Symbol">→</a><a name="1333"> </a><a name="1334" href="#1185" class="Datatype Operator">ND</a><a name="1336"> </a><a name="1337" href="#1314" class="Bound">Γ</a><a name="1338"> </a><a name="1339" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1340"> </a><a name="1341" href="#1310" class="Bound">A</a><a name="1342"> </a><a name="1343" class="Symbol">→</a><a name="1344"> </a><a name="1345" href="#1185" class="Datatype Operator">ND</a><a name="1347"> </a><a name="1348" href="#1314" class="Bound">Γ</a><a name="1349"> </a><a name="1350" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1351"> </a><a name="1352" href="#1312" class="Bound">B</a></pre>

\\[
    \\frac{A \\in \\Gamma}{\\Gamma \\vdash A}{\\small ax}
    \\quad
    \\frac{A , \\Gamma \\vdash B}{\\Gamma \\vdash A \\Rightarrow B}{\\small{\\Rightarrow}\\!i}
    \\quad
    \\frac{\\Gamma \\vdash A \Rightarrow B \\quad \\Gamma \\vdash A}{\\Gamma \\vdash B}{\\small{\\Rightarrow}\\!e}
\\]

<pre class="Agda">  <a name="1680" class="Keyword">infix</a><a name="1685"> </a><a name="1686" class="Number">3</a><a name="1687"> SC_

  </a><a name="1695" class="Keyword">data</a><a name="1699"> </a><a name="1700" href="#366" class="Module">SC_</a><a name="1703"> </a><a name="1704" class="Symbol">:</a><a name="1705"> </a><a name="1706" href="#1081" class="Datatype">Sequent</a><a name="1713"> </a><a name="1714" class="Symbol">→</a><a name="1715"> </a><a name="1716" class="PrimitiveType">Set</a><a name="1719"> </a><a name="1720" class="Keyword">where</a><a name="1725">
    </a><a name="1730" href="#1730" class="InductiveConstructor">ax</a><a name="1732">  </a><a name="1734" class="Symbol">:</a><a name="1735"> </a><a name="1736" class="Symbol">∀</a><a name="1737"> </a><a name="1738" class="Symbol">{</a><a name="1739" href="#1739" class="Bound">A</a><a name="1740">     </a><a name="1745" href="#1745" class="Bound">Γ</a><a name="1746" class="Symbol">}</a><a name="1747"> </a><a name="1748" class="Symbol">→</a><a name="1749"> </a><a name="1750" href="#1739" class="Bound">A</a><a name="1751"> </a><a name="1752" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1753"> </a><a name="1754" href="#1745" class="Bound">Γ</a><a name="1755"> </a><a name="1756" class="Symbol">→</a><a name="1757"> </a><a name="1758" href="#1700" class="Datatype Operator">SC</a><a name="1760"> </a><a name="1761" href="#1745" class="Bound">Γ</a><a name="1762"> </a><a name="1763" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1764"> </a><a name="1765" href="#1739" class="Bound">A</a><a name="1766">
    </a><a name="1771" href="#1771" class="InductiveConstructor">cut</a><a name="1774"> </a><a name="1775" class="Symbol">:</a><a name="1776"> </a><a name="1777" class="Symbol">∀</a><a name="1778"> </a><a name="1779" class="Symbol">{</a><a name="1780" href="#1780" class="Bound">A</a><a name="1781"> </a><a name="1782" href="#1782" class="Bound">B</a><a name="1783">   </a><a name="1786" href="#1786" class="Bound">Γ</a><a name="1787" class="Symbol">}</a><a name="1788"> </a><a name="1789" class="Symbol">→</a><a name="1790"> </a><a name="1791" href="#1700" class="Datatype Operator">SC</a><a name="1793"> </a><a name="1794" href="#1786" class="Bound">Γ</a><a name="1795"> </a><a name="1796" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1797"> </a><a name="1798" href="#1780" class="Bound">A</a><a name="1799"> </a><a name="1800" class="Symbol">→</a><a name="1801"> </a><a name="1802" href="#1700" class="Datatype Operator">SC</a><a name="1804"> </a><a name="1805" href="#1780" class="Bound">A</a><a name="1806"> </a><a name="1807" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1808"> </a><a name="1809" href="#1786" class="Bound">Γ</a><a name="1810"> </a><a name="1811" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1812"> </a><a name="1813" href="#1782" class="Bound">B</a><a name="1814"> </a><a name="1815" class="Symbol">→</a><a name="1816"> </a><a name="1817" href="#1700" class="Datatype Operator">SC</a><a name="1819"> </a><a name="1820" href="#1786" class="Bound">Γ</a><a name="1821"> </a><a name="1822" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1823"> </a><a name="1824" href="#1782" class="Bound">B</a><a name="1825">
    </a><a name="1830" href="#1830" class="InductiveConstructor">⇒l</a><a name="1832">  </a><a name="1834" class="Symbol">:</a><a name="1835"> </a><a name="1836" class="Symbol">∀</a><a name="1837"> </a><a name="1838" class="Symbol">{</a><a name="1839" href="#1839" class="Bound">A</a><a name="1840"> </a><a name="1841" href="#1841" class="Bound">B</a><a name="1842"> </a><a name="1843" href="#1843" class="Bound">C</a><a name="1844"> </a><a name="1845" href="#1845" class="Bound">Γ</a><a name="1846" class="Symbol">}</a><a name="1847"> </a><a name="1848" class="Symbol">→</a><a name="1849"> </a><a name="1850" href="#1700" class="Datatype Operator">SC</a><a name="1852"> </a><a name="1853" href="#1845" class="Bound">Γ</a><a name="1854"> </a><a name="1855" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1856"> </a><a name="1857" href="#1839" class="Bound">A</a><a name="1858"> </a><a name="1859" class="Symbol">→</a><a name="1860"> </a><a name="1861" href="#1700" class="Datatype Operator">SC</a><a name="1863"> </a><a name="1864" href="#1841" class="Bound">B</a><a name="1865"> </a><a name="1866" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1867"> </a><a name="1868" href="#1845" class="Bound">Γ</a><a name="1869"> </a><a name="1870" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1871"> </a><a name="1872" href="#1843" class="Bound">C</a><a name="1873"> </a><a name="1874" class="Symbol">→</a><a name="1875"> </a><a name="1876" href="#1700" class="Datatype Operator">SC</a><a name="1878"> </a><a name="1879" href="#1839" class="Bound">A</a><a name="1880"> </a><a name="1881" href="#563" class="InductiveConstructor Operator">⇒</a><a name="1882"> </a><a name="1883" href="#1841" class="Bound">B</a><a name="1884"> </a><a name="1885" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1886"> </a><a name="1887" href="#1845" class="Bound">Γ</a><a name="1888"> </a><a name="1889" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1890"> </a><a name="1891" href="#1843" class="Bound">C</a><a name="1892">
    </a><a name="1897" href="#1897" class="InductiveConstructor">⇒r</a><a name="1899">  </a><a name="1901" class="Symbol">:</a><a name="1902"> </a><a name="1903" class="Symbol">∀</a><a name="1904"> </a><a name="1905" class="Symbol">{</a><a name="1906" href="#1906" class="Bound">A</a><a name="1907"> </a><a name="1908" href="#1908" class="Bound">B</a><a name="1909">   </a><a name="1912" href="#1912" class="Bound">Γ</a><a name="1913" class="Symbol">}</a><a name="1914"> </a><a name="1915" class="Symbol">→</a><a name="1916"> </a><a name="1917" href="#1700" class="Datatype Operator">SC</a><a name="1919"> </a><a name="1920" href="#1906" class="Bound">A</a><a name="1921"> </a><a name="1922" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1923"> </a><a name="1924" href="#1912" class="Bound">Γ</a><a name="1925"> </a><a name="1926" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1927"> </a><a name="1928" href="#1908" class="Bound">B</a><a name="1929"> </a><a name="1930" class="Symbol">→</a><a name="1931"> </a><a name="1932" href="#1700" class="Datatype Operator">SC</a><a name="1934"> </a><a name="1935" href="#1912" class="Bound">Γ</a><a name="1936"> </a><a name="1937" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="1938"> </a><a name="1939" href="#1906" class="Bound">A</a><a name="1940"> </a><a name="1941" href="#563" class="InductiveConstructor Operator">⇒</a><a name="1942"> </a><a name="1943" href="#1908" class="Bound">B</a></pre>

\\[
    \\frac{A \\in \\Gamma}{\\Gamma \\vdash A}{\\small ax}
    \\quad
    \\frac{\\Gamma \\vdash A \\quad A , \\Gamma \\vdash B}{\\Gamma \\vdash B}{\\small cut}
    \\quad
    \\frac{\\Gamma \\vdash A \\quad B , \\Gamma \\vdash C}{A \\Rightarrow  B , \\Gamma \\vdash C}{\\small{\\Rightarrow}\\!l}
    \\quad
    \\frac{A , \\Gamma \\vdash B}{\\Gamma \\vdash A \\Rightarrow B}{\\small{\\Rightarrow}\\!r}
\\]

<pre class="Agda">  <a name="2383" class="Keyword">pattern</a><a name="2390"> </a><a name="2391" href="#2391" class="InductiveConstructor">ax₀</a><a name="2394"> </a><a name="2395" class="Symbol">=</a><a name="2396"> </a><a name="2397" class="InductiveConstructor">ax</a><a name="2399"> </a><a name="2400" class="Symbol">(</a><a name="2401" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2405"> </a><a name="2406" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="2410" class="Symbol">)</a><a name="2411">
  </a><a name="2414" class="Keyword">pattern</a><a name="2421"> </a><a name="2422" href="#2422" class="InductiveConstructor">ax₁</a><a name="2425"> </a><a name="2426" class="Symbol">=</a><a name="2427"> </a><a name="2428" class="InductiveConstructor">ax</a><a name="2430"> </a><a name="2431" class="Symbol">(</a><a name="2432" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2437"> </a><a name="2438" class="Symbol">(</a><a name="2439" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2443"> </a><a name="2444" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="2448" class="Symbol">))</a><a name="2450">
  </a><a name="2453" class="Keyword">pattern</a><a name="2460"> </a><a name="2461" href="#2461" class="InductiveConstructor">ax₂</a><a name="2464"> </a><a name="2465" class="Symbol">=</a><a name="2466"> </a><a name="2467" class="InductiveConstructor">ax</a><a name="2469"> </a><a name="2470" class="Symbol">(</a><a name="2471" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2476"> </a><a name="2477" class="Symbol">(</a><a name="2478" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2483"> </a><a name="2484" class="Symbol">(</a><a name="2485" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2489"> </a><a name="2490" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="2494" class="Symbol">)))</a></pre>

<pre class="Agda">  <a name="2525" href="#2525" class="Function">∈-exch</a><a name="2531"> </a><a name="2532" class="Symbol">:</a><a name="2533"> </a><a name="2534" class="Symbol">∀</a><a name="2535"> </a><a name="2536" class="Symbol">{</a><a name="2537" href="#2537" class="Bound">A</a><a name="2538"> </a><a name="2539" href="#2539" class="Bound">B</a><a name="2540"> </a><a name="2541" href="#2541" class="Bound">C</a><a name="2542" class="Symbol">}</a><a name="2543"> </a><a name="2544" class="Symbol">(</a><a name="2545" href="#2545" class="Bound">Γ₁</a><a name="2547"> </a><a name="2548" class="Symbol">:</a><a name="2549"> </a><a name="2550" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="2554"> </a><a name="2555" href="#520" class="Datatype">Type</a><a name="2559" class="Symbol">)</a><a name="2560"> </a><a name="2561" class="Symbol">{</a><a name="2562" href="#2562" class="Bound">Γ₂</a><a name="2564"> </a><a name="2565" class="Symbol">:</a><a name="2566"> </a><a name="2567" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="2571"> </a><a name="2572" href="#520" class="Datatype">Type</a><a name="2576" class="Symbol">}</a><a name="2577">
          </a><a name="2588" class="Symbol">→</a><a name="2589"> </a><a name="2590" href="#2537" class="Bound">A</a><a name="2591"> </a><a name="2592" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="2593"> </a><a name="2594" href="#2545" class="Bound">Γ₁</a><a name="2596"> </a><a name="2597" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="2599"> </a><a name="2600" href="#2541" class="Bound">C</a><a name="2601"> </a><a name="2602" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2603"> </a><a name="2604" href="#2539" class="Bound">B</a><a name="2605"> </a><a name="2606" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2607"> </a><a name="2608" href="#2562" class="Bound">Γ₂</a><a name="2610"> </a><a name="2611" class="Symbol">→</a><a name="2612"> </a><a name="2613" href="#2537" class="Bound">A</a><a name="2614"> </a><a name="2615" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="2616"> </a><a name="2617" href="#2545" class="Bound">Γ₁</a><a name="2619"> </a><a name="2620" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="2622"> </a><a name="2623" href="#2539" class="Bound">B</a><a name="2624"> </a><a name="2625" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2626"> </a><a name="2627" href="#2541" class="Bound">C</a><a name="2628"> </a><a name="2629" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2630"> </a><a name="2631" href="#2562" class="Bound">Γ₂</a><a name="2633">
  </a><a name="2636" href="#2525" class="Function">∈-exch</a><a name="2642">      </a><a name="2648" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2650">  </a><a name="2652" class="Symbol">(</a><a name="2653" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2657">         </a><a name="2666" href="#2666" class="Bound">p</a><a name="2667" class="Symbol">)</a><a name="2668">  </a><a name="2670" class="Symbol">=</a><a name="2671"> </a><a name="2672" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2677"> </a><a name="2678" class="Symbol">(</a><a name="2679" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2683"> </a><a name="2684" href="#2666" class="Bound">p</a><a name="2685" class="Symbol">)</a><a name="2686"> </a><a name="2687" class="Comment">-- the swap</a><a name="2698">
  </a><a name="2701" href="#2525" class="Function">∈-exch</a><a name="2707">      </a><a name="2713" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2715">  </a><a name="2717" class="Symbol">(</a><a name="2718" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2723"> </a><a name="2724" class="Symbol">(</a><a name="2725" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2729">  </a><a name="2731" href="#2731" class="Bound">p</a><a name="2732" class="Symbol">))</a><a name="2734"> </a><a name="2735" class="Symbol">=</a><a name="2736"> </a><a name="2737" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2741"> </a><a name="2742" href="#2731" class="Bound">p</a><a name="2743">         </a><a name="2752" class="Comment">-- is here.</a><a name="2763">
  </a><a name="2766" href="#2525" class="Function">∈-exch</a><a name="2772">      </a><a name="2778" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2780">  </a><a name="2782" class="Symbol">(</a><a name="2783" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2788"> </a><a name="2789" class="Symbol">(</a><a name="2790" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2795"> </a><a name="2796" href="#2796" class="Bound">p</a><a name="2797" class="Symbol">))</a><a name="2799"> </a><a name="2800" class="Symbol">=</a><a name="2801"> </a><a name="2802" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2807"> </a><a name="2808" class="Symbol">(</a><a name="2809" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2814"> </a><a name="2815" href="#2796" class="Bound">p</a><a name="2816" class="Symbol">)</a><a name="2817">
  </a><a name="2820" href="#2525" class="Function">∈-exch</a><a name="2826"> </a><a name="2827" class="Symbol">(</a><a name="2828" href="#2828" class="Bound">C</a><a name="2829"> </a><a name="2830" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2831"> </a><a name="2832" href="#2832" class="Bound">Γ₁</a><a name="2834" class="Symbol">)</a><a name="2835"> </a><a name="2836" class="Symbol">(</a><a name="2837" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2841">         </a><a name="2850" href="#2850" class="Bound">p</a><a name="2851" class="Symbol">)</a><a name="2852">  </a><a name="2854" class="Symbol">=</a><a name="2855"> </a><a name="2856" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2860"> </a><a name="2861" href="#2850" class="Bound">p</a><a name="2862">
  </a><a name="2865" href="#2525" class="Function">∈-exch</a><a name="2871"> </a><a name="2872" class="Symbol">(</a><a name="2873" href="#2873" class="Bound">C</a><a name="2874"> </a><a name="2875" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2876"> </a><a name="2877" href="#2877" class="Bound">Γ₁</a><a name="2879" class="Symbol">)</a><a name="2880"> </a><a name="2881" class="Symbol">(</a><a name="2882" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2887">        </a><a name="2895" href="#2895" class="Bound">p</a><a name="2896" class="Symbol">)</a><a name="2897">  </a><a name="2899" class="Symbol">=</a><a name="2900"> </a><a name="2901" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2906"> </a><a name="2907" class="Symbol">(</a><a name="2908" href="#2525" class="Function">∈-exch</a><a name="2914"> </a><a name="2915" href="#2877" class="Bound">Γ₁</a><a name="2917"> </a><a name="2918" href="#2895" class="Bound">p</a><a name="2919" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="2948" href="#2948" class="Function">exch</a><a name="2952"> </a><a name="2953" class="Symbol">:</a><a name="2954"> </a><a name="2955" class="Symbol">∀</a><a name="2956"> </a><a name="2957" class="Symbol">{</a><a name="2958" href="#2958" class="Bound">A</a><a name="2959"> </a><a name="2960" href="#2960" class="Bound">B</a><a name="2961"> </a><a name="2962" href="#2962" class="Bound">C</a><a name="2963" class="Symbol">}</a><a name="2964"> </a><a name="2965" class="Symbol">(</a><a name="2966" href="#2966" class="Bound">Γ₁</a><a name="2968"> </a><a name="2969" class="Symbol">:</a><a name="2970"> </a><a name="2971" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="2975"> </a><a name="2976" href="#520" class="Datatype">Type</a><a name="2980" class="Symbol">)</a><a name="2981"> </a><a name="2982" class="Symbol">{</a><a name="2983" href="#2983" class="Bound">Γ₂</a><a name="2985"> </a><a name="2986" class="Symbol">:</a><a name="2987"> </a><a name="2988" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="2992"> </a><a name="2993" href="#520" class="Datatype">Type</a><a name="2997" class="Symbol">}</a><a name="2998">
       </a><a name="3006" class="Symbol">→</a><a name="3007"> </a><a name="3008" href="#1185" class="Datatype Operator">ND</a><a name="3010"> </a><a name="3011" href="#2966" class="Bound">Γ₁</a><a name="3013"> </a><a name="3014" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="3016"> </a><a name="3017" href="#2960" class="Bound">B</a><a name="3018"> </a><a name="3019" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3020"> </a><a name="3021" href="#2958" class="Bound">A</a><a name="3022"> </a><a name="3023" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3024"> </a><a name="3025" href="#2983" class="Bound">Γ₂</a><a name="3027"> </a><a name="3028" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="3029"> </a><a name="3030" href="#2962" class="Bound">C</a><a name="3031"> </a><a name="3032" class="Symbol">→</a><a name="3033"> </a><a name="3034" href="#1185" class="Datatype Operator">ND</a><a name="3036"> </a><a name="3037" href="#2966" class="Bound">Γ₁</a><a name="3039"> </a><a name="3040" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="3042"> </a><a name="3043" href="#2958" class="Bound">A</a><a name="3044"> </a><a name="3045" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3046"> </a><a name="3047" href="#2960" class="Bound">B</a><a name="3048"> </a><a name="3049" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3050"> </a><a name="3051" href="#2983" class="Bound">Γ₂</a><a name="3053"> </a><a name="3054" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="3055"> </a><a name="3056" href="#2962" class="Bound">C</a><a name="3057">
  </a><a name="3060" href="#2948" class="Function">exch</a><a name="3064"> </a><a name="3065" href="#3065" class="Bound">Γ₁</a><a name="3067"> </a><a name="3068" class="Symbol">(</a><a name="3069" href="#1215" class="InductiveConstructor">ax</a><a name="3071"> </a><a name="3072" href="#3072" class="Bound">p</a><a name="3073" class="Symbol">)</a><a name="3074">   </a><a name="3077" class="Symbol">=</a><a name="3078"> </a><a name="3079" href="#1215" class="InductiveConstructor">ax</a><a name="3081"> </a><a name="3082" class="Symbol">(</a><a name="3083" href="#2525" class="Function">∈-exch</a><a name="3089"> </a><a name="3090" href="#3065" class="Bound">Γ₁</a><a name="3092"> </a><a name="3093" href="#3072" class="Bound">p</a><a name="3094" class="Symbol">)</a><a name="3095">
  </a><a name="3098" href="#2948" class="Function">exch</a><a name="3102"> </a><a name="3103" href="#3103" class="Bound">Γ₁</a><a name="3105"> </a><a name="3106" class="Symbol">(</a><a name="3107" href="#1253" class="InductiveConstructor">⇒i</a><a name="3109"> </a><a name="3110" href="#3110" class="Bound">f</a><a name="3111" class="Symbol">)</a><a name="3112">   </a><a name="3115" class="Symbol">=</a><a name="3116"> </a><a name="3117" href="#1253" class="InductiveConstructor">⇒i</a><a name="3119"> </a><a name="3120" class="Symbol">(</a><a name="3121" href="#2948" class="Function">exch</a><a name="3125"> </a><a name="3126" class="Symbol">(_</a><a name="3128"> </a><a name="3129" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3130"> </a><a name="3131" href="#3103" class="Bound">Γ₁</a><a name="3133" class="Symbol">)</a><a name="3134"> </a><a name="3135" href="#3110" class="Bound">f</a><a name="3136" class="Symbol">)</a><a name="3137">
  </a><a name="3140" href="#2948" class="Function">exch</a><a name="3144"> </a><a name="3145" href="#3145" class="Bound">Γ₁</a><a name="3147"> </a><a name="3148" class="Symbol">(</a><a name="3149" href="#1302" class="InductiveConstructor">⇒e</a><a name="3151"> </a><a name="3152" href="#3152" class="Bound">f</a><a name="3153"> </a><a name="3154" href="#3154" class="Bound">g</a><a name="3155" class="Symbol">)</a><a name="3156"> </a><a name="3157" class="Symbol">=</a><a name="3158"> </a><a name="3159" href="#1302" class="InductiveConstructor">⇒e</a><a name="3161"> </a><a name="3162" class="Symbol">(</a><a name="3163" href="#2948" class="Function">exch</a><a name="3167"> </a><a name="3168" href="#3145" class="Bound">Γ₁</a><a name="3170"> </a><a name="3171" href="#3152" class="Bound">f</a><a name="3172" class="Symbol">)</a><a name="3173"> </a><a name="3174" class="Symbol">(</a><a name="3175" href="#2948" class="Function">exch</a><a name="3179"> </a><a name="3180" href="#3145" class="Bound">Γ₁</a><a name="3182"> </a><a name="3183" href="#3154" class="Bound">g</a><a name="3184" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="3213" href="#3213" class="Function">weak</a><a name="3217"> </a><a name="3218" class="Symbol">:</a><a name="3219"> </a><a name="3220" class="Symbol">∀</a><a name="3221"> </a><a name="3222" class="Symbol">{</a><a name="3223" href="#3223" class="Bound">A</a><a name="3224"> </a><a name="3225" href="#3225" class="Bound">B</a><a name="3226"> </a><a name="3227" href="#3227" class="Bound">Γ</a><a name="3228" class="Symbol">}</a><a name="3229"> </a><a name="3230" class="Symbol">→</a><a name="3231"> </a><a name="3232" href="#1185" class="Datatype Operator">ND</a><a name="3234"> </a><a name="3235" href="#3227" class="Bound">Γ</a><a name="3236"> </a><a name="3237" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="3238"> </a><a name="3239" href="#3225" class="Bound">B</a><a name="3240"> </a><a name="3241" class="Symbol">→</a><a name="3242"> </a><a name="3243" href="#1185" class="Datatype Operator">ND</a><a name="3245"> </a><a name="3246" href="#3223" class="Bound">A</a><a name="3247"> </a><a name="3248" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3249"> </a><a name="3250" href="#3227" class="Bound">Γ</a><a name="3251"> </a><a name="3252" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="3253"> </a><a name="3254" href="#3225" class="Bound">B</a><a name="3255">
  </a><a name="3258" href="#3213" class="Function">weak</a><a name="3262"> </a><a name="3263" class="Symbol">(</a><a name="3264" href="#1215" class="InductiveConstructor">ax</a><a name="3266"> </a><a name="3267" href="#3267" class="Bound">p</a><a name="3268" class="Symbol">)</a><a name="3269">   </a><a name="3272" class="Symbol">=</a><a name="3273"> </a><a name="3274" href="#1215" class="InductiveConstructor">ax</a><a name="3276"> </a><a name="3277" class="Symbol">(</a><a name="3278" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="3283"> </a><a name="3284" href="#3267" class="Bound">p</a><a name="3285" class="Symbol">)</a><a name="3286">
  </a><a name="3289" href="#3213" class="Function">weak</a><a name="3293"> </a><a name="3294" class="Symbol">(</a><a name="3295" href="#1253" class="InductiveConstructor">⇒i</a><a name="3297"> </a><a name="3298" href="#3298" class="Bound">f</a><a name="3299" class="Symbol">)</a><a name="3300">   </a><a name="3303" class="Symbol">=</a><a name="3304"> </a><a name="3305" href="#1253" class="InductiveConstructor">⇒i</a><a name="3307"> </a><a name="3308" class="Symbol">(</a><a name="3309" href="#2948" class="Function">exch</a><a name="3313"> </a><a name="3314" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="3316"> </a><a name="3317" class="Symbol">(</a><a name="3318" href="#3213" class="Function">weak</a><a name="3322"> </a><a name="3323" href="#3298" class="Bound">f</a><a name="3324" class="Symbol">))</a><a name="3326">
  </a><a name="3329" href="#3213" class="Function">weak</a><a name="3333"> </a><a name="3334" class="Symbol">(</a><a name="3335" href="#1302" class="InductiveConstructor">⇒e</a><a name="3337"> </a><a name="3338" href="#3338" class="Bound">f</a><a name="3339"> </a><a name="3340" href="#3340" class="Bound">g</a><a name="3341" class="Symbol">)</a><a name="3342"> </a><a name="3343" class="Symbol">=</a><a name="3344"> </a><a name="3345" href="#1302" class="InductiveConstructor">⇒e</a><a name="3347"> </a><a name="3348" class="Symbol">(</a><a name="3349" href="#3213" class="Function">weak</a><a name="3353"> </a><a name="3354" href="#3338" class="Bound">f</a><a name="3355" class="Symbol">)</a><a name="3356"> </a><a name="3357" class="Symbol">(</a><a name="3358" href="#3213" class="Function">weak</a><a name="3362"> </a><a name="3363" href="#3340" class="Bound">g</a><a name="3364" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="3393" class="Keyword">instance</a><a name="3401">
    </a><a name="3406" href="#3406" class="Function">ND⇔SC</a><a name="3411"> </a><a name="3412" class="Symbol">:</a><a name="3413"> </a><a name="3414" class="Symbol">∀</a><a name="3415"> </a><a name="3416" class="Symbol">{</a><a name="3417" href="#3417" class="Bound">S</a><a name="3418" class="Symbol">}</a><a name="3419"> </a><a name="3420" class="Symbol">→</a><a name="3421"> </a><a name="3422" href="#1185" class="Datatype Operator">ND</a><a name="3424"> </a><a name="3425" href="#3417" class="Bound">S</a><a name="3426"> </a><a name="3427" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#711" class="Function Operator" target="_blank">⇔</a><a name="3428"> </a><a name="3429" href="#1700" class="Datatype Operator">SC</a><a name="3431"> </a><a name="3432" href="#3417" class="Bound">S</a><a name="3433">
    </a><a name="3438" href="#3406" class="Function">ND⇔SC</a><a name="3443"> </a><a name="3444" class="Symbol">=</a><a name="3445"> </a><a name="3446" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#804" class="Function" target="_blank">equivalence</a><a name="3457"> </a><a name="3458" href="#3482" class="Function">⟹</a><a name="3459"> </a><a name="3460" href="#3619" class="Function">⟸</a><a name="3461">
      </a><a name="3468" class="Keyword">where</a><a name="3473">
        </a><a name="3482" href="#3482" class="Function">⟹</a><a name="3483"> </a><a name="3484" class="Symbol">:</a><a name="3485"> </a><a name="3486" class="Symbol">∀</a><a name="3487"> </a><a name="3488" class="Symbol">{</a><a name="3489" href="#3489" class="Bound">S</a><a name="3490" class="Symbol">}</a><a name="3491"> </a><a name="3492" class="Symbol">→</a><a name="3493"> </a><a name="3494" href="#1185" class="Datatype Operator">ND</a><a name="3496"> </a><a name="3497" href="#3489" class="Bound">S</a><a name="3498"> </a><a name="3499" class="Symbol">→</a><a name="3500"> </a><a name="3501" href="#1700" class="Datatype Operator">SC</a><a name="3503"> </a><a name="3504" href="#3489" class="Bound">S</a><a name="3505">
        </a><a name="3514" href="#3482" class="Function">⟹</a><a name="3515"> </a><a name="3516" class="Symbol">(</a><a name="3517" href="#1215" class="InductiveConstructor">ax</a><a name="3519">  </a><a name="3521" href="#3521" class="Bound">p</a><a name="3522" class="Symbol">)</a><a name="3523">   </a><a name="3526" class="Symbol">=</a><a name="3527"> </a><a name="3528" href="#1730" class="InductiveConstructor">ax</a><a name="3530"> </a><a name="3531" href="#3521" class="Bound">p</a><a name="3532">
        </a><a name="3541" href="#3482" class="Function">⟹</a><a name="3542"> </a><a name="3543" class="Symbol">(</a><a name="3544" href="#1253" class="InductiveConstructor">⇒i</a><a name="3546">  </a><a name="3548" href="#3548" class="Bound">f</a><a name="3549" class="Symbol">)</a><a name="3550">   </a><a name="3553" class="Symbol">=</a><a name="3554"> </a><a name="3555" href="#1897" class="InductiveConstructor">⇒r</a><a name="3557"> </a><a name="3558" class="Symbol">(</a><a name="3559" href="#3482" class="Function">⟹</a><a name="3560"> </a><a name="3561" href="#3548" class="Bound">f</a><a name="3562" class="Symbol">)</a><a name="3563">
        </a><a name="3572" href="#3482" class="Function">⟹</a><a name="3573"> </a><a name="3574" class="Symbol">(</a><a name="3575" href="#1302" class="InductiveConstructor">⇒e</a><a name="3577">  </a><a name="3579" href="#3579" class="Bound">f</a><a name="3580"> </a><a name="3581" href="#3581" class="Bound">g</a><a name="3582" class="Symbol">)</a><a name="3583"> </a><a name="3584" class="Symbol">=</a><a name="3585"> </a><a name="3586" href="#1771" class="InductiveConstructor">cut</a><a name="3589"> </a><a name="3590" class="Symbol">(</a><a name="3591" href="#3482" class="Function">⟹</a><a name="3592"> </a><a name="3593" href="#3579" class="Bound">f</a><a name="3594" class="Symbol">)</a><a name="3595"> </a><a name="3596" class="Symbol">(</a><a name="3597" href="#1830" class="InductiveConstructor">⇒l</a><a name="3599"> </a><a name="3600" class="Symbol">(</a><a name="3601" href="#3482" class="Function">⟹</a><a name="3602"> </a><a name="3603" href="#3581" class="Bound">g</a><a name="3604" class="Symbol">)</a><a name="3605"> </a><a name="3606" href="#2391" class="InductiveConstructor">ax₀</a><a name="3609" class="Symbol">)</a><a name="3610">
        </a><a name="3619" href="#3619" class="Function">⟸</a><a name="3620"> </a><a name="3621" class="Symbol">:</a><a name="3622"> </a><a name="3623" class="Symbol">∀</a><a name="3624"> </a><a name="3625" class="Symbol">{</a><a name="3626" href="#3626" class="Bound">S</a><a name="3627" class="Symbol">}</a><a name="3628"> </a><a name="3629" class="Symbol">→</a><a name="3630"> </a><a name="3631" href="#1700" class="Datatype Operator">SC</a><a name="3633"> </a><a name="3634" href="#3626" class="Bound">S</a><a name="3635"> </a><a name="3636" class="Symbol">→</a><a name="3637"> </a><a name="3638" href="#1185" class="Datatype Operator">ND</a><a name="3640"> </a><a name="3641" href="#3626" class="Bound">S</a><a name="3642">
        </a><a name="3651" href="#3619" class="Function">⟸</a><a name="3652"> </a><a name="3653" class="Symbol">(</a><a name="3654" href="#1730" class="InductiveConstructor">ax</a><a name="3656">  </a><a name="3658" href="#3658" class="Bound">p</a><a name="3659" class="Symbol">)</a><a name="3660">   </a><a name="3663" class="Symbol">=</a><a name="3664"> </a><a name="3665" href="#1215" class="InductiveConstructor">ax</a><a name="3667"> </a><a name="3668" href="#3658" class="Bound">p</a><a name="3669">
        </a><a name="3678" href="#3619" class="Function">⟸</a><a name="3679"> </a><a name="3680" class="Symbol">(</a><a name="3681" href="#1771" class="InductiveConstructor">cut</a><a name="3684"> </a><a name="3685" href="#3685" class="Bound">f</a><a name="3686"> </a><a name="3687" href="#3687" class="Bound">g</a><a name="3688" class="Symbol">)</a><a name="3689"> </a><a name="3690" class="Symbol">=</a><a name="3691"> </a><a name="3692" href="#1302" class="InductiveConstructor">⇒e</a><a name="3694"> </a><a name="3695" class="Symbol">(</a><a name="3696" href="#1253" class="InductiveConstructor">⇒i</a><a name="3698"> </a><a name="3699" class="Symbol">(</a><a name="3700" href="#3619" class="Function">⟸</a><a name="3701"> </a><a name="3702" href="#3687" class="Bound">g</a><a name="3703" class="Symbol">))</a><a name="3705"> </a><a name="3706" class="Symbol">(</a><a name="3707" href="#3619" class="Function">⟸</a><a name="3708"> </a><a name="3709" href="#3685" class="Bound">f</a><a name="3710" class="Symbol">)</a><a name="3711">
        </a><a name="3720" href="#3619" class="Function">⟸</a><a name="3721"> </a><a name="3722" class="Symbol">(</a><a name="3723" href="#1830" class="InductiveConstructor">⇒l</a><a name="3725">  </a><a name="3727" href="#3727" class="Bound">f</a><a name="3728"> </a><a name="3729" href="#3729" class="Bound">g</a><a name="3730" class="Symbol">)</a><a name="3731"> </a><a name="3732" class="Symbol">=</a><a name="3733"> </a><a name="3734" href="#1302" class="InductiveConstructor">⇒e</a><a name="3736"> </a><a name="3737" class="Symbol">(</a><a name="3738" href="#3213" class="Function">weak</a><a name="3742"> </a><a name="3743" class="Symbol">(</a><a name="3744" href="#1253" class="InductiveConstructor">⇒i</a><a name="3746"> </a><a name="3747" class="Symbol">(</a><a name="3748" href="#3619" class="Function">⟸</a><a name="3749"> </a><a name="3750" href="#3729" class="Bound">g</a><a name="3751" class="Symbol">)))</a><a name="3754"> </a><a name="3755" class="Symbol">(</a><a name="3756" href="#1302" class="InductiveConstructor">⇒e</a><a name="3758"> </a><a name="3759" href="#2391" class="InductiveConstructor">ax₀</a><a name="3762"> </a><a name="3763" class="Symbol">(</a><a name="3764" href="#3213" class="Function">weak</a><a name="3768"> </a><a name="3769" class="Symbol">(</a><a name="3770" href="#3619" class="Function">⟸</a><a name="3771"> </a><a name="3772" href="#3727" class="Bound">f</a><a name="3773" class="Symbol">)))</a><a name="3776">
        </a><a name="3785" href="#3619" class="Function">⟸</a><a name="3786"> </a><a name="3787" class="Symbol">(</a><a name="3788" href="#1897" class="InductiveConstructor">⇒r</a><a name="3790">  </a><a name="3792" href="#3792" class="Bound">f</a><a name="3793" class="Symbol">)</a><a name="3794">   </a><a name="3797" class="Symbol">=</a><a name="3798"> </a><a name="3799" href="#1253" class="InductiveConstructor">⇒i</a><a name="3801"> </a><a name="3802" class="Symbol">(</a><a name="3803" href="#3619" class="Function">⟸</a><a name="3804"> </a><a name="3805" href="#3792" class="Bound">f</a><a name="3806" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="3835" href="#3835" class="Function">cont</a><a name="3839"> </a><a name="3840" class="Symbol">:</a><a name="3841"> </a><a name="3842" class="Symbol">∀</a><a name="3843"> </a><a name="3844" class="Symbol">{</a><a name="3845" href="#3845" class="Bound">A</a><a name="3846"> </a><a name="3847" href="#3847" class="Bound">B</a><a name="3848"> </a><a name="3849" href="#3849" class="Bound">Γ</a><a name="3850" class="Symbol">}</a><a name="3851"> </a><a name="3852" class="Symbol">→</a><a name="3853"> </a><a name="3854" href="#1185" class="Datatype Operator">ND</a><a name="3856"> </a><a name="3857" href="#3845" class="Bound">A</a><a name="3858"> </a><a name="3859" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3860"> </a><a name="3861" href="#3845" class="Bound">A</a><a name="3862"> </a><a name="3863" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3864"> </a><a name="3865" href="#3849" class="Bound">Γ</a><a name="3866"> </a><a name="3867" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="3868"> </a><a name="3869" href="#3847" class="Bound">B</a><a name="3870"> </a><a name="3871" class="Symbol">→</a><a name="3872"> </a><a name="3873" href="#1185" class="Datatype Operator">ND</a><a name="3875"> </a><a name="3876" href="#3845" class="Bound">A</a><a name="3877"> </a><a name="3878" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3879"> </a><a name="3880" href="#3849" class="Bound">Γ</a><a name="3881"> </a><a name="3882" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="3883"> </a><a name="3884" href="#3847" class="Bound">B</a><a name="3885">
  </a><a name="3888" href="#3835" class="Function">cont</a><a name="3892"> </a><a name="3893" href="#3893" class="Bound">f</a><a name="3894"> </a><a name="3895" class="Symbol">=</a><a name="3896"> </a><a name="3897" href="#1302" class="InductiveConstructor">⇒e</a><a name="3899"> </a><a name="3900" class="Symbol">(</a><a name="3901" href="#1253" class="InductiveConstructor">⇒i</a><a name="3903"> </a><a name="3904" href="#3893" class="Bound">f</a><a name="3905" class="Symbol">)</a><a name="3906"> </a><a name="3907" class="Symbol">(</a><a name="3908" href="#1215" class="InductiveConstructor">ax</a><a name="3910"> </a><a name="3911" class="Symbol">(</a><a name="3912" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="3916"> </a><a name="3917" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="3921" class="Symbol">))</a></pre>

<pre class="Agda"><a name="3949" class="Keyword">open</a><a name="3953"> </a><a name="3954" class="Keyword">import</a><a name="3960"> </a><a name="3961" href="https://agda.github.io/agda-stdlib/Level.html#1" class="Module" target="_blank">Level</a><a name="3966"> </a><a name="3967" class="Keyword">using</a><a name="3972"> </a><a name="3973" class="Symbol">(</a><a name="3974">_⊔_</a><a name="3977" class="Symbol">)</a><a name="3978">

</a><a name="3980" class="Keyword">record</a><a name="3986"> </a><a name="3987" href="#3987" class="Record">Interpret</a><a name="3996"> </a><a name="3997" class="Symbol">{</a><a name="3998" href="#3998" class="Bound">a</a><a name="3999" class="Symbol">}</a><a name="4000"> </a><a name="4001" class="Symbol">{</a><a name="4002" href="#4002" class="Bound">b</a><a name="4003" class="Symbol">}</a><a name="4004"> </a><a name="4005" class="Symbol">(</a><a name="4006" href="#4006" class="Bound">A</a><a name="4007"> </a><a name="4008" class="Symbol">:</a><a name="4009"> </a><a name="4010" class="PrimitiveType">Set</a><a name="4013"> </a><a name="4014" href="#3998" class="Bound">a</a><a name="4015" class="Symbol">)</a><a name="4016"> </a><a name="4017" class="Symbol">(</a><a name="4018" href="#4018" class="Bound">B</a><a name="4019"> </a><a name="4020" class="Symbol">:</a><a name="4021"> </a><a name="4022" class="PrimitiveType">Set</a><a name="4025"> </a><a name="4026" href="#4002" class="Bound">b</a><a name="4027" class="Symbol">)</a><a name="4028"> </a><a name="4029" class="Symbol">:</a><a name="4030"> </a><a name="4031" class="PrimitiveType">Set</a><a name="4034"> </a><a name="4035" class="Symbol">(</a><a name="4036" href="#3998" class="Bound">a</a><a name="4037"> </a><a name="4038" href="https://agda.github.io/agda-stdlib/Agda.Primitive.html#626" class="Primitive Operator" target="_blank">⊔</a><a name="4039"> </a><a name="4040" href="#4002" class="Bound">b</a><a name="4041" class="Symbol">)</a><a name="4042"> </a><a name="4043" class="Keyword">where</a><a name="4048">
  </a><a name="4051" class="Keyword">field</a><a name="4056">
    </a><a name="4061" href="#4061" class="Field Operator">⟦_⟧</a><a name="4064"> </a><a name="4065" class="Symbol">:</a><a name="4066"> </a><a name="4067" href="#4006" class="Bound">A</a><a name="4068"> </a><a name="4069" class="Symbol">→</a><a name="4070"> </a><a name="4071" href="#4018" class="Bound">B</a><a name="4072">
</a><a name="4073" class="Keyword">open</a><a name="4077"> </a><a name="4078" href="#3987" class="Module">Interpret</a><a name="4087"> </a><a name="4088" class="Symbol">{{...}}</a></pre>

<pre class="Agda"><a name="4121" class="Keyword">module</a><a name="4127"> </a><a name="4128" href="#4128" class="Module">SetAntecedent-Interpret</a><a name="4151">
       </a><a name="4159" class="Symbol">(</a><a name="4160" href="#4160" class="Bound">Atom</a><a name="4164"> </a><a name="4165" class="Symbol">:</a><a name="4166"> </a><a name="4167" class="PrimitiveType">Set</a><a name="4170" class="Symbol">)</a><a name="4171"> </a><a name="4172" class="Symbol">(</a><a name="4173" href="#4173" class="Bound">intp</a><a name="4177"> </a><a name="4178" class="Symbol">:</a><a name="4179"> </a><a name="4180" href="#3987" class="Record">Interpret</a><a name="4189"> </a><a name="4190" href="#4160" class="Bound">Atom</a><a name="4194"> </a><a name="4195" class="PrimitiveType">Set</a><a name="4198" class="Symbol">)</a><a name="4199"> </a><a name="4200" class="Keyword">where</a></pre>

<pre class="Agda">  <a name="4233" class="Keyword">open</a><a name="4237"> </a><a name="4238" href="#455" class="Module">SetAntecedent</a><a name="4251"> </a><a name="4252" href="#4160" class="Bound">Atom</a><a name="4256">
  </a><a name="4259" class="Keyword">open</a><a name="4263"> </a><a name="4264" class="Keyword">import</a><a name="4270"> </a><a name="4271" href="https://agda.github.io/agda-stdlib/Data.List.html#1" class="Module" target="_blank">Data.List</a><a name="4280">            </a><a name="4292" class="Keyword">using</a><a name="4297"> </a><a name="4298" class="Symbol">(</a><a name="4299">List</a><a name="4303" class="Symbol">;</a><a name="4304"> _∷_</a><a name="4308" class="Symbol">;</a><a name="4309"> []</a><a name="4312" class="Symbol">;</a><a name="4313"> map</a><a name="4317" class="Symbol">)</a><a name="4318">
  </a><a name="4321" class="Keyword">open</a><a name="4325"> </a><a name="4326" class="Keyword">import</a><a name="4332"> </a><a name="4333" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1" class="Module" target="_blank">Data.List.Any</a><a name="4346">        </a><a name="4354" class="Keyword">using</a><a name="4359"> </a><a name="4360" class="Symbol">(</a><a name="4361" class="Keyword">module</a><a name="4367"> Membership</a><a name="4378" class="Symbol">;</a><a name="4379"> here</a><a name="4384" class="Symbol">;</a><a name="4385"> there</a><a name="4391" class="Symbol">)</a><a name="4392">
  </a><a name="4395" class="Keyword">open</a><a name="4399"> </a><a name="4400" class="Keyword">import</a><a name="4406"> </a><a name="4407" href="https://agda.github.io/agda-stdlib/Function.Equality.html#1" class="Module" target="_blank">Function.Equality</a><a name="4424">    </a><a name="4428" class="Keyword">using</a><a name="4433"> </a><a name="4434" class="Symbol">(</a><a name="4435">_⟨$⟩_</a><a name="4440" class="Symbol">)</a><a name="4441">
  </a><a name="4444" class="Keyword">open</a><a name="4448"> </a><a name="4449" class="Keyword">import</a><a name="4455"> </a><a name="4456" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#1" class="Module" target="_blank">Function.Equivalence</a><a name="4476"> </a><a name="4477" class="Keyword">using</a><a name="4482"> </a><a name="4483" class="Symbol">(</a><a name="4484" class="Keyword">module</a><a name="4490"> Equivalence</a><a name="4502" class="Symbol">)</a><a name="4503">
  </a><a name="4506" class="Keyword">open</a><a name="4510"> </a><a name="4511" class="Keyword">import</a><a name="4517"> </a><a name="4518" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1" class="Module" target="_blank">Relation.Binary.PropositionalEquality</a><a name="4555">
  </a><a name="4558" class="Keyword">open</a><a name="4562"> </a><a name="4563" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2298" class="Module" target="_blank">Membership</a><a name="4573"> </a><a name="4574" class="Symbol">(</a><a name="4575" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1526" class="Function" target="_blank">setoid</a><a name="4581"> </a><a name="4582" href="#520" class="Datatype">Type</a><a name="4586" class="Symbol">)</a><a name="4587">    </a><a name="4591" class="Keyword">using</a><a name="4596"> </a><a name="4597" class="Symbol">(</a><a name="4598">_∈_</a><a name="4601" class="Symbol">)</a><a name="4602">
  </a><a name="4605" class="Keyword">open</a><a name="4609"> </a><a name="4610" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#488" class="Module" target="_blank">Equivalence</a><a name="4621">                 </a><a name="4638" class="Keyword">using</a><a name="4643"> </a><a name="4644" class="Symbol">(</a><a name="4645">to</a><a name="4647" class="Symbol">;</a><a name="4648"> from</a><a name="4653" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="4682" class="Keyword">instance</a><a name="4690">
    </a><a name="4695" href="#4695" class="Function">intpType</a><a name="4703"> </a><a name="4704" class="Symbol">:</a><a name="4705"> </a><a name="4706" href="#3987" class="Record">Interpret</a><a name="4715"> </a><a name="4716" href="#520" class="Datatype">Type</a><a name="4720"> </a><a name="4721" class="PrimitiveType">Set</a><a name="4724">
    </a><a name="4729" href="#4695" class="Function">intpType</a><a name="4737"> </a><a name="4738" class="Symbol">=</a><a name="4739"> </a><a name="4740" class="Keyword">record</a><a name="4746"> </a><a name="4747" class="Symbol">{</a><a name="4748"> </a><a name="4749" class="Field Operator">⟦_⟧</a><a name="4752"> </a><a name="4753" class="Symbol">=</a><a name="4754"> </a><a name="4755" href="#4782" class="Function Operator">⟦_⟧′</a><a name="4759"> </a><a name="4760" class="Symbol">}</a><a name="4761">
      </a><a name="4768" class="Keyword">where</a><a name="4773">
        </a><a name="4782" href="#4782" class="Function Operator">⟦_⟧′</a><a name="4786">  </a><a name="4788" class="Symbol">:</a><a name="4789"> </a><a name="4790" href="#520" class="Datatype">Type</a><a name="4794"> </a><a name="4795" class="Symbol">→</a><a name="4796"> </a><a name="4797" class="PrimitiveType">Set</a><a name="4800">
        </a><a name="4809" href="#4782" class="Function Operator">⟦</a><a name="4810"> </a><a name="4811" href="#541" class="InductiveConstructor">El</a><a name="4813">  </a><a name="4815" href="#4815" class="Bound">A</a><a name="4816"> </a><a name="4817" href="#4782" class="Function Operator">⟧′</a><a name="4819"> </a><a name="4820" class="Symbol">=</a><a name="4821"> </a><a name="4822" href="#4061" class="Field Operator">⟦</a><a name="4823"> </a><a name="4824" href="#4815" class="Bound">A</a><a name="4825"> </a><a name="4826" href="#4061" class="Field Operator">⟧</a><a name="4827">
        </a><a name="4836" href="#4782" class="Function Operator">⟦</a><a name="4837"> </a><a name="4838" href="#4838" class="Bound">A</a><a name="4839"> </a><a name="4840" href="#563" class="InductiveConstructor Operator">⇒</a><a name="4841"> </a><a name="4842" href="#4842" class="Bound">B</a><a name="4843"> </a><a name="4844" href="#4782" class="Function Operator">⟧′</a><a name="4846"> </a><a name="4847" class="Symbol">=</a><a name="4848"> </a><a name="4849" href="#4782" class="Function Operator">⟦</a><a name="4850"> </a><a name="4851" href="#4838" class="Bound">A</a><a name="4852"> </a><a name="4853" href="#4782" class="Function Operator">⟧′</a><a name="4855"> </a><a name="4856" class="Symbol">→</a><a name="4857"> </a><a name="4858" href="#4782" class="Function Operator">⟦</a><a name="4859"> </a><a name="4860" href="#4842" class="Bound">B</a><a name="4861"> </a><a name="4862" href="#4782" class="Function Operator">⟧′</a></pre>

<pre class="Agda">  <a name="4892" class="Keyword">data</a><a name="4896"> </a><a name="4897" href="#4897" class="Datatype">Env</a><a name="4900"> </a><a name="4901" class="Symbol">:</a><a name="4902"> </a><a name="4903" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="4907"> </a><a name="4908" href="#520" class="Datatype">Type</a><a name="4912"> </a><a name="4913" class="Symbol">→</a><a name="4914"> </a><a name="4915" class="PrimitiveType">Set</a><a name="4918"> </a><a name="4919" class="Keyword">where</a><a name="4924">
    </a><a name="4929" href="#4929" class="InductiveConstructor">[]</a><a name="4931">  </a><a name="4933" class="Symbol">:</a><a name="4934"> </a><a name="4935" href="#4897" class="Datatype">Env</a><a name="4938"> </a><a name="4939" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="4941">
    </a><a name="4946" href="#4946" class="InductiveConstructor Operator">_∷_</a><a name="4949"> </a><a name="4950" class="Symbol">:</a><a name="4951"> </a><a name="4952" class="Symbol">{</a><a name="4953" href="#4953" class="Bound">A</a><a name="4954"> </a><a name="4955" class="Symbol">:</a><a name="4956"> </a><a name="4957" href="#520" class="Datatype">Type</a><a name="4961" class="Symbol">}</a><a name="4962"> </a><a name="4963" class="Symbol">{</a><a name="4964" href="#4964" class="Bound">Γ</a><a name="4965"> </a><a name="4966" class="Symbol">:</a><a name="4967"> </a><a name="4968" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="4972"> </a><a name="4973" href="#520" class="Datatype">Type</a><a name="4977" class="Symbol">}</a><a name="4978">
        </a><a name="4987" class="Symbol">→</a><a name="4988"> </a><a name="4989" href="#4061" class="Field Operator">⟦</a><a name="4990"> </a><a name="4991" href="#4953" class="Bound">A</a><a name="4992"> </a><a name="4993" href="#4061" class="Field Operator">⟧</a><a name="4994"> </a><a name="4995" class="Symbol">→</a><a name="4996"> </a><a name="4997" href="#4897" class="Datatype">Env</a><a name="5000"> </a><a name="5001" href="#4964" class="Bound">Γ</a><a name="5002"> </a><a name="5003" class="Symbol">→</a><a name="5004"> </a><a name="5005" href="#4897" class="Datatype">Env</a><a name="5008"> </a><a name="5009" class="Symbol">(</a><a name="5010" href="#4953" class="Bound">A</a><a name="5011"> </a><a name="5012" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="5013"> </a><a name="5014" href="#4964" class="Bound">Γ</a><a name="5015" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="5044" href="#5044" class="Function">lookup</a><a name="5050"> </a><a name="5051" class="Symbol">:</a><a name="5052"> </a><a name="5053" class="Symbol">∀</a><a name="5054"> </a><a name="5055" class="Symbol">{</a><a name="5056" href="#5056" class="Bound">A</a><a name="5057"> </a><a name="5058" href="#5058" class="Bound">Γ</a><a name="5059" class="Symbol">}</a><a name="5060"> </a><a name="5061" class="Symbol">→</a><a name="5062"> </a><a name="5063" href="#5056" class="Bound">A</a><a name="5064"> </a><a name="5065" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="5066"> </a><a name="5067" href="#5058" class="Bound">Γ</a><a name="5068"> </a><a name="5069" class="Symbol">→</a><a name="5070"> </a><a name="5071" href="#4897" class="Datatype">Env</a><a name="5074"> </a><a name="5075" href="#5058" class="Bound">Γ</a><a name="5076"> </a><a name="5077" class="Symbol">→</a><a name="5078"> </a><a name="5079" href="#4061" class="Field Operator">⟦</a><a name="5080"> </a><a name="5081" href="#5056" class="Bound">A</a><a name="5082"> </a><a name="5083" href="#4061" class="Field Operator">⟧</a><a name="5084">
  </a><a name="5087" href="#5044" class="Function">lookup</a><a name="5093"> </a><a name="5094" class="Symbol">(</a><a name="5095" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="5099">  </a><a name="5101" href="#5101" class="Bound">p</a><a name="5102" class="Symbol">)</a><a name="5103"> </a><a name="5104" class="Symbol">(</a><a name="5105" href="#5105" class="Bound">x</a><a name="5106"> </a><a name="5107" href="#4946" class="InductiveConstructor Operator">∷</a><a name="5108"> </a><a name="5109" class="Symbol">_)</a><a name="5111"> </a><a name="5112" class="Keyword">rewrite</a><a name="5119"> </a><a name="5120" href="#5101" class="Bound">p</a><a name="5121"> </a><a name="5122" class="Symbol">=</a><a name="5123"> </a><a name="5124" href="#5105" class="Bound">x</a><a name="5125">
  </a><a name="5128" href="#5044" class="Function">lookup</a><a name="5134"> </a><a name="5135" class="Symbol">(</a><a name="5136" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="5141"> </a><a name="5142" href="#5142" class="Bound">p</a><a name="5143" class="Symbol">)</a><a name="5144"> </a><a name="5145" class="Symbol">(_</a><a name="5147"> </a><a name="5148" href="#4946" class="InductiveConstructor Operator">∷</a><a name="5149"> </a><a name="5150" href="#5150" class="Bound">e</a><a name="5151" class="Symbol">)</a><a name="5152"> </a><a name="5153" class="Symbol">=</a><a name="5154"> </a><a name="5155" href="#5044" class="Function">lookup</a><a name="5161"> </a><a name="5162" href="#5142" class="Bound">p</a><a name="5163"> </a><a name="5164" href="#5150" class="Bound">e</a></pre>

<pre class="Agda">  <a name="5193" class="Keyword">instance</a><a name="5201">
    </a><a name="5206" href="#5206" class="Function">intpSequent</a><a name="5217"> </a><a name="5218" class="Symbol">:</a><a name="5219"> </a><a name="5220" href="#3987" class="Record">Interpret</a><a name="5229"> </a><a name="5230" href="#1081" class="Datatype">Sequent</a><a name="5237"> </a><a name="5238" class="PrimitiveType">Set</a><a name="5241">
    </a><a name="5246" href="#5206" class="Function">intpSequent</a><a name="5257"> </a><a name="5258" class="Symbol">=</a><a name="5259"> </a><a name="5260" class="Keyword">record</a><a name="5266"> </a><a name="5267" class="Symbol">{</a><a name="5268"> </a><a name="5269" class="Field Operator">⟦_⟧</a><a name="5272"> </a><a name="5273" class="Symbol">=</a><a name="5274"> </a><a name="5275" href="#5302" class="Function Operator">⟦_⟧′</a><a name="5279"> </a><a name="5280" class="Symbol">}</a><a name="5281">
      </a><a name="5288" class="Keyword">where</a><a name="5293">
        </a><a name="5302" href="#5302" class="Function Operator">⟦_⟧′</a><a name="5306"> </a><a name="5307" class="Symbol">:</a><a name="5308"> </a><a name="5309" href="#1081" class="Datatype">Sequent</a><a name="5316"> </a><a name="5317" class="Symbol">→</a><a name="5318"> </a><a name="5319" class="PrimitiveType">Set</a><a name="5322">
        </a><a name="5331" href="#5302" class="Function Operator">⟦</a><a name="5332"> </a><a name="5333" href="#5333" class="Bound">Γ</a><a name="5334"> </a><a name="5335" href="#1105" class="InductiveConstructor Operator">⊢</a><a name="5336"> </a><a name="5337" href="#5337" class="Bound">A</a><a name="5338"> </a><a name="5339" href="#5302" class="Function Operator">⟧′</a><a name="5341"> </a><a name="5342" class="Symbol">=</a><a name="5343"> </a><a name="5344" href="#4897" class="Datatype">Env</a><a name="5347"> </a><a name="5348" href="#5333" class="Bound">Γ</a><a name="5349"> </a><a name="5350" class="Symbol">→</a><a name="5351"> </a><a name="5352" href="#4061" class="Field Operator">⟦</a><a name="5353"> </a><a name="5354" href="#5337" class="Bound">A</a><a name="5355"> </a><a name="5356" href="#4061" class="Field Operator">⟧</a></pre>

<pre class="Agda">  <a name="5385" class="Keyword">instance</a><a name="5393">
    </a><a name="5398" href="#5398" class="Function">intpND</a><a name="5404"> </a><a name="5405" class="Symbol">:</a><a name="5406"> </a><a name="5407" class="Symbol">∀</a><a name="5408"> </a><a name="5409" class="Symbol">{</a><a name="5410" href="#5410" class="Bound">S</a><a name="5411" class="Symbol">}</a><a name="5412"> </a><a name="5413" class="Symbol">→</a><a name="5414"> </a><a name="5415" href="#3987" class="Record">Interpret</a><a name="5424"> </a><a name="5425" class="Symbol">(</a><a name="5426" href="#1185" class="Datatype Operator">ND</a><a name="5428"> </a><a name="5429" href="#5410" class="Bound">S</a><a name="5430" class="Symbol">)</a><a name="5431"> </a><a name="5432" href="#4061" class="Field Operator">⟦</a><a name="5433"> </a><a name="5434" href="#5410" class="Bound">S</a><a name="5435"> </a><a name="5436" href="#4061" class="Field Operator">⟧</a><a name="5437">
    </a><a name="5442" href="#5398" class="Function">intpND</a><a name="5448"> </a><a name="5449" class="Symbol">=</a><a name="5450"> </a><a name="5451" class="Keyword">record</a><a name="5457"> </a><a name="5458" class="Symbol">{</a><a name="5459"> </a><a name="5460" class="Field Operator">⟦_⟧</a><a name="5463"> </a><a name="5464" class="Symbol">=</a><a name="5465"> </a><a name="5466" href="#5493" class="Function Operator">⟦_⟧′</a><a name="5470"> </a><a name="5471" class="Symbol">}</a><a name="5472">
      </a><a name="5479" class="Keyword">where</a><a name="5484">
        </a><a name="5493" href="#5493" class="Function Operator">⟦_⟧′</a><a name="5497"> </a><a name="5498" class="Symbol">:</a><a name="5499"> </a><a name="5500" class="Symbol">∀</a><a name="5501"> </a><a name="5502" class="Symbol">{</a><a name="5503" href="#5503" class="Bound">S</a><a name="5504" class="Symbol">}</a><a name="5505"> </a><a name="5506" class="Symbol">→</a><a name="5507"> </a><a name="5508" href="#1185" class="Datatype Operator">ND</a><a name="5510"> </a><a name="5511" href="#5503" class="Bound">S</a><a name="5512"> </a><a name="5513" class="Symbol">→</a><a name="5514"> </a><a name="5515" href="#4061" class="Field Operator">⟦</a><a name="5516"> </a><a name="5517" href="#5503" class="Bound">S</a><a name="5518"> </a><a name="5519" href="#4061" class="Field Operator">⟧</a><a name="5520">
        </a><a name="5529" href="#5493" class="Function Operator">⟦</a><a name="5530"> </a><a name="5531" href="#1215" class="InductiveConstructor">ax</a><a name="5533"> </a><a name="5534" href="#5534" class="Bound">p</a><a name="5535">   </a><a name="5538" href="#5493" class="Function Operator">⟧′</a><a name="5540"> </a><a name="5541" href="#5541" class="Bound">e</a><a name="5542"> </a><a name="5543" class="Symbol">=</a><a name="5544"> </a><a name="5545" href="#5044" class="Function">lookup</a><a name="5551"> </a><a name="5552" href="#5534" class="Bound">p</a><a name="5553"> </a><a name="5554" href="#5541" class="Bound">e</a><a name="5555">
        </a><a name="5564" href="#5493" class="Function Operator">⟦</a><a name="5565"> </a><a name="5566" href="#1253" class="InductiveConstructor">⇒i</a><a name="5568"> </a><a name="5569" href="#5569" class="Bound">f</a><a name="5570">   </a><a name="5573" href="#5493" class="Function Operator">⟧′</a><a name="5575"> </a><a name="5576" href="#5576" class="Bound">e</a><a name="5577"> </a><a name="5578" class="Symbol">=</a><a name="5579"> </a><a name="5580" class="Symbol">λ</a><a name="5581"> </a><a name="5582" href="#5582" class="Bound">x</a><a name="5583"> </a><a name="5584" class="Symbol">→</a><a name="5585"> </a><a name="5586" href="#5493" class="Function Operator">⟦</a><a name="5587"> </a><a name="5588" href="#5569" class="Bound">f</a><a name="5589"> </a><a name="5590" href="#5493" class="Function Operator">⟧′</a><a name="5592"> </a><a name="5593" class="Symbol">(</a><a name="5594" href="#5582" class="Bound">x</a><a name="5595"> </a><a name="5596" href="#4946" class="InductiveConstructor Operator">∷</a><a name="5597"> </a><a name="5598" href="#5576" class="Bound">e</a><a name="5599" class="Symbol">)</a><a name="5600">
        </a><a name="5609" href="#5493" class="Function Operator">⟦</a><a name="5610"> </a><a name="5611" href="#1302" class="InductiveConstructor">⇒e</a><a name="5613"> </a><a name="5614" href="#5614" class="Bound">f</a><a name="5615"> </a><a name="5616" href="#5616" class="Bound">g</a><a name="5617"> </a><a name="5618" href="#5493" class="Function Operator">⟧′</a><a name="5620"> </a><a name="5621" href="#5621" class="Bound">e</a><a name="5622"> </a><a name="5623" class="Symbol">=</a><a name="5624"> </a><a name="5625" class="Symbol">(</a><a name="5626" href="#5493" class="Function Operator">⟦</a><a name="5627"> </a><a name="5628" href="#5614" class="Bound">f</a><a name="5629"> </a><a name="5630" href="#5493" class="Function Operator">⟧′</a><a name="5632"> </a><a name="5633" href="#5621" class="Bound">e</a><a name="5634" class="Symbol">)</a><a name="5635"> </a><a name="5636" class="Symbol">(</a><a name="5637" href="#5493" class="Function Operator">⟦</a><a name="5638"> </a><a name="5639" href="#5616" class="Bound">g</a><a name="5640"> </a><a name="5641" href="#5493" class="Function Operator">⟧′</a><a name="5643"> </a><a name="5644" href="#5621" class="Bound">e</a><a name="5645" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="5674" class="Keyword">instance</a><a name="5682">
    </a><a name="5687" href="#5687" class="Function">intpSC</a><a name="5693"> </a><a name="5694" class="Symbol">:</a><a name="5695"> </a><a name="5696" class="Symbol">∀</a><a name="5697"> </a><a name="5698" class="Symbol">{</a><a name="5699" href="#5699" class="Bound">S</a><a name="5700" class="Symbol">}</a><a name="5701"> </a><a name="5702" class="Symbol">→</a><a name="5703"> </a><a name="5704" href="#3987" class="Record">Interpret</a><a name="5713"> </a><a name="5714" class="Symbol">(</a><a name="5715" href="#1700" class="Datatype Operator">SC</a><a name="5717"> </a><a name="5718" href="#5699" class="Bound">S</a><a name="5719" class="Symbol">)</a><a name="5720"> </a><a name="5721" href="#4061" class="Field Operator">⟦</a><a name="5722"> </a><a name="5723" href="#5699" class="Bound">S</a><a name="5724"> </a><a name="5725" href="#4061" class="Field Operator">⟧</a><a name="5726">
    </a><a name="5731" href="#5687" class="Function">intpSC</a><a name="5737"> </a><a name="5738" class="Symbol">=</a><a name="5739"> </a><a name="5740" class="Keyword">record</a><a name="5746"> </a><a name="5747" class="Symbol">{</a><a name="5748"> </a><a name="5749" class="Field Operator">⟦_⟧</a><a name="5752"> </a><a name="5753" class="Symbol">=</a><a name="5754"> </a><a name="5755" href="#5782" class="Function Operator">⟦_⟧′</a><a name="5759"> </a><a name="5760" class="Symbol">}</a><a name="5761">
      </a><a name="5768" class="Keyword">where</a><a name="5773">
        </a><a name="5782" href="#5782" class="Function Operator">⟦_⟧′</a><a name="5786"> </a><a name="5787" class="Symbol">:</a><a name="5788"> </a><a name="5789" class="Symbol">∀</a><a name="5790"> </a><a name="5791" class="Symbol">{</a><a name="5792" href="#5792" class="Bound">S</a><a name="5793" class="Symbol">}</a><a name="5794"> </a><a name="5795" class="Symbol">→</a><a name="5796"> </a><a name="5797" href="#1700" class="Datatype Operator">SC</a><a name="5799"> </a><a name="5800" href="#5792" class="Bound">S</a><a name="5801"> </a><a name="5802" class="Symbol">→</a><a name="5803"> </a><a name="5804" href="#4061" class="Field Operator">⟦</a><a name="5805"> </a><a name="5806" href="#5792" class="Bound">S</a><a name="5807"> </a><a name="5808" href="#4061" class="Field Operator">⟧</a><a name="5809">
        </a><a name="5818" href="#5782" class="Function Operator">⟦</a><a name="5819"> </a><a name="5820" href="#1730" class="InductiveConstructor">ax</a><a name="5822">  </a><a name="5824" href="#5824" class="Bound">p</a><a name="5825">   </a><a name="5828" href="#5782" class="Function Operator">⟧′</a><a name="5830">      </a><a name="5836" href="#5836" class="Bound">e</a><a name="5837">  </a><a name="5839" class="Symbol">=</a><a name="5840"> </a><a name="5841" href="#5044" class="Function">lookup</a><a name="5847"> </a><a name="5848" href="#5824" class="Bound">p</a><a name="5849"> </a><a name="5850" href="#5836" class="Bound">e</a><a name="5851">
        </a><a name="5860" href="#5782" class="Function Operator">⟦</a><a name="5861"> </a><a name="5862" href="#1771" class="InductiveConstructor">cut</a><a name="5865"> </a><a name="5866" href="#5866" class="Bound">f</a><a name="5867"> </a><a name="5868" href="#5868" class="Bound">g</a><a name="5869"> </a><a name="5870" href="#5782" class="Function Operator">⟧′</a><a name="5872">      </a><a name="5878" href="#5878" class="Bound">e</a><a name="5879">  </a><a name="5881" class="Symbol">=</a><a name="5882"> </a><a name="5883" href="#5782" class="Function Operator">⟦</a><a name="5884"> </a><a name="5885" href="#5868" class="Bound">g</a><a name="5886"> </a><a name="5887" href="#5782" class="Function Operator">⟧′</a><a name="5889"> </a><a name="5890" class="Symbol">(</a><a name="5891" href="#5782" class="Function Operator">⟦</a><a name="5892"> </a><a name="5893" href="#5866" class="Bound">f</a><a name="5894"> </a><a name="5895" href="#5782" class="Function Operator">⟧′</a><a name="5897"> </a><a name="5898" href="#5878" class="Bound">e</a><a name="5899"> </a><a name="5900" href="#4946" class="InductiveConstructor Operator">∷</a><a name="5901"> </a><a name="5902" href="#5878" class="Bound">e</a><a name="5903" class="Symbol">)</a><a name="5904">
        </a><a name="5913" href="#5782" class="Function Operator">⟦</a><a name="5914"> </a><a name="5915" href="#1830" class="InductiveConstructor">⇒l</a><a name="5917">  </a><a name="5919" href="#5919" class="Bound">f</a><a name="5920"> </a><a name="5921" href="#5921" class="Bound">g</a><a name="5922"> </a><a name="5923" href="#5782" class="Function Operator">⟧′</a><a name="5925"> </a><a name="5926" class="Symbol">(</a><a name="5927" href="#5927" class="Bound">h</a><a name="5928"> </a><a name="5929" href="#4946" class="InductiveConstructor Operator">∷</a><a name="5930"> </a><a name="5931" href="#5931" class="Bound">e</a><a name="5932" class="Symbol">)</a><a name="5933"> </a><a name="5934" class="Symbol">=</a><a name="5935"> </a><a name="5936" href="#5782" class="Function Operator">⟦</a><a name="5937"> </a><a name="5938" href="#5921" class="Bound">g</a><a name="5939"> </a><a name="5940" href="#5782" class="Function Operator">⟧′</a><a name="5942"> </a><a name="5943" class="Symbol">(</a><a name="5944" href="#5927" class="Bound">h</a><a name="5945"> </a><a name="5946" class="Symbol">(</a><a name="5947" href="#5782" class="Function Operator">⟦</a><a name="5948"> </a><a name="5949" href="#5919" class="Bound">f</a><a name="5950"> </a><a name="5951" href="#5782" class="Function Operator">⟧′</a><a name="5953"> </a><a name="5954" href="#5931" class="Bound">e</a><a name="5955" class="Symbol">)</a><a name="5956"> </a><a name="5957" href="#4946" class="InductiveConstructor Operator">∷</a><a name="5958"> </a><a name="5959" href="#5931" class="Bound">e</a><a name="5960" class="Symbol">)</a><a name="5961">
        </a><a name="5970" href="#5782" class="Function Operator">⟦</a><a name="5971"> </a><a name="5972" href="#1897" class="InductiveConstructor">⇒r</a><a name="5974">  </a><a name="5976" href="#5976" class="Bound">f</a><a name="5977">   </a><a name="5980" href="#5782" class="Function Operator">⟧′</a><a name="5982">      </a><a name="5988" href="#5988" class="Bound">e</a><a name="5989">  </a><a name="5991" class="Symbol">=</a><a name="5992"> </a><a name="5993" class="Symbol">λ</a><a name="5994"> </a><a name="5995" href="#5995" class="Bound">x</a><a name="5996"> </a><a name="5997" class="Symbol">→</a><a name="5998"> </a><a name="5999" href="#5782" class="Function Operator">⟦</a><a name="6000"> </a><a name="6001" href="#5976" class="Bound">f</a><a name="6002"> </a><a name="6003" href="#5782" class="Function Operator">⟧′</a><a name="6005"> </a><a name="6006" class="Symbol">(</a><a name="6007" href="#5995" class="Bound">x</a><a name="6008"> </a><a name="6009" href="#4946" class="InductiveConstructor Operator">∷</a><a name="6010"> </a><a name="6011" href="#5988" class="Bound">e</a><a name="6012" class="Symbol">)</a></pre>

<pre class="Agda">  <a name="6041" href="#6041" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6050"> </a><a name="6051" class="Symbol">:</a><a name="6052"> </a><a name="6053" class="Symbol">∀</a><a name="6054"> </a><a name="6055" class="Symbol">{</a><a name="6056" href="#6056" class="Bound">S</a><a name="6057" class="Symbol">}</a><a name="6058"> </a><a name="6059" class="Symbol">(</a><a name="6060" href="#6060" class="Bound">f</a><a name="6061"> </a><a name="6062" class="Symbol">:</a><a name="6063"> </a><a name="6064" href="#1185" class="Datatype Operator">ND</a><a name="6066"> </a><a name="6067" href="#6056" class="Bound">S</a><a name="6068" class="Symbol">)</a><a name="6069"> </a><a name="6070" class="Symbol">→</a><a name="6071"> </a><a name="6072" href="#4061" class="Field Operator">⟦</a><a name="6073"> </a><a name="6074" href="#6060" class="Bound">f</a><a name="6075"> </a><a name="6076" href="#4061" class="Field Operator">⟧</a><a name="6077"> </a><a name="6078" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4497" class="Datatype Operator" target="_blank">≡</a><a name="6079"> </a><a name="6080" href="#4061" class="Field Operator">⟦</a><a name="6081"> </a><a name="6082" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#638" class="Field" target="_blank">to</a><a name="6084"> </a><a name="6085" href="#3406" class="Function">ND⇔SC</a><a name="6090"> </a><a name="6091" href="https://agda.github.io/agda-stdlib/Function.Equality.html#681" class="Field Operator" target="_blank">⟨$⟩</a><a name="6094"> </a><a name="6095" href="#6060" class="Bound">f</a><a name="6096"> </a><a name="6097" href="#4061" class="Field Operator">⟧</a><a name="6098">
  </a><a name="6101" href="#6041" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6110"> </a><a name="6111" class="Symbol">(</a><a name="6112" href="#1215" class="InductiveConstructor">ax</a><a name="6114"> </a><a name="6115" class="Symbol">_)</a><a name="6117">   </a><a name="6120" class="Symbol">=</a><a name="6121"> </a><a name="6122" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="6126">
  </a><a name="6129" href="#6041" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6138"> </a><a name="6139" class="Symbol">(</a><a name="6140" href="#1253" class="InductiveConstructor">⇒i</a><a name="6142"> </a><a name="6143" href="#6143" class="Bound">f</a><a name="6144" class="Symbol">)</a><a name="6145">   </a><a name="6148" class="Symbol">=</a><a name="6149"> </a><a name="6150" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1036" class="Function" target="_blank">cong</a><a name="6154">  </a><a name="6156" class="Symbol">(λ</a><a name="6158"> </a><a name="6159" href="#6159" class="Bound">f</a><a name="6160"> </a><a name="6161" href="#6161" class="Bound">e</a><a name="6162"> </a><a name="6163" href="#6163" class="Bound">x</a><a name="6164"> </a><a name="6165" class="Symbol">→</a><a name="6166"> </a><a name="6167" href="#6159" class="Bound">f</a><a name="6168"> </a><a name="6169" class="Symbol">(</a><a name="6170" href="#6163" class="Bound">x</a><a name="6171"> </a><a name="6172" href="#4946" class="InductiveConstructor Operator">∷</a><a name="6173"> </a><a name="6174" href="#6161" class="Bound">e</a><a name="6175" class="Symbol">))</a><a name="6177"> </a><a name="6178" class="Symbol">(</a><a name="6179" href="#6041" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6188"> </a><a name="6189" href="#6143" class="Bound">f</a><a name="6190" class="Symbol">)</a><a name="6191">
  </a><a name="6194" href="#6041" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6203"> </a><a name="6204" class="Symbol">(</a><a name="6205" href="#1302" class="InductiveConstructor">⇒e</a><a name="6207"> </a><a name="6208" href="#6208" class="Bound">f</a><a name="6209"> </a><a name="6210" href="#6210" class="Bound">g</a><a name="6211" class="Symbol">)</a><a name="6212"> </a><a name="6213" class="Symbol">=</a><a name="6214"> </a><a name="6215" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1274" class="Function" target="_blank">cong₂</a><a name="6220"> </a><a name="6221" class="Symbol">(λ</a><a name="6223"> </a><a name="6224" href="#6224" class="Bound">f</a><a name="6225"> </a><a name="6226" href="#6226" class="Bound">g</a><a name="6227"> </a><a name="6228" href="#6228" class="Bound">e</a><a name="6229"> </a><a name="6230" class="Symbol">→</a><a name="6231"> </a><a name="6232" href="#6224" class="Bound">f</a><a name="6233"> </a><a name="6234" href="#6228" class="Bound">e</a><a name="6235"> </a><a name="6236" class="Symbol">(</a><a name="6237" href="#6226" class="Bound">g</a><a name="6238"> </a><a name="6239" href="#6228" class="Bound">e</a><a name="6240" class="Symbol">))</a><a name="6242"> </a><a name="6243" class="Symbol">(</a><a name="6244" href="#6041" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6253"> </a><a name="6254" href="#6208" class="Bound">f</a><a name="6255" class="Symbol">)</a><a name="6256"> </a><a name="6257" class="Symbol">(</a><a name="6258" href="#6041" class="Function">⟦ND⟧⇒⟦SC⟧</a><a name="6267"> </a><a name="6268" href="#6210" class="Bound">g</a><a name="6269" class="Symbol">)</a></pre>

<!--
  ⟦ND⟧⇐⟦SC⟧ : ∀ {S} (f : SC S) → ⟦ f ⟧ ≡ ⟦ from ND⇔SC ⟨$⟩ f ⟧
  ⟦ND⟧⇐⟦SC⟧ (ax  _)   = refl
  ⟦ND⟧⇐⟦SC⟧ (cut f g) = cong₂ (λ f g e → g (f e ∷ e)) (⟦ND⟧⇐⟦SC⟧ f) (⟦ND⟧⇐⟦SC⟧ g)
  ⟦ND⟧⇐⟦SC⟧ (⇒l  f g) = {!!}
  ⟦ND⟧⇐⟦SC⟧ (⇒r  f)   = cong  (λ f e x → f (x ∷ e)) (⟦ND⟧⇐⟦SC⟧ f)
-->
