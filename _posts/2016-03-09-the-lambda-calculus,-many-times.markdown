---
title      : One λ-calculus, many times...
date       : 2016-03-02 12:00:00
categories : [agda]
tags       : [agda]
published  : false
---

I mentioned one another type of post which you'll find on any Agda
user's blog: implementing the λ-calculus. If you simply google "Agda
lambda calculus", you'll easily find tens of examples.

<pre class="Agda"><a name="350" class="Keyword">module</a><a name="356"> </a><a name="357" href="#1" class="Module">2016-03-09-the-lambda-calculus,-many-times</a><a name="399"> </a><a name="400" class="Symbol">(</a><a name="401" href="#401" class="Bound">Atom</a><a name="405"> </a><a name="406" class="Symbol">:</a><a name="407"> </a><a name="408" class="PrimitiveType">Set</a><a name="411" class="Symbol">)</a><a name="412"> </a><a name="413" class="Keyword">where</a></pre><pre class="Agda">  <a name="447" class="Keyword">data</a><a name="451"> </a><a name="452" href="#452" class="Datatype">Type</a><a name="456"> </a><a name="457" class="Symbol">:</a><a name="458"> </a><a name="459" class="PrimitiveType">Set</a><a name="462"> </a><a name="463" class="Keyword">where</a><a name="468">
    </a><a name="473" href="#473" class="InductiveConstructor">El</a><a name="475">  </a><a name="477" class="Symbol">:</a><a name="478"> </a><a name="479" href="#401" class="Bound">Atom</a><a name="483"> </a><a name="484" class="Symbol">→</a><a name="485"> </a><a name="486" href="#452" class="Datatype">Type</a><a name="490">
    </a><a name="495" href="#495" class="InductiveConstructor Operator">_⇒_</a><a name="498"> </a><a name="499" class="Symbol">:</a><a name="500"> </a><a name="501" href="#452" class="Datatype">Type</a><a name="505"> </a><a name="506" class="Symbol">→</a><a name="507"> </a><a name="508" href="#452" class="Datatype">Type</a><a name="512"> </a><a name="513" class="Symbol">→</a><a name="514"> </a><a name="515" href="#452" class="Datatype">Type</a></pre><pre class="Agda">  <a name="548" class="Keyword">module</a><a name="554"> </a><a name="555" href="#555" class="Module">SetAntecedent</a><a name="568"> </a><a name="569" class="Keyword">where</a></pre><pre class="Agda">    <a name="605" class="Keyword">open</a><a name="609"> </a><a name="610" class="Keyword">import</a><a name="616"> </a><a name="617" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#1" class="Module" target="_blank">Function.Equivalence</a><a name="637"> </a><a name="638" class="Keyword">using</a><a name="643"> </a><a name="644" class="Symbol">(</a><a name="645">_⇔_</a><a name="648" class="Symbol">;</a><a name="649"> id</a><a name="652" class="Symbol">;</a><a name="653"> map</a><a name="657" class="Symbol">;</a><a name="658"> equivalence</a><a name="670" class="Symbol">)</a><a name="671">
    </a><a name="676" class="Keyword">open</a><a name="680"> </a><a name="681" class="Keyword">import</a><a name="687"> </a><a name="688" href="https://agda.github.io/agda-stdlib/Data.Nat.html#1" class="Module" target="_blank">Data.Nat</a><a name="696">             </a><a name="709" class="Keyword">using</a><a name="714"> </a><a name="715" class="Symbol">(</a><a name="716">ℕ</a><a name="717" class="Symbol">;</a><a name="718"> suc</a><a name="722" class="Symbol">;</a><a name="723"> zero</a><a name="728" class="Symbol">)</a><a name="729">
    </a><a name="734" class="Keyword">open</a><a name="738"> </a><a name="739" class="Keyword">import</a><a name="745"> </a><a name="746" href="https://agda.github.io/agda-stdlib/Data.Fin.html#1" class="Module" target="_blank">Data.Fin</a><a name="754">             </a><a name="767" class="Keyword">using</a><a name="772"> </a><a name="773" class="Symbol">(</a><a name="774">Fin</a><a name="777" class="Symbol">;</a><a name="778"> suc</a><a name="782" class="Symbol">;</a><a name="783"> zero</a><a name="788" class="Symbol">)</a><a name="789">
    </a><a name="794" class="Keyword">open</a><a name="798"> </a><a name="799" class="Keyword">import</a><a name="805"> </a><a name="806" href="https://agda.github.io/agda-stdlib/Data.List.html#1" class="Module" target="_blank">Data.List</a><a name="815">            </a><a name="827" class="Keyword">using</a><a name="832"> </a><a name="833" class="Symbol">(</a><a name="834">List</a><a name="838" class="Symbol">;</a><a name="839"> _∷_</a><a name="843" class="Symbol">;</a><a name="844"> []</a><a name="847" class="Symbol">;</a><a name="848"> _++_</a><a name="853" class="Symbol">)</a><a name="854">
    </a><a name="859" class="Keyword">open</a><a name="863"> </a><a name="864" class="Keyword">import</a><a name="870"> </a><a name="871" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1" class="Module" target="_blank">Data.List.Any</a><a name="884">        </a><a name="892" class="Keyword">using</a><a name="897"> </a><a name="898" class="Symbol">(</a><a name="899" class="Keyword">module</a><a name="905"> Membership</a><a name="916" class="Symbol">;</a><a name="917"> here</a><a name="922" class="Symbol">;</a><a name="923"> there</a><a name="929" class="Symbol">)</a><a name="930">
    </a><a name="935" class="Keyword">open</a><a name="939"> </a><a name="940" class="Keyword">import</a><a name="946"> </a><a name="947" href="https://agda.github.io/agda-stdlib/Data.Product.html#1" class="Module" target="_blank">Data.Product</a><a name="959">         </a><a name="968" class="Keyword">using</a><a name="973"> </a><a name="974" class="Symbol">(</a><a name="975">∃</a><a name="976" class="Symbol">;</a><a name="977"> _,_</a><a name="981" class="Symbol">)</a><a name="982">
    </a><a name="987" class="Keyword">open</a><a name="991"> </a><a name="992" class="Keyword">import</a><a name="998"> </a><a name="999" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1" class="Module" target="_blank">Relation.Binary.PropositionalEquality</a><a name="1036">
    </a><a name="1041" class="Keyword">open</a><a name="1045"> </a><a name="1046" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2298" class="Module" target="_blank">Membership</a><a name="1056"> </a><a name="1057" class="Symbol">(</a><a name="1058" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html#1526" class="Function" target="_blank">setoid</a><a name="1064"> </a><a name="1065" href="#452" class="Datatype">Type</a><a name="1069" class="Symbol">)</a><a name="1070">    </a><a name="1074" class="Keyword">using</a><a name="1079"> </a><a name="1080" class="Symbol">(</a><a name="1081">_∈_</a><a name="1084" class="Symbol">)</a></pre><pre class="Agda">    <a name="1116" class="Keyword">infix</a><a name="1121"> </a><a name="1122" class="Number">4</a><a name="1123"> _⊢_

    </a><a name="1133" class="Keyword">data</a><a name="1137"> </a><a name="1138" href="#1138" class="Datatype">Sequent</a><a name="1145"> </a><a name="1146" class="Symbol">:</a><a name="1147"> </a><a name="1148" class="PrimitiveType">Set</a><a name="1151"> </a><a name="1152" class="Keyword">where</a><a name="1157">
      </a><a name="1164" href="#1164" class="InductiveConstructor Operator">_⊢_</a><a name="1167"> </a><a name="1168" class="Symbol">:</a><a name="1169"> </a><a name="1170" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="1174"> </a><a name="1175" href="#452" class="Datatype">Type</a><a name="1179"> </a><a name="1180" class="Symbol">→</a><a name="1181"> </a><a name="1182" href="#452" class="Datatype">Type</a><a name="1186"> </a><a name="1187" class="Symbol">→</a><a name="1188"> </a><a name="1189" href="#1138" class="Datatype">Sequent</a></pre><pre class="Agda">    <a name="1226" class="Keyword">infix</a><a name="1231"> </a><a name="1232" class="Number">3</a><a name="1233"> ND_

    </a><a name="1243" class="Keyword">data</a><a name="1247"> </a><a name="1248" href="#1248" class="Datatype Operator">ND_</a><a name="1251"> </a><a name="1252" class="Symbol">:</a><a name="1253"> </a><a name="1254" href="#1138" class="Datatype">Sequent</a><a name="1261"> </a><a name="1262" class="Symbol">→</a><a name="1263"> </a><a name="1264" class="PrimitiveType">Set</a><a name="1267"> </a><a name="1268" class="Keyword">where</a><a name="1273">
      </a><a name="1280" href="#1280" class="InductiveConstructor">ax</a><a name="1282"> </a><a name="1283" class="Symbol">:</a><a name="1284"> </a><a name="1285" class="Symbol">∀</a><a name="1286"> </a><a name="1287" class="Symbol">{</a><a name="1288" href="#1288" class="Bound">A</a><a name="1289">   </a><a name="1292" href="#1292" class="Bound">Γ</a><a name="1293" class="Symbol">}</a><a name="1294"> </a><a name="1295" class="Symbol">→</a><a name="1296"> </a><a name="1297" href="#1288" class="Bound">A</a><a name="1298"> </a><a name="1299" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1300"> </a><a name="1301" href="#1292" class="Bound">Γ</a><a name="1302"> </a><a name="1303" class="Symbol">→</a><a name="1304"> </a><a name="1305" href="#1248" class="Datatype Operator">ND</a><a name="1307"> </a><a name="1308" href="#1292" class="Bound">Γ</a><a name="1309"> </a><a name="1310" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1311"> </a><a name="1312" href="#1288" class="Bound">A</a><a name="1313">
      </a><a name="1320" href="#1320" class="InductiveConstructor">⇒i</a><a name="1322"> </a><a name="1323" class="Symbol">:</a><a name="1324"> </a><a name="1325" class="Symbol">∀</a><a name="1326"> </a><a name="1327" class="Symbol">{</a><a name="1328" href="#1328" class="Bound">A</a><a name="1329"> </a><a name="1330" href="#1330" class="Bound">B</a><a name="1331"> </a><a name="1332" href="#1332" class="Bound">Γ</a><a name="1333" class="Symbol">}</a><a name="1334"> </a><a name="1335" class="Symbol">→</a><a name="1336"> </a><a name="1337" href="#1248" class="Datatype Operator">ND</a><a name="1339"> </a><a name="1340" href="#1328" class="Bound">A</a><a name="1341"> </a><a name="1342" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1343"> </a><a name="1344" href="#1332" class="Bound">Γ</a><a name="1345"> </a><a name="1346" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1347"> </a><a name="1348" href="#1330" class="Bound">B</a><a name="1349"> </a><a name="1350" class="Symbol">→</a><a name="1351"> </a><a name="1352" href="#1248" class="Datatype Operator">ND</a><a name="1354"> </a><a name="1355" href="#1332" class="Bound">Γ</a><a name="1356"> </a><a name="1357" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1358"> </a><a name="1359" href="#1328" class="Bound">A</a><a name="1360"> </a><a name="1361" href="#495" class="InductiveConstructor Operator">⇒</a><a name="1362"> </a><a name="1363" href="#1330" class="Bound">B</a><a name="1364">
      </a><a name="1371" href="#1371" class="InductiveConstructor">⇒e</a><a name="1373"> </a><a name="1374" class="Symbol">:</a><a name="1375"> </a><a name="1376" class="Symbol">∀</a><a name="1377"> </a><a name="1378" class="Symbol">{</a><a name="1379" href="#1379" class="Bound">A</a><a name="1380"> </a><a name="1381" href="#1381" class="Bound">B</a><a name="1382"> </a><a name="1383" href="#1383" class="Bound">Γ</a><a name="1384" class="Symbol">}</a><a name="1385"> </a><a name="1386" class="Symbol">→</a><a name="1387"> </a><a name="1388" href="#1248" class="Datatype Operator">ND</a><a name="1390"> </a><a name="1391" href="#1383" class="Bound">Γ</a><a name="1392"> </a><a name="1393" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1394"> </a><a name="1395" href="#1379" class="Bound">A</a><a name="1396"> </a><a name="1397" href="#495" class="InductiveConstructor Operator">⇒</a><a name="1398"> </a><a name="1399" href="#1381" class="Bound">B</a><a name="1400"> </a><a name="1401" class="Symbol">→</a><a name="1402"> </a><a name="1403" href="#1248" class="Datatype Operator">ND</a><a name="1405"> </a><a name="1406" href="#1383" class="Bound">Γ</a><a name="1407"> </a><a name="1408" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1409"> </a><a name="1410" href="#1379" class="Bound">A</a><a name="1411"> </a><a name="1412" class="Symbol">→</a><a name="1413"> </a><a name="1414" href="#1248" class="Datatype Operator">ND</a><a name="1416"> </a><a name="1417" href="#1383" class="Bound">Γ</a><a name="1418"> </a><a name="1419" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1420"> </a><a name="1421" href="#1381" class="Bound">B</a></pre><pre class="Agda">    <a name="1452" class="Keyword">infix</a><a name="1457"> </a><a name="1458" class="Number">3</a><a name="1459"> SC_

    </a><a name="1469" class="Keyword">data</a><a name="1473"> </a><a name="1474" href="#1474" class="Datatype Operator">SC_</a><a name="1477"> </a><a name="1478" class="Symbol">:</a><a name="1479"> </a><a name="1480" href="#1138" class="Datatype">Sequent</a><a name="1487"> </a><a name="1488" class="Symbol">→</a><a name="1489"> </a><a name="1490" class="PrimitiveType">Set</a><a name="1493"> </a><a name="1494" class="Keyword">where</a><a name="1499">
      </a><a name="1506" href="#1506" class="InductiveConstructor">ax</a><a name="1508">  </a><a name="1510" class="Symbol">:</a><a name="1511"> </a><a name="1512" class="Symbol">∀</a><a name="1513"> </a><a name="1514" class="Symbol">{</a><a name="1515" href="#1515" class="Bound">A</a><a name="1516">     </a><a name="1521" href="#1521" class="Bound">Γ</a><a name="1522" class="Symbol">}</a><a name="1523"> </a><a name="1524" class="Symbol">→</a><a name="1525"> </a><a name="1526" href="#1515" class="Bound">A</a><a name="1527"> </a><a name="1528" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1529"> </a><a name="1530" href="#1521" class="Bound">Γ</a><a name="1531"> </a><a name="1532" class="Symbol">→</a><a name="1533"> </a><a name="1534" href="#1474" class="Datatype Operator">SC</a><a name="1536"> </a><a name="1537" href="#1521" class="Bound">Γ</a><a name="1538"> </a><a name="1539" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1540"> </a><a name="1541" href="#1515" class="Bound">A</a><a name="1542">
      </a><a name="1549" href="#1549" class="InductiveConstructor">cut</a><a name="1552"> </a><a name="1553" class="Symbol">:</a><a name="1554"> </a><a name="1555" class="Symbol">∀</a><a name="1556"> </a><a name="1557" class="Symbol">{</a><a name="1558" href="#1558" class="Bound">A</a><a name="1559"> </a><a name="1560" href="#1560" class="Bound">B</a><a name="1561">   </a><a name="1564" href="#1564" class="Bound">Γ</a><a name="1565" class="Symbol">}</a><a name="1566"> </a><a name="1567" class="Symbol">→</a><a name="1568"> </a><a name="1569" href="#1474" class="Datatype Operator">SC</a><a name="1571"> </a><a name="1572" href="#1564" class="Bound">Γ</a><a name="1573"> </a><a name="1574" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1575"> </a><a name="1576" href="#1558" class="Bound">A</a><a name="1577"> </a><a name="1578" class="Symbol">→</a><a name="1579"> </a><a name="1580" href="#1474" class="Datatype Operator">SC</a><a name="1582"> </a><a name="1583" href="#1558" class="Bound">A</a><a name="1584"> </a><a name="1585" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1586"> </a><a name="1587" href="#1564" class="Bound">Γ</a><a name="1588"> </a><a name="1589" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1590"> </a><a name="1591" href="#1560" class="Bound">B</a><a name="1592"> </a><a name="1593" class="Symbol">→</a><a name="1594"> </a><a name="1595" href="#1474" class="Datatype Operator">SC</a><a name="1597"> </a><a name="1598" href="#1564" class="Bound">Γ</a><a name="1599"> </a><a name="1600" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1601"> </a><a name="1602" href="#1560" class="Bound">B</a><a name="1603">
      </a><a name="1610" href="#1610" class="InductiveConstructor">⇒l</a><a name="1612">  </a><a name="1614" class="Symbol">:</a><a name="1615"> </a><a name="1616" class="Symbol">∀</a><a name="1617"> </a><a name="1618" class="Symbol">{</a><a name="1619" href="#1619" class="Bound">A</a><a name="1620"> </a><a name="1621" href="#1621" class="Bound">B</a><a name="1622"> </a><a name="1623" href="#1623" class="Bound">C</a><a name="1624"> </a><a name="1625" href="#1625" class="Bound">Γ</a><a name="1626" class="Symbol">}</a><a name="1627"> </a><a name="1628" class="Symbol">→</a><a name="1629"> </a><a name="1630" href="#1474" class="Datatype Operator">SC</a><a name="1632"> </a><a name="1633" href="#1625" class="Bound">Γ</a><a name="1634"> </a><a name="1635" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1636"> </a><a name="1637" href="#1619" class="Bound">A</a><a name="1638"> </a><a name="1639" class="Symbol">→</a><a name="1640"> </a><a name="1641" href="#1474" class="Datatype Operator">SC</a><a name="1643"> </a><a name="1644" href="#1621" class="Bound">B</a><a name="1645"> </a><a name="1646" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1647"> </a><a name="1648" href="#1625" class="Bound">Γ</a><a name="1649"> </a><a name="1650" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1651"> </a><a name="1652" href="#1623" class="Bound">C</a><a name="1653"> </a><a name="1654" class="Symbol">→</a><a name="1655"> </a><a name="1656" href="#1474" class="Datatype Operator">SC</a><a name="1658"> </a><a name="1659" href="#1619" class="Bound">A</a><a name="1660"> </a><a name="1661" href="#495" class="InductiveConstructor Operator">⇒</a><a name="1662"> </a><a name="1663" href="#1621" class="Bound">B</a><a name="1664"> </a><a name="1665" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1666"> </a><a name="1667" href="#1625" class="Bound">Γ</a><a name="1668"> </a><a name="1669" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1670"> </a><a name="1671" href="#1623" class="Bound">C</a><a name="1672">
      </a><a name="1679" href="#1679" class="InductiveConstructor">⇒r</a><a name="1681">  </a><a name="1683" class="Symbol">:</a><a name="1684"> </a><a name="1685" class="Symbol">∀</a><a name="1686"> </a><a name="1687" class="Symbol">{</a><a name="1688" href="#1688" class="Bound">A</a><a name="1689"> </a><a name="1690" href="#1690" class="Bound">B</a><a name="1691">   </a><a name="1694" href="#1694" class="Bound">Γ</a><a name="1695" class="Symbol">}</a><a name="1696"> </a><a name="1697" class="Symbol">→</a><a name="1698"> </a><a name="1699" href="#1474" class="Datatype Operator">SC</a><a name="1701"> </a><a name="1702" href="#1688" class="Bound">A</a><a name="1703"> </a><a name="1704" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1705"> </a><a name="1706" href="#1694" class="Bound">Γ</a><a name="1707"> </a><a name="1708" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1709"> </a><a name="1710" href="#1690" class="Bound">B</a><a name="1711"> </a><a name="1712" class="Symbol">→</a><a name="1713"> </a><a name="1714" href="#1474" class="Datatype Operator">SC</a><a name="1716"> </a><a name="1717" href="#1694" class="Bound">Γ</a><a name="1718"> </a><a name="1719" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="1720"> </a><a name="1721" href="#1688" class="Bound">A</a><a name="1722"> </a><a name="1723" href="#495" class="InductiveConstructor Operator">⇒</a><a name="1724"> </a><a name="1725" href="#1690" class="Bound">B</a></pre><pre class="Agda">    <a name="1756" class="Keyword">pattern</a><a name="1763"> </a><a name="1764" href="#1764" class="InductiveConstructor">ax₀</a><a name="1767"> </a><a name="1768" class="Symbol">=</a><a name="1769"> </a><a name="1770" class="InductiveConstructor">ax</a><a name="1772"> </a><a name="1773" class="Symbol">(</a><a name="1774" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="1778"> </a><a name="1779" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="1783" class="Symbol">)</a><a name="1784">
    </a><a name="1789" class="Keyword">pattern</a><a name="1796"> </a><a name="1797" href="#1797" class="InductiveConstructor">ax₁</a><a name="1800"> </a><a name="1801" class="Symbol">=</a><a name="1802"> </a><a name="1803" class="InductiveConstructor">ax</a><a name="1805"> </a><a name="1806" class="Symbol">(</a><a name="1807" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="1812"> </a><a name="1813" class="Symbol">(</a><a name="1814" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="1818"> </a><a name="1819" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="1823" class="Symbol">))</a><a name="1825">
    </a><a name="1830" class="Keyword">pattern</a><a name="1837"> </a><a name="1838" href="#1838" class="InductiveConstructor">ax₂</a><a name="1841"> </a><a name="1842" class="Symbol">=</a><a name="1843"> </a><a name="1844" class="InductiveConstructor">ax</a><a name="1846"> </a><a name="1847" class="Symbol">(</a><a name="1848" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="1853"> </a><a name="1854" class="Symbol">(</a><a name="1855" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="1860"> </a><a name="1861" class="Symbol">(</a><a name="1862" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="1866"> </a><a name="1867" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="1871" class="Symbol">)))</a></pre><pre class="Agda">    <a name="1904" href="#1904" class="Function">∈-exch</a><a name="1910"> </a><a name="1911" class="Symbol">:</a><a name="1912"> </a><a name="1913" class="Symbol">∀</a><a name="1914"> </a><a name="1915" class="Symbol">{</a><a name="1916" href="#1916" class="Bound">A</a><a name="1917"> </a><a name="1918" href="#1918" class="Bound">B</a><a name="1919"> </a><a name="1920" href="#1920" class="Bound">C</a><a name="1921" class="Symbol">}</a><a name="1922"> </a><a name="1923" class="Symbol">(</a><a name="1924" href="#1924" class="Bound">Γ₁</a><a name="1926"> </a><a name="1927" class="Symbol">:</a><a name="1928"> </a><a name="1929" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="1933"> </a><a name="1934" href="#452" class="Datatype">Type</a><a name="1938" class="Symbol">)</a><a name="1939"> </a><a name="1940" class="Symbol">{</a><a name="1941" href="#1941" class="Bound">Γ₂</a><a name="1943"> </a><a name="1944" class="Symbol">:</a><a name="1945"> </a><a name="1946" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="1950"> </a><a name="1951" href="#452" class="Datatype">Type</a><a name="1955" class="Symbol">}</a><a name="1956">
            </a><a name="1969" class="Symbol">→</a><a name="1970"> </a><a name="1971" href="#1916" class="Bound">A</a><a name="1972"> </a><a name="1973" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1974"> </a><a name="1975" href="#1924" class="Bound">Γ₁</a><a name="1977"> </a><a name="1978" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="1980"> </a><a name="1981" href="#1920" class="Bound">C</a><a name="1982"> </a><a name="1983" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1984"> </a><a name="1985" href="#1918" class="Bound">B</a><a name="1986"> </a><a name="1987" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="1988"> </a><a name="1989" href="#1941" class="Bound">Γ₂</a><a name="1991"> </a><a name="1992" class="Symbol">→</a><a name="1993"> </a><a name="1994" href="#1916" class="Bound">A</a><a name="1995"> </a><a name="1996" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#2920" class="Function Operator" target="_blank">∈</a><a name="1997"> </a><a name="1998" href="#1924" class="Bound">Γ₁</a><a name="2000"> </a><a name="2001" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="2003"> </a><a name="2004" href="#1918" class="Bound">B</a><a name="2005"> </a><a name="2006" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2007"> </a><a name="2008" href="#1920" class="Bound">C</a><a name="2009"> </a><a name="2010" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2011"> </a><a name="2012" href="#1941" class="Bound">Γ₂</a><a name="2014">
    </a><a name="2019" href="#1904" class="Function">∈-exch</a><a name="2025">      </a><a name="2031" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2033">  </a><a name="2035" class="Symbol">(</a><a name="2036" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2040">         </a><a name="2049" href="#2049" class="Bound">p</a><a name="2050" class="Symbol">)</a><a name="2051">  </a><a name="2053" class="Symbol">=</a><a name="2054"> </a><a name="2055" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2060"> </a><a name="2061" class="Symbol">(</a><a name="2062" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2066"> </a><a name="2067" href="#2049" class="Bound">p</a><a name="2068" class="Symbol">)</a><a name="2069"> </a><a name="2070" class="Comment">-- the swap</a><a name="2081">
    </a><a name="2086" href="#1904" class="Function">∈-exch</a><a name="2092">      </a><a name="2098" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2100">  </a><a name="2102" class="Symbol">(</a><a name="2103" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2108"> </a><a name="2109" class="Symbol">(</a><a name="2110" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2114">  </a><a name="2116" href="#2116" class="Bound">p</a><a name="2117" class="Symbol">))</a><a name="2119"> </a><a name="2120" class="Symbol">=</a><a name="2121"> </a><a name="2122" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2126"> </a><a name="2127" href="#2116" class="Bound">p</a><a name="2128">         </a><a name="2137" class="Comment">-- is here.</a><a name="2148">
    </a><a name="2153" href="#1904" class="Function">∈-exch</a><a name="2159">      </a><a name="2165" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2167">  </a><a name="2169" class="Symbol">(</a><a name="2170" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2175"> </a><a name="2176" class="Symbol">(</a><a name="2177" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2182"> </a><a name="2183" href="#2183" class="Bound">p</a><a name="2184" class="Symbol">))</a><a name="2186"> </a><a name="2187" class="Symbol">=</a><a name="2188"> </a><a name="2189" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2194"> </a><a name="2195" class="Symbol">(</a><a name="2196" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2201"> </a><a name="2202" href="#2183" class="Bound">p</a><a name="2203" class="Symbol">)</a><a name="2204">
    </a><a name="2209" href="#1904" class="Function">∈-exch</a><a name="2215"> </a><a name="2216" class="Symbol">(</a><a name="2217" href="#2217" class="Bound">C</a><a name="2218"> </a><a name="2219" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2220"> </a><a name="2221" href="#2221" class="Bound">Γ₁</a><a name="2223" class="Symbol">)</a><a name="2224"> </a><a name="2225" class="Symbol">(</a><a name="2226" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2230">         </a><a name="2239" href="#2239" class="Bound">p</a><a name="2240" class="Symbol">)</a><a name="2241">  </a><a name="2243" class="Symbol">=</a><a name="2244"> </a><a name="2245" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="2249"> </a><a name="2250" href="#2239" class="Bound">p</a><a name="2251">
    </a><a name="2256" href="#1904" class="Function">∈-exch</a><a name="2262"> </a><a name="2263" class="Symbol">(</a><a name="2264" href="#2264" class="Bound">C</a><a name="2265"> </a><a name="2266" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2267"> </a><a name="2268" href="#2268" class="Bound">Γ₁</a><a name="2270" class="Symbol">)</a><a name="2271"> </a><a name="2272" class="Symbol">(</a><a name="2273" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2278">        </a><a name="2286" href="#2286" class="Bound">p</a><a name="2287" class="Symbol">)</a><a name="2288">  </a><a name="2290" class="Symbol">=</a><a name="2291"> </a><a name="2292" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2297"> </a><a name="2298" class="Symbol">(</a><a name="2299" href="#1904" class="Function">∈-exch</a><a name="2305"> </a><a name="2306" href="#2268" class="Bound">Γ₁</a><a name="2308"> </a><a name="2309" href="#2286" class="Bound">p</a><a name="2310" class="Symbol">)</a></pre><pre class="Agda">    <a name="2341" href="#2341" class="Function">exch</a><a name="2345"> </a><a name="2346" class="Symbol">:</a><a name="2347"> </a><a name="2348" class="Symbol">∀</a><a name="2349"> </a><a name="2350" class="Symbol">{</a><a name="2351" href="#2351" class="Bound">A</a><a name="2352"> </a><a name="2353" href="#2353" class="Bound">B</a><a name="2354"> </a><a name="2355" href="#2355" class="Bound">C</a><a name="2356" class="Symbol">}</a><a name="2357"> </a><a name="2358" class="Symbol">(</a><a name="2359" href="#2359" class="Bound">Γ₁</a><a name="2361"> </a><a name="2362" class="Symbol">:</a><a name="2363"> </a><a name="2364" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="2368"> </a><a name="2369" href="#452" class="Datatype">Type</a><a name="2373" class="Symbol">)</a><a name="2374"> </a><a name="2375" class="Symbol">{</a><a name="2376" href="#2376" class="Bound">Γ₂</a><a name="2378"> </a><a name="2379" class="Symbol">:</a><a name="2380"> </a><a name="2381" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#669" class="Datatype" target="_blank">List</a><a name="2385"> </a><a name="2386" href="#452" class="Datatype">Type</a><a name="2390" class="Symbol">}</a><a name="2391">
         </a><a name="2401" class="Symbol">→</a><a name="2402"> </a><a name="2403" href="#1248" class="Datatype Operator">ND</a><a name="2405"> </a><a name="2406" href="#2359" class="Bound">Γ₁</a><a name="2408"> </a><a name="2409" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="2411"> </a><a name="2412" href="#2353" class="Bound">B</a><a name="2413"> </a><a name="2414" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2415"> </a><a name="2416" href="#2351" class="Bound">A</a><a name="2417"> </a><a name="2418" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2419"> </a><a name="2420" href="#2376" class="Bound">Γ₂</a><a name="2422"> </a><a name="2423" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="2424"> </a><a name="2425" href="#2355" class="Bound">C</a><a name="2426"> </a><a name="2427" class="Symbol">→</a><a name="2428"> </a><a name="2429" href="#1248" class="Datatype Operator">ND</a><a name="2431"> </a><a name="2432" href="#2359" class="Bound">Γ₁</a><a name="2434"> </a><a name="2435" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#1098" class="Function Operator" target="_blank">++</a><a name="2437"> </a><a name="2438" href="#2351" class="Bound">A</a><a name="2439"> </a><a name="2440" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2441"> </a><a name="2442" href="#2353" class="Bound">B</a><a name="2443"> </a><a name="2444" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2445"> </a><a name="2446" href="#2376" class="Bound">Γ₂</a><a name="2448"> </a><a name="2449" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="2450"> </a><a name="2451" href="#2355" class="Bound">C</a><a name="2452">
    </a><a name="2457" href="#2341" class="Function">exch</a><a name="2461"> </a><a name="2462" href="#2462" class="Bound">Γ₁</a><a name="2464"> </a><a name="2465" class="Symbol">(</a><a name="2466" href="#1280" class="InductiveConstructor">ax</a><a name="2468"> </a><a name="2469" href="#2469" class="Bound">p</a><a name="2470" class="Symbol">)</a><a name="2471">   </a><a name="2474" class="Symbol">=</a><a name="2475"> </a><a name="2476" href="#1280" class="InductiveConstructor">ax</a><a name="2478"> </a><a name="2479" class="Symbol">(</a><a name="2480" href="#1904" class="Function">∈-exch</a><a name="2486"> </a><a name="2487" href="#2462" class="Bound">Γ₁</a><a name="2489"> </a><a name="2490" href="#2469" class="Bound">p</a><a name="2491" class="Symbol">)</a><a name="2492">
    </a><a name="2497" href="#2341" class="Function">exch</a><a name="2501"> </a><a name="2502" href="#2502" class="Bound">Γ₁</a><a name="2504"> </a><a name="2505" class="Symbol">(</a><a name="2506" href="#1320" class="InductiveConstructor">⇒i</a><a name="2508"> </a><a name="2509" href="#2509" class="Bound">f</a><a name="2510" class="Symbol">)</a><a name="2511">   </a><a name="2514" class="Symbol">=</a><a name="2515"> </a><a name="2516" href="#1320" class="InductiveConstructor">⇒i</a><a name="2518"> </a><a name="2519" class="Symbol">(</a><a name="2520" href="#2341" class="Function">exch</a><a name="2524"> </a><a name="2525" class="Symbol">(_</a><a name="2527"> </a><a name="2528" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2529"> </a><a name="2530" href="#2502" class="Bound">Γ₁</a><a name="2532" class="Symbol">)</a><a name="2533"> </a><a name="2534" href="#2509" class="Bound">f</a><a name="2535" class="Symbol">)</a><a name="2536">
    </a><a name="2541" href="#2341" class="Function">exch</a><a name="2545"> </a><a name="2546" href="#2546" class="Bound">Γ₁</a><a name="2548"> </a><a name="2549" class="Symbol">(</a><a name="2550" href="#1371" class="InductiveConstructor">⇒e</a><a name="2552"> </a><a name="2553" href="#2553" class="Bound">f</a><a name="2554"> </a><a name="2555" href="#2555" class="Bound">g</a><a name="2556" class="Symbol">)</a><a name="2557"> </a><a name="2558" class="Symbol">=</a><a name="2559"> </a><a name="2560" href="#1371" class="InductiveConstructor">⇒e</a><a name="2562"> </a><a name="2563" class="Symbol">(</a><a name="2564" href="#2341" class="Function">exch</a><a name="2568"> </a><a name="2569" href="#2546" class="Bound">Γ₁</a><a name="2571"> </a><a name="2572" href="#2553" class="Bound">f</a><a name="2573" class="Symbol">)</a><a name="2574"> </a><a name="2575" class="Symbol">(</a><a name="2576" href="#2341" class="Function">exch</a><a name="2580"> </a><a name="2581" href="#2546" class="Bound">Γ₁</a><a name="2583"> </a><a name="2584" href="#2555" class="Bound">g</a><a name="2585" class="Symbol">)</a></pre><pre class="Agda">    <a name="2616" href="#2616" class="Function">weak</a><a name="2620"> </a><a name="2621" class="Symbol">:</a><a name="2622"> </a><a name="2623" class="Symbol">∀</a><a name="2624"> </a><a name="2625" class="Symbol">{</a><a name="2626" href="#2626" class="Bound">A</a><a name="2627"> </a><a name="2628" href="#2628" class="Bound">B</a><a name="2629"> </a><a name="2630" href="#2630" class="Bound">Γ</a><a name="2631" class="Symbol">}</a><a name="2632"> </a><a name="2633" class="Symbol">→</a><a name="2634"> </a><a name="2635" href="#1248" class="Datatype Operator">ND</a><a name="2637"> </a><a name="2638" href="#2630" class="Bound">Γ</a><a name="2639"> </a><a name="2640" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="2641"> </a><a name="2642" href="#2628" class="Bound">B</a><a name="2643"> </a><a name="2644" class="Symbol">→</a><a name="2645"> </a><a name="2646" href="#1248" class="Datatype Operator">ND</a><a name="2648"> </a><a name="2649" href="#2626" class="Bound">A</a><a name="2650"> </a><a name="2651" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="2652"> </a><a name="2653" href="#2630" class="Bound">Γ</a><a name="2654"> </a><a name="2655" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="2656"> </a><a name="2657" href="#2628" class="Bound">B</a><a name="2658">
    </a><a name="2663" href="#2616" class="Function">weak</a><a name="2667"> </a><a name="2668" class="Symbol">(</a><a name="2669" href="#1280" class="InductiveConstructor">ax</a><a name="2671"> </a><a name="2672" href="#2672" class="Bound">p</a><a name="2673" class="Symbol">)</a><a name="2674">   </a><a name="2677" class="Symbol">=</a><a name="2678"> </a><a name="2679" href="#1280" class="InductiveConstructor">ax</a><a name="2681"> </a><a name="2682" class="Symbol">(</a><a name="2683" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1227" class="InductiveConstructor" target="_blank">there</a><a name="2688"> </a><a name="2689" href="#2672" class="Bound">p</a><a name="2690" class="Symbol">)</a><a name="2691">
    </a><a name="2696" href="#2616" class="Function">weak</a><a name="2700"> </a><a name="2701" class="Symbol">(</a><a name="2702" href="#1320" class="InductiveConstructor">⇒i</a><a name="2704"> </a><a name="2705" href="#2705" class="Bound">f</a><a name="2706" class="Symbol">)</a><a name="2707">   </a><a name="2710" class="Symbol">=</a><a name="2711"> </a><a name="2712" href="#1320" class="InductiveConstructor">⇒i</a><a name="2714"> </a><a name="2715" class="Symbol">(</a><a name="2716" href="#2341" class="Function">exch</a><a name="2720"> </a><a name="2721" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#706" class="InductiveConstructor" target="_blank">[]</a><a name="2723"> </a><a name="2724" class="Symbol">(</a><a name="2725" href="#2616" class="Function">weak</a><a name="2729"> </a><a name="2730" href="#2705" class="Bound">f</a><a name="2731" class="Symbol">))</a><a name="2733">
    </a><a name="2738" href="#2616" class="Function">weak</a><a name="2742"> </a><a name="2743" class="Symbol">(</a><a name="2744" href="#1371" class="InductiveConstructor">⇒e</a><a name="2746"> </a><a name="2747" href="#2747" class="Bound">f</a><a name="2748"> </a><a name="2749" href="#2749" class="Bound">g</a><a name="2750" class="Symbol">)</a><a name="2751"> </a><a name="2752" class="Symbol">=</a><a name="2753"> </a><a name="2754" href="#1371" class="InductiveConstructor">⇒e</a><a name="2756"> </a><a name="2757" class="Symbol">(</a><a name="2758" href="#2616" class="Function">weak</a><a name="2762"> </a><a name="2763" href="#2747" class="Bound">f</a><a name="2764" class="Symbol">)</a><a name="2765"> </a><a name="2766" class="Symbol">(</a><a name="2767" href="#2616" class="Function">weak</a><a name="2771"> </a><a name="2772" href="#2749" class="Bound">g</a><a name="2773" class="Symbol">)</a></pre><pre class="Agda">    <a name="2804" href="#2804" class="Function">ND⇔SC</a><a name="2809"> </a><a name="2810" class="Symbol">:</a><a name="2811"> </a><a name="2812" class="Symbol">∀</a><a name="2813"> </a><a name="2814" class="Symbol">{</a><a name="2815" href="#2815" class="Bound">A</a><a name="2816"> </a><a name="2817" href="#2817" class="Bound">Γ</a><a name="2818" class="Symbol">}</a><a name="2819"> </a><a name="2820" class="Symbol">→</a><a name="2821"> </a><a name="2822" href="#1248" class="Datatype Operator">ND</a><a name="2824"> </a><a name="2825" href="#2817" class="Bound">Γ</a><a name="2826"> </a><a name="2827" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="2828"> </a><a name="2829" href="#2815" class="Bound">A</a><a name="2830"> </a><a name="2831" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#711" class="Function Operator" target="_blank">⇔</a><a name="2832"> </a><a name="2833" href="#1474" class="Datatype Operator">SC</a><a name="2835"> </a><a name="2836" href="#2817" class="Bound">Γ</a><a name="2837"> </a><a name="2838" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="2839"> </a><a name="2840" href="#2815" class="Bound">A</a><a name="2841">
    </a><a name="2846" href="#2804" class="Function">ND⇔SC</a><a name="2851"> </a><a name="2852" class="Symbol">=</a><a name="2853"> </a><a name="2854" href="https://agda.github.io/agda-stdlib/Function.Equivalence.html#804" class="Function" target="_blank">equivalence</a><a name="2865"> </a><a name="2866" href="#2890" class="Function">⟹</a><a name="2867"> </a><a name="2868" href="#3037" class="Function">⟸</a><a name="2869">
      </a><a name="2876" class="Keyword">where</a><a name="2881">
        </a><a name="2890" href="#2890" class="Function">⟹</a><a name="2891"> </a><a name="2892" class="Symbol">:</a><a name="2893"> </a><a name="2894" class="Symbol">∀</a><a name="2895"> </a><a name="2896" class="Symbol">{</a><a name="2897" href="#2897" class="Bound">A</a><a name="2898"> </a><a name="2899" href="#2899" class="Bound">Γ</a><a name="2900" class="Symbol">}</a><a name="2901"> </a><a name="2902" class="Symbol">→</a><a name="2903"> </a><a name="2904" href="#1248" class="Datatype Operator">ND</a><a name="2906"> </a><a name="2907" href="#2899" class="Bound">Γ</a><a name="2908"> </a><a name="2909" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="2910"> </a><a name="2911" href="#2897" class="Bound">A</a><a name="2912"> </a><a name="2913" class="Symbol">→</a><a name="2914"> </a><a name="2915" href="#1474" class="Datatype Operator">SC</a><a name="2917"> </a><a name="2918" href="#2899" class="Bound">Γ</a><a name="2919"> </a><a name="2920" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="2921"> </a><a name="2922" href="#2897" class="Bound">A</a><a name="2923">
        </a><a name="2932" href="#2890" class="Function">⟹</a><a name="2933"> </a><a name="2934" class="Symbol">(</a><a name="2935" href="#1280" class="InductiveConstructor">ax</a><a name="2937">  </a><a name="2939" href="#2939" class="Bound">p</a><a name="2940" class="Symbol">)</a><a name="2941">   </a><a name="2944" class="Symbol">=</a><a name="2945"> </a><a name="2946" href="#1506" class="InductiveConstructor">ax</a><a name="2948"> </a><a name="2949" href="#2939" class="Bound">p</a><a name="2950">
        </a><a name="2959" href="#2890" class="Function">⟹</a><a name="2960"> </a><a name="2961" class="Symbol">(</a><a name="2962" href="#1320" class="InductiveConstructor">⇒i</a><a name="2964">  </a><a name="2966" href="#2966" class="Bound">f</a><a name="2967" class="Symbol">)</a><a name="2968">   </a><a name="2971" class="Symbol">=</a><a name="2972"> </a><a name="2973" href="#1679" class="InductiveConstructor">⇒r</a><a name="2975"> </a><a name="2976" class="Symbol">(</a><a name="2977" href="#2890" class="Function">⟹</a><a name="2978"> </a><a name="2979" href="#2966" class="Bound">f</a><a name="2980" class="Symbol">)</a><a name="2981">
        </a><a name="2990" href="#2890" class="Function">⟹</a><a name="2991"> </a><a name="2992" class="Symbol">(</a><a name="2993" href="#1371" class="InductiveConstructor">⇒e</a><a name="2995">  </a><a name="2997" href="#2997" class="Bound">f</a><a name="2998"> </a><a name="2999" href="#2999" class="Bound">g</a><a name="3000" class="Symbol">)</a><a name="3001"> </a><a name="3002" class="Symbol">=</a><a name="3003"> </a><a name="3004" href="#1549" class="InductiveConstructor">cut</a><a name="3007"> </a><a name="3008" class="Symbol">(</a><a name="3009" href="#2890" class="Function">⟹</a><a name="3010"> </a><a name="3011" href="#2997" class="Bound">f</a><a name="3012" class="Symbol">)</a><a name="3013"> </a><a name="3014" class="Symbol">(</a><a name="3015" href="#1610" class="InductiveConstructor">⇒l</a><a name="3017"> </a><a name="3018" class="Symbol">(</a><a name="3019" href="#2890" class="Function">⟹</a><a name="3020"> </a><a name="3021" href="#2999" class="Bound">g</a><a name="3022" class="Symbol">)</a><a name="3023"> </a><a name="3024" href="#1764" class="InductiveConstructor">ax₀</a><a name="3027" class="Symbol">)</a><a name="3028">
        </a><a name="3037" href="#3037" class="Function">⟸</a><a name="3038"> </a><a name="3039" class="Symbol">:</a><a name="3040"> </a><a name="3041" class="Symbol">∀</a><a name="3042"> </a><a name="3043" class="Symbol">{</a><a name="3044" href="#3044" class="Bound">A</a><a name="3045"> </a><a name="3046" href="#3046" class="Bound">Γ</a><a name="3047" class="Symbol">}</a><a name="3048"> </a><a name="3049" class="Symbol">→</a><a name="3050"> </a><a name="3051" href="#1474" class="Datatype Operator">SC</a><a name="3053"> </a><a name="3054" href="#3046" class="Bound">Γ</a><a name="3055"> </a><a name="3056" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="3057"> </a><a name="3058" href="#3044" class="Bound">A</a><a name="3059"> </a><a name="3060" class="Symbol">→</a><a name="3061"> </a><a name="3062" href="#1248" class="Datatype Operator">ND</a><a name="3064"> </a><a name="3065" href="#3046" class="Bound">Γ</a><a name="3066"> </a><a name="3067" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="3068"> </a><a name="3069" href="#3044" class="Bound">A</a><a name="3070">
        </a><a name="3079" href="#3037" class="Function">⟸</a><a name="3080"> </a><a name="3081" class="Symbol">(</a><a name="3082" href="#1506" class="InductiveConstructor">ax</a><a name="3084">  </a><a name="3086" href="#3086" class="Bound">p</a><a name="3087" class="Symbol">)</a><a name="3088">   </a><a name="3091" class="Symbol">=</a><a name="3092"> </a><a name="3093" href="#1280" class="InductiveConstructor">ax</a><a name="3095"> </a><a name="3096" href="#3086" class="Bound">p</a><a name="3097">
        </a><a name="3106" href="#3037" class="Function">⟸</a><a name="3107"> </a><a name="3108" class="Symbol">(</a><a name="3109" href="#1549" class="InductiveConstructor">cut</a><a name="3112"> </a><a name="3113" href="#3113" class="Bound">f</a><a name="3114"> </a><a name="3115" href="#3115" class="Bound">g</a><a name="3116" class="Symbol">)</a><a name="3117"> </a><a name="3118" class="Symbol">=</a><a name="3119"> </a><a name="3120" href="#1371" class="InductiveConstructor">⇒e</a><a name="3122"> </a><a name="3123" class="Symbol">(</a><a name="3124" href="#1320" class="InductiveConstructor">⇒i</a><a name="3126"> </a><a name="3127" class="Symbol">(</a><a name="3128" href="#3037" class="Function">⟸</a><a name="3129"> </a><a name="3130" href="#3115" class="Bound">g</a><a name="3131" class="Symbol">))</a><a name="3133"> </a><a name="3134" class="Symbol">(</a><a name="3135" href="#3037" class="Function">⟸</a><a name="3136"> </a><a name="3137" href="#3113" class="Bound">f</a><a name="3138" class="Symbol">)</a><a name="3139">
        </a><a name="3148" href="#3037" class="Function">⟸</a><a name="3149"> </a><a name="3150" class="Symbol">(</a><a name="3151" href="#1610" class="InductiveConstructor">⇒l</a><a name="3153">  </a><a name="3155" href="#3155" class="Bound">f</a><a name="3156"> </a><a name="3157" href="#3157" class="Bound">g</a><a name="3158" class="Symbol">)</a><a name="3159"> </a><a name="3160" class="Symbol">=</a><a name="3161"> </a><a name="3162" href="#1371" class="InductiveConstructor">⇒e</a><a name="3164"> </a><a name="3165" class="Symbol">(</a><a name="3166" href="#2616" class="Function">weak</a><a name="3170"> </a><a name="3171" class="Symbol">(</a><a name="3172" href="#1320" class="InductiveConstructor">⇒i</a><a name="3174"> </a><a name="3175" class="Symbol">(</a><a name="3176" href="#3037" class="Function">⟸</a><a name="3177"> </a><a name="3178" href="#3157" class="Bound">g</a><a name="3179" class="Symbol">)))</a><a name="3182"> </a><a name="3183" class="Symbol">(</a><a name="3184" href="#1371" class="InductiveConstructor">⇒e</a><a name="3186"> </a><a name="3187" href="#1764" class="InductiveConstructor">ax₀</a><a name="3190"> </a><a name="3191" class="Symbol">(</a><a name="3192" href="#2616" class="Function">weak</a><a name="3196"> </a><a name="3197" class="Symbol">(</a><a name="3198" href="#3037" class="Function">⟸</a><a name="3199"> </a><a name="3200" href="#3155" class="Bound">f</a><a name="3201" class="Symbol">)))</a><a name="3204">
        </a><a name="3213" href="#3037" class="Function">⟸</a><a name="3214"> </a><a name="3215" class="Symbol">(</a><a name="3216" href="#1679" class="InductiveConstructor">⇒r</a><a name="3218">  </a><a name="3220" href="#3220" class="Bound">f</a><a name="3221" class="Symbol">)</a><a name="3222">   </a><a name="3225" class="Symbol">=</a><a name="3226"> </a><a name="3227" href="#1320" class="InductiveConstructor">⇒i</a><a name="3229"> </a><a name="3230" class="Symbol">(</a><a name="3231" href="#3037" class="Function">⟸</a><a name="3232"> </a><a name="3233" href="#3220" class="Bound">f</a><a name="3234" class="Symbol">)</a></pre><pre class="Agda">    <a name="3265" href="#3265" class="Function">cont</a><a name="3269"> </a><a name="3270" class="Symbol">:</a><a name="3271"> </a><a name="3272" class="Symbol">∀</a><a name="3273"> </a><a name="3274" class="Symbol">{</a><a name="3275" href="#3275" class="Bound">A</a><a name="3276"> </a><a name="3277" href="#3277" class="Bound">B</a><a name="3278"> </a><a name="3279" href="#3279" class="Bound">Γ</a><a name="3280" class="Symbol">}</a><a name="3281"> </a><a name="3282" class="Symbol">→</a><a name="3283"> </a><a name="3284" href="#1248" class="Datatype Operator">ND</a><a name="3286"> </a><a name="3287" href="#3275" class="Bound">A</a><a name="3288"> </a><a name="3289" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3290"> </a><a name="3291" href="#3275" class="Bound">A</a><a name="3292"> </a><a name="3293" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3294"> </a><a name="3295" href="#3279" class="Bound">Γ</a><a name="3296"> </a><a name="3297" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="3298"> </a><a name="3299" href="#3277" class="Bound">B</a><a name="3300"> </a><a name="3301" class="Symbol">→</a><a name="3302"> </a><a name="3303" href="#1248" class="Datatype Operator">ND</a><a name="3305"> </a><a name="3306" href="#3275" class="Bound">A</a><a name="3307"> </a><a name="3308" href="https://agda.github.io/agda-stdlib/Data.List.Base.html#721" class="InductiveConstructor Operator" target="_blank">∷</a><a name="3309"> </a><a name="3310" href="#3279" class="Bound">Γ</a><a name="3311"> </a><a name="3312" href="#1164" class="InductiveConstructor Operator">⊢</a><a name="3313"> </a><a name="3314" href="#3277" class="Bound">B</a><a name="3315">
    </a><a name="3320" href="#3265" class="Function">cont</a><a name="3324"> </a><a name="3325" href="#3325" class="Bound">f</a><a name="3326"> </a><a name="3327" class="Symbol">=</a><a name="3328"> </a><a name="3329" href="#1371" class="InductiveConstructor">⇒e</a><a name="3331"> </a><a name="3332" class="Symbol">(</a><a name="3333" href="#1320" class="InductiveConstructor">⇒i</a><a name="3335"> </a><a name="3336" href="#3325" class="Bound">f</a><a name="3337" class="Symbol">)</a><a name="3338"> </a><a name="3339" class="Symbol">(</a><a name="3340" href="#1280" class="InductiveConstructor">ax</a><a name="3342"> </a><a name="3343" class="Symbol">(</a><a name="3344" href="https://agda.github.io/agda-stdlib/Data.List.Any.html#1174" class="InductiveConstructor" target="_blank">here</a><a name="3348"> </a><a name="3349" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#4547" class="InductiveConstructor" target="_blank">refl</a><a name="3353" class="Symbol">))</a></pre>